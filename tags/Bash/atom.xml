<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bash on Yiran's Blog</title><link>https://zdyxry.github.io/tags/Bash/</link><description>Recent content in Bash on Yiran's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 11 Aug 2018 11:06:55 +0000</lastBuildDate><atom:link href="https://zdyxry.github.io/tags/Bash/atom.xml" rel="self" type="application/rss+xml"/><item><title>Pure Bash Bible</title><link>https://zdyxry.github.io/2018/08/11/Pure-Bash-Bible/</link><pubDate>Sat, 11 Aug 2018 11:06:55 +0000</pubDate><guid>https://zdyxry.github.io/2018/08/11/Pure-Bash-Bible/</guid><description>背景 链接到标题 逛 Github Trending 的时候，发现一个叫 pure bash bible 的项目，这个项目主要是介绍一些常用功能的 Bash 实现。 在日常使用中，Bash 作为大部分 Linux 发行版的默认 Shell 是使用最多的，尤其是进行一些简单的自动处理事件上很方便。但是我使用的时候通常会用 Bash、Sed、Awk、cut、timeout 等一些 Linux 命令相互配合使用。 如果你要维护的 Server 是一个比较少见的版本，比如：ESXi 5.0、XenServer 6.0 等版本，那么就会导致有些命令是缺失的，且无法安装，这时候就需要单独使用 Bash 来实现一些其他命令的功能。 pure bash bible 这个项目列举了很多常用常用功能，有一些比较有借鉴意义，在此记录。
字符串 链接到标题 删除字符串前后空格 链接到标题 trim_string（）{ # Ups：trim_string“example string” ： “ $ {1 ＃” $ {1 %% [！[：space：]] * } “ } ” ： “ $ {_ ％” $ {_ ## * [！[：space：]]} “ } ” printf &amp;#39;％s \ n &amp;#39; “ $ _ ” } $ trim_string “ Hello，World ” Hello, World $ name = “ John Black ” $ trim_string “ $ name ” John Black 删除字符串中所有空格 链接到标题 # shellcheck disable=SC2086,SC2048 trim_all() { # Usage: trim_all &amp;#34; example string &amp;#34; set -f set -- $* printf &amp;#39;%s\n&amp;#39; &amp;#34;$*&amp;#34; set +f } $ trim_all &amp;#34; Hello, World &amp;#34; Hello, World $ name=&amp;#34; John Black is my name.</description></item><item><title>奇怪的 Shell 作用域</title><link>https://zdyxry.github.io/2018/06/08/%E5%A5%87%E6%80%AA%E7%9A%84-Shell-%E4%BD%9C%E7%94%A8%E5%9F%9F/</link><pubDate>Fri, 08 Jun 2018 21:51:55 +0000</pubDate><guid>https://zdyxry.github.io/2018/06/08/%E5%A5%87%E6%80%AA%E7%9A%84-Shell-%E4%BD%9C%E7%94%A8%E5%9F%9F/</guid><description>工作中很多脚本都是用 Shell 和 Python 完成的，在上周环境中遇到了一个 Bug，导致部分功能失败，最后发现是 Shell 作用域的问题。
举例 链接到标题 $ tree . . ├── test.sh └── utils.sh 0 directories, 2 files $ cat utils.sh #!/usr/bin/env bash function echo_test { for i in `seq 2 3`;do echo &amp;#34;utils.sh&amp;#34; $i done } $ cat test.sh #!#/usr/bin/env bash . utils.sh for i in `seq 1 5`;do echo &amp;#34;before utils.sh&amp;#34; $i echo_test echo &amp;#34;after utils.sh&amp;#34; $i echo &amp;#34;#################&amp;#34; done $ bash test.sh before utils.</description></item></channel></rss>