<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tools on Yiran's Blog</title><link>https://zdyxry.github.io/tags/tools/</link><description>Recent content in tools on Yiran's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 09 Aug 2019 19:35:14 +0000</lastBuildDate><atom:link href="https://zdyxry.github.io/tags/tools/atom.xml" rel="self" type="application/rss+xml"/><item><title>代码统计工具 cloc 基本使用</title><link>https://zdyxry.github.io/2019/08/09/%E4%BB%A3%E7%A0%81%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7-cloc-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 09 Aug 2019 19:35:14 +0000</pubDate><guid>https://zdyxry.github.io/2019/08/09/%E4%BB%A3%E7%A0%81%E7%BB%9F%E8%AE%A1%E5%B7%A5%E5%85%B7-cloc-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>背景 Link to heading 在看一个新项目的时候，通常我都会了解下这个项目的代码量，然后心里给个预期，大概需要多久了解这个项目。
2023/01/11 更新：现在已切换至 loc/tokei ，速度快了许多。
wc Link to heading 在以前，我一般都是使用 find 配合 wc 来完成，比如：
root@yiran-workstation:/tmp/cloc $ find . -name &amp;#34;*.go&amp;#34; | xargs wc -l {} 81 ./installer.go 81 total 显示有一个 installer.go 的文件，一共有 81行。但是这里有个问题，就是 wc 是不会统计代码里面的具体内容的，比如注释、空白行等。
这时候我们就需要一个更高级的工具了： cloc
cloc Link to heading cloc 是一个 Perl 语言实现的项目，用途就像它的名字全称：Count Lines of Code。
使用方法的话最简单的直接加上项目路径：
root@yiran-workstation:~/go/src/github.com/kubermatic/kubeone master ✗ $ pwd /root/go/src/github.com/kubermatic/kubeone root@yiran-workstation:~/go/src/github.com/kubermatic/kubeone master ✗ $ cloc . 292 text files. 274 unique files.</description></item><item><title>Wireshark 远程抓包方法</title><link>https://zdyxry.github.io/2019/01/01/Wireshark-%E8%BF%9C%E7%A8%8B%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/</link><pubDate>Tue, 01 Jan 2019 12:46:50 +0000</pubDate><guid>https://zdyxry.github.io/2019/01/01/Wireshark-%E8%BF%9C%E7%A8%8B%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/</guid><description>背景 Link to heading 最近在看 《Wireshark网络分析就这么简单》，目前读了 1/3，觉得作为一本工具介绍书籍还是不错的，至少可以让我更关注网络相关知识。 书中有大量的实例来讲解 Wireshark 的使用，及网络基础，在阅读的过程中，需要实际动手操作下，由于搜到的教程中没有正确操作的步骤，特此记录。
环境信息 Link to heading 个人 PC Windows 10 服务器 CentOS 7 操作流程 Link to heading (1)个人 PC Link to heading 登陆 Wireshark 官网，下载最新版本软件包并安装 打开 Wireshark ，选择本机的网卡，并进行抓取，验证软件是否正常工作 (2)服务器 Link to heading 验证个人 PC 上软件正常后，我们需要在服务器安装 rpcapd，以便让 Wireshark 连接该服务器。
访问 rpcapd github 克隆相应代码 cd /tmp; git clone https://github.com/rpcapd-linux/rpcapd-linux 安装相应依赖 yum install glibc-static flex binutils 编译安装 libpcap cd /tmp/rpcapd-linux/libpcap ; ./configure &amp;amp;&amp;amp; make 编译安装 rpcapd ，注意 README 中的 libcrypt.</description></item><item><title>个人常用工具</title><link>https://zdyxry.github.io/2018/12/02/%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</link><pubDate>Sun, 02 Dec 2018 16:35:54 +0000</pubDate><guid>https://zdyxry.github.io/2018/12/02/%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</guid><description>背景 Link to heading 公司标配 Thinkpad，也曾经折腾过 Linux，最终因为舍不得 Windows 下的各种软件，就老老实实用 Windows 。 周五的时候电脑故障，趁着重新配置开发环境的机会，整理下自己常用的软件|工具。
开发工具 Link to heading 编辑器 Link to heading VIM Link to heading 主力编辑器，因为平时写 Python 比较多，所以安装的插件并不多，主要用到的就是函数之间的跳转，具体配置在 github 。
VScode Link to heading 在写代码的时候通常使用 vim ，但是看代码还是习惯于 VScode，主要是看代码用鼠标控制比较方便。 偶尔会碰到编写配置文件，比如 JSON/YAML 的时候，vim 写起来还是有些吃力，可能是我用的不到家吧。
终端 Link to heading XShell Link to heading 在 Windows 用的比较多的应该是 XShell，同时管理多台服务器简单高效，且有配套的 XSFTP，上传/下载文件很方便。
Tmux Link to heading 在 Linux 上主要用系统自带的 Terminal 配合 Tmux 使用，主要原因是 Tmux 可以在多平台使用，不用针对不同平台记不同的快捷键（没错，说的就是 Jetbrains）。
并没有对 tmux 做太多定制化配置，因为有时候服务器上面不会允许你修改默认配置文件的，所以大部分用的默认配置，平时用的比较多的应该就是 Window &amp;amp; Panel 配合使用。</description></item></channel></rss>