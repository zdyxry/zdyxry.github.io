<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Flask on Yiran's Blog</title><link>https://zdyxry.github.io/tags/Flask/</link><description>Recent content in Flask on Yiran's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 08 Jul 2018 09:44:24 +0000</lastBuildDate><atom:link href="https://zdyxry.github.io/tags/Flask/atom.xml" rel="self" type="application/rss+xml"/><item><title>Flask 流式响应</title><link>https://zdyxry.github.io/2018/07/08/Flask-%E6%B5%81%E5%BC%8F%E5%93%8D%E5%BA%94/</link><pubDate>Sun, 08 Jul 2018 09:44:24 +0000</pubDate><guid>https://zdyxry.github.io/2018/07/08/Flask-%E6%B5%81%E5%BC%8F%E5%93%8D%E5%BA%94/</guid><description>背景 链接到标题 在 web 场景下，经常会碰到下载文件的需求，通常小文件我们会采用 Flask send_file 或者 send_from_directory的方式，下载，但是当下载的文件是一个大压缩文件（&amp;gt;1GiB）时，这种方式就显得不友好了，我们需要采用流式下载的方式返回给客户端。
流式下载 链接到标题 简单实现：
from flask import Response @app.route(&amp;#34;/download/&amp;lt;file_path&amp;gt;&amp;#34;, methods=[&amp;#34;GET&amp;#34;]) def download(file_path): def generate(): if not os.path.exists(file_path): raise &amp;#34;File not found.&amp;#34; with open(file_path, &amp;#34;rb&amp;#34;) as f: while True: chunk = f.read(chunk_size=10 * 1024 * 1024) if not chunk: break yield chunk return Response(generate(), content_type=&amp;#34;application/octet-stream&amp;#34;) 运行 Flask app，可以正确下载文件，但是下载只有实时速度，没有文件总大小，导致无法知道下载进度，也没有文件类型，这些我们都可以通过增加 header 字段实现：
response = Response(generate(), mimetype=&amp;#39;application/gzip&amp;#39;) response.headers[&amp;#39;Content-Disposition&amp;#39;] = &amp;#39;attachment; filename={}.tar.gz&amp;#39;.format(&amp;#34;download_file&amp;#34;) response.headers[&amp;#39;content-length&amp;#39;] = os.stat(str(file_path)).st_size return response 这样，我们下载文件就可以看到文件类型、文件总大小及已下载大小了，其中 mimetype 根据实际压缩文件类型修改匹配即可。</description></item></channel></rss>