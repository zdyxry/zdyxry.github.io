<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Weekly on Yiran's Blog</title><link>https://zdyxry.github.io/tags/Weekly/</link><description>Recent content in Weekly on Yiran's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 05 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://zdyxry.github.io/tags/Weekly/atom.xml" rel="self" type="application/rss+xml"/><item><title>Weekly Issue 2023-03-05</title><link>https://zdyxry.github.io/2023/03/05/Weekly-Issue-2023-03-05/</link><pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate><guid>https://zdyxry.github.io/2023/03/05/Weekly-Issue-2023-03-05/</guid><description>文章 链接到标题 技术 链接到标题 Coding 102: Writing code other people can read - Stack Overflow Blog
关于代码风格的示例，写出可读代码。
HTTPS 隐私安全的一些实践 | Laisky&amp;rsquo;s Blog
[[HTTPS]] 相关概念介绍。
Introducing MRSK - YouTube
[[MRSK]] 介绍，通过 DSL 和 [[docker]] 运行 [[container]] app。
Kubernetes is a beast. Running it yourself on your own hardware is not for the faint of heart. It&amp;rsquo;s a fine option if you want to run on someone else&amp;rsquo;s platform, either transparently like Render or explicitly on AWS/GCP, but if you&amp;rsquo;d like the freedom to move between cloud and your own hardware, or even mix the two, MRSK is much simpler.</description></item><item><title>Weekly Issue 2023-02-26</title><link>https://zdyxry.github.io/2023/02/26/Weekly-Issue-2023-02-26/</link><pubDate>Sun, 26 Feb 2023 19:00:00 +0000</pubDate><guid>https://zdyxry.github.io/2023/02/26/Weekly-Issue-2023-02-26/</guid><description>文章 链接到标题 技术 链接到标题 Nix Is Fighting The Last War
[[Nix]] 注定是一个小众的解决方式。
Tcpdump 从 TCP_option_address 中根据真实 IP 过滤 | 卡瓦邦噶！
[[tcpdump]] 抓取 [[LVS]] 转发前的真实 IP 地址。
How Levels.fyi scaled to millions of users with Google Sheets as a backend
早起通过[[Google]][[Sheets]] 配合 [[Lambda]] 和 API Gateway 快速验证产品可行性，后续根据需要来切换到后端服务加数据库形式。
FOSDEM 2023 - I was wrong about Flatpak, AppImage, and Snap (Containerised Apps Presentation) - YouTube
讨论了AppImage、Snap和 Flatpak ，2017年以及现状，结论是使用 Flatpak 让生活更美好。
K8S 生态周报| Cilium 和 Istio 的新版本带来众多新特性 | MoeLove</description></item><item><title>Weekly Issue 2023-02-19</title><link>https://zdyxry.github.io/2023/02/19/Weekly-Issue-2023-02-19/</link><pubDate>Sun, 19 Feb 2023 19:00:00 +0000</pubDate><guid>https://zdyxry.github.io/2023/02/19/Weekly-Issue-2023-02-19/</guid><description>文章 链接到标题 技术 链接到标题 uBlue · GitHub 计划基于[[Fedora]][[coreos]] 的发行版，依托于 [[ostree]] 的 [[NativeContainer]] 能力，可以很方便的使用 [[Container]]来构建自己的 Desktop。
FOSDEM 2023 - blkhash - fast disk image checksums
用来计算[[image]] checksum 的工具，比 [[SHA]] 更快，支持 format 探测等。
https://newsletter.pragmaticengineer.com/p/real-world-eng-8
[[Khan]] 将内部服务从 [[Python]] 迁移至 [[Golang]]的过程和思考，根本需求是[[Python2]] 的问题，100 人规模的开发团队，共花费 3.5 年时间完成重写。
Moving to Go will undeniably be more effort than moving to Python 3, but the performance win alone makes it worth it.
Can We Stop With Those Horrible “System Overview” Dashboards Already?</description></item><item><title>Weekly Issue 2023-02-12</title><link>https://zdyxry.github.io/2023/02/12/Weekly-Issue-2023-02-12/</link><pubDate>Sun, 12 Feb 2023 19:00:00 +0000</pubDate><guid>https://zdyxry.github.io/2023/02/12/Weekly-Issue-2023-02-12/</guid><description>文章 链接到标题 技术 链接到标题 Some random thoughts on Generative AI | Reorx’s Forge
[[ChatGPT]] 大大降低了大家的使用门槛，只要你有想法，就可以快速POC。
Cloud Backup Best Practices for SMBs
云应用的[[备份]]实践，借机推广[[Snapshooter]]。
设计师如何入门前端
最后我想说，无论是设计工具还是[[前端]]代码，都只是实现创意的工具。最终能够限制创意的，只有不够开放和好奇的大脑。
Kubernetes 证书管理系列（一） | MoeLove
[[证书]]管理是个非常麻烦的事情，[[openssl]] 的命令行也是用过的命令工具里面比较难用的几个之一了。
Cloud Backup Best Practices for SMBs
云应用的[[备份]]实践，借机推广[[Snapshooter]]。
Supabase Clippy: ChatGPT for Supabase Docs
[[Supabase]] 在文档网站提供[[ChatGPT]] 功能，来辅助用户搜索。如何构建：将完整文档拆分为多份，使用 [[OpenAI]] API 将其作为输入，使用[[pgvector]] 存储到[[Postgres]] 中，获取用户问题，在[[Postgres]] 中获取问题相关的文档，讲这些文档作为[[GPT-3]] 上下文，返回给用户。
Bad Observability - SquaredUp
关于可观测需要避开的点：
Forgetting the customer; Environment inconsistency; Not understanding your ecosystem; No consistent trace ID; The big dumb metric; Bad sampling intervals; Misunderstanding metrics; Lazy synthetic transactions; A plague of dashboards; Unnecessary alerts; Hoarding data; Disconnected data; Throwing tools at a problem; Mandating tools; The chosen few;</description></item><item><title>Weekly Issue 2023-02-04</title><link>https://zdyxry.github.io/2023/02/04/Weekly-Issue-2023-02-04/</link><pubDate>Sat, 04 Feb 2023 19:00:00 +0000</pubDate><guid>https://zdyxry.github.io/2023/02/04/Weekly-Issue-2023-02-04/</guid><description>文章 链接到标题 技术 链接到标题 The only thing worse than cloud pricing is the enterprisey alternatives
涉及到金钱的东西总是让人头大。企业服务的定价确实很玄幻，透明度很低。
OpenLens 6.3.0 - No Logs or Shell buttons · Issue #6823 · lensapp/lens · GitHub
[[Lens]] 删除了部分功能引发了大家对其所有权的担忧，官方在推 Desktop 版本。
Linux Load Averages: Solving the Mystery
[[Linux]][[负载]] 解释说明，其中关于TASK_UNINTERRUPTIBLE 的历史进行了调查，文章末尾提供了 性能检查列表
协议栈源端口选择性能衰减问题 - 撸代码 - LuCode.net
自kernel 4.2开始，端口资源的分配策略改了，目前奇数端口留给bind，偶数端口留给connect为了均衡资源的占用，但是显然，这种策略不适合本文所述的特殊场景，并且对于bind而言，也存在性能衰减的问题。
依次尝试去获取，当然每次获取的起点是随机的。很明显，当我们完全占用偶数组的端口后，所有后续的connect调用，所需的源端口应该位于奇数组中，然而该函数依旧会尝试完整遍历偶数组资源，这也就是__inet_check_established耗时占比这么高的原因。
Introducing Hermes, An Open Source Document Management System
[[hashicorp]] 开源的基于 [[Google Workspace]] 的文档管理系统。
iPotato | Fly.io 初体验之博客搬家</description></item><item><title>Weekly Issue 2023-01-29</title><link>https://zdyxry.github.io/2023/01/29/Weekly-Issue-2023-01-29/</link><pubDate>Sun, 29 Jan 2023 19:00:00 +0000</pubDate><guid>https://zdyxry.github.io/2023/01/29/Weekly-Issue-2023-01-29/</guid><description>文章 链接到标题 技术 链接到标题 iptables详解（1）：iptables概念-朱双印博客
[[朱双印]] 关于 [[iptables]] 的基本介绍。
领英上的David Masover: #opentowork | 747 条评论
来自 [[Google]]真实事件，真正的 [[SRE]]，和这种人工作应该很幸福。
为什么镜像可以 pull 下来但是在 manifest inspect 的时候提示 no such manifest？—— Docker Buildx Attestations 检修记
[[Buildkit]] 新特性引发的兼容性问题。
Buildx v0.10 enables support for a minimal SLSA Provenance attestation, which requires support for OCI-compliant multi-platform images. This may introduce issues with registry and runtime support (e.g. GCR and Lambda). You can optionally disable the default provenance attestation functionality using provenance: false.</description></item><item><title>Weekly Issue 2023-01-22</title><link>https://zdyxry.github.io/2023/01/22/Weekly-Issue-2023-01-22/</link><pubDate>Sun, 22 Jan 2023 19:00:00 +0000</pubDate><guid>https://zdyxry.github.io/2023/01/22/Weekly-Issue-2023-01-22/</guid><description>文章 链接到标题 技术 链接到标题 重构荷兰政府那个那个非常有效的代码
最近的热门讨论，编写一个根据百分比生成进度条的函数。
Cloud Spend Breakdown
[[37Signals]] 发布了2022 公有云服务的账单，其中关于数据存储和数据相关服务占比达到了70% ，这部分是最难迁移出来了，期待后续。
What&amp;rsquo;s what with Wolfi, the Linux &amp;ldquo;undistribution,&amp;rdquo; and ARM | Open Source Watch
对[[Wolf]] 项目的介绍，用来应对供应链攻击。
State of Infrastructure-from-Code 2023 - Klotho
[[IaC]] 之后谈论[[IfC]] ，在IaC 场景下，开发人员通常需要考虑业务应用程序和基础设施两种应用。
[[IfC]] 通过分析业务应用代码来推断所需的基础资源，然后自动创建并维护，不需要手动指定。目前已有的方向是通过 SDK、通过代码注释、两者结合、通过新的编程语言实现。预测 [[IfC]] 会在之后愈发流行。 [[IfC]] 创建的资源如何管理？如何保证应用程序没有滥用资源？
How to use interfaces in Go | jordan orelli
关于 [[Golang]] [[interface]] 使用上的总结。
How to improve Python packaging, or why fourteen tools are at least twelve too many | Chris Warrick</description></item><item><title>Weekly Issue 2023-01-15</title><link>https://zdyxry.github.io/2023/01/15/Weekly-Issue-2023-01-15/</link><pubDate>Sun, 15 Jan 2023 19:00:00 +0000</pubDate><guid>https://zdyxry.github.io/2023/01/15/Weekly-Issue-2023-01-15/</guid><description>文章 链接到标题 技术 链接到标题 Deploy Kubernetes on Equinix Metal - Kubeadm via Userdata and Cloud-config
[[Equinix]] 通过 [[cloud-init]] 配合 [[kubeadm]] 部署 [[kubernetes]] 集群。
Buf | Introducing buf curl - Call your gRPC endpoints with the simplicity of buf
[[bufbuild]] 的 [[grpc]] 命令行。
Scaling Kubernetes to Thousands of CRDs
[[Crossplane]] 管理上千个 [[CRD]] 遇到的问题和改进方式。（现在好像一个 [[kubernetes]] 集群里面的 CRD 上百也不稀奇。
简洁的 Bash Programming 技巧 - 团子的小窝
[[Bash]] 中 -- 后面的参数不会被当做选项解析。
How Docker 2.0 went from $11M to $135M in 2 years</description></item><item><title>Weekly Issue 2022-12-11</title><link>https://zdyxry.github.io/2022/12/11/Weekly-Issue-2022-12-11/</link><pubDate>Sun, 11 Dec 2022 19:00:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/12/11/Weekly-Issue-2022-12-11/</guid><description>文章 链接到标题 技术 链接到标题 dracut-shutdown: unpack the initramfs to /run/initramfs - Linux Man Pages (8)
[[systemd]] shutdown 与[[dracut-shutdown]] 的调用关系。
我 EKS 内的 Pod 怎么连不上某个 EC2 了？奇怪的 Docker Compose 桥接网络 Debug 记 想到了公司最近内部新添加了网段是 172.16，也跟 [[docker]] 是重叠的。
TSMC founder Morris Chang says globalization &amp;lsquo;almost dead&amp;rsquo; -Nikkei Asia
globalization and free trade are almost dead
From 20MB to 20TB: 40 Years of HDD Technology - StorageNewsletter
[[HDD]] 40 年时间容量从 20MB 到 20TB。</description></item><item><title>Weekly Issue 2022-12-04</title><link>https://zdyxry.github.io/2022/12/04/Weekly-Issue-2022-12-04/</link><pubDate>Sun, 04 Dec 2022 19:00:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/12/04/Weekly-Issue-2022-12-04/</guid><description>文章 链接到标题 技术 链接到标题 聊聊 Docker 的存储驱动 Overlay2 | MoeLove [[overlayfs]] 介绍。
Ask HN: Azure has run out of compute – anyone else affected? | Hacker News [[azure]] 德国无法扩容更多容量，看评论(各家)都已经遇到很多次了。
Linux RT 进程引发内核频繁卡死的优化方案
经过查看内核 RT 实现，发现 RT 进程是有相关的占用时间设置的 /proc/sys/kernel/sched_rt_runtime_us ,sched_rt_runtime_us 的默认值为 950000，代表 RT 进程可以占用 95% 的 CPU 时间片，剩余 5% 用于响应其他请求，而这里比较诡异的是为什么 sched_rt_runtime_us 明明设置了 950000 这个值，surfaceflinger 这个程序为什么还能将 CPU 使用到 100% 呢？
经过代码分析和社区 issues 查找，**发现引发该问题的罪魁祸首是 RT_RUNTIME_SHARE 这个特性，该特性可以使 RT 任务长期占用 100% CPU, 从而使诸如 kworkers 等相关的内核任务无法获取到 CPU 资源，造成内核卡死。**而客户使用的内核版本恰好是 5.</description></item><item><title>Weekly Issue 2022-11-27</title><link>https://zdyxry.github.io/2022/11/27/Weekly-Issue-2022-11-27/</link><pubDate>Sun, 27 Nov 2022 19:00:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/11/27/Weekly-Issue-2022-11-27/</guid><description>文章 链接到标题 技术 链接到标题 搭建旁路由 - Jiajun的编程随想 使用[[Debian]] 配合 [[Clash]] 搭建旁路由。
Will Twitter Fail? [[Twitter]] 会失败么？会因为什么原因失败？感觉在系统不上线新功能的前提下，不会发生宕机。
What a Broken Wheel Taught Google Site Reliability Engineers - The New Stack 一些看似不相关的事情产生的影响，有趣。
quobix: M.A.R.V.I.N [[vmware]] [[VXRail]] 的故事，从零到一。
Risk in the Wild – DevelopSense
Most testing is motivated by the intention to go from speculation about suspected risk to evidence of actual risk.
Rakuten dumps Red Hat, turns to “true” open-source Linux OS, Digital Platforms &amp;amp; Services | TelecomTV 乐天从RHEL 迁移至 Rocky</description></item><item><title>Weekly Issue 2022-11-20</title><link>https://zdyxry.github.io/2022/11/20/Weekly-Issue-2022-11-20/</link><pubDate>Sun, 20 Nov 2022 23:50:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/11/20/Weekly-Issue-2022-11-20/</guid><description>文章 链接到标题 技术 链接到标题 K8S 生态周报| 基础库放弃维护，上游社区如何选择？ | MoeLove
GoGo Protobuf 停止维护(很久)了，很多 [[protobuf]] 的示例项目和生产项目都是使用这个。
Welcome to the Supercloud (and Developer Week 2022)
Efficient compute and storage, a global network that’s everywhere everyone is, bound together by software that turns the globe into a single cloud. The Supercloud.
Scaling Mastodon is Impossible | Armin Ronacher&amp;rsquo;s Thoughts and Writings
从中心化/去中心化，[[Mastodon]] 协议和托管者的法律风险角度，讨论 [[Mastodon]] 替代 [[Twitter]] 的可能性。
Sapling: Source control that’s user-friendly and scalable</description></item><item><title>Weekly Issue 2022-11-13</title><link>https://zdyxry.github.io/2022/11/13/Weekly-Issue-2022-11-13/</link><pubDate>Sun, 13 Nov 2022 23:50:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/11/13/Weekly-Issue-2022-11-13/</guid><description>文章 链接到标题 技术 链接到标题 2022 年里做前端是怎样一种体验 - rxliuli blog
感觉 2016年和2022年之间发生了什么了不得的事情，各种名词给变了一圈了。
Modern Python Environments - dependency and workspace management 对 pyenv ,pip + venv, poetry, pipenv 进行了比较。
Python Tools for Managing Virtual Environments 除了针对 venv，virtualenv介绍之外，还比较了 Pyflow、Poetry、Hatch 等较新的 project management 工具。
Why add another Python manager? pyflow 讲述为什么需要一个 Python 管理器。
The state of Python Packaging
关于 Python 包管理演进的3篇文章。
Python Meetup 第3期 | Python最新语言特征
49分38秒开始，[[PDM]] 作者讲解 PEP582 及 PDM 实现。
Debian 系统上捉摸不定的 Python</description></item><item><title>Weekly Issue 2022-11-06</title><link>https://zdyxry.github.io/2022/11/06/Weekly-Issue-2022-11-06/</link><pubDate>Sun, 06 Nov 2022 23:50:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/11/06/Weekly-Issue-2022-11-06/</guid><description>文章 链接到标题 技术 链接到标题 编写可维护的单元测试代码
介绍 GoConvey 和 testify 两种单测框架。公司内部用 Ginkgo 比较多。
2022 年 10 月 25 日 Cloudflare 服务部分故障
[[CloudFlare]] 故障复盘，在引入 opentracing 时清理了部分 header 信息，导致上游逻辑判断错误。
Give Your Tail a Nudge
[[Nudge]] 对于 [[FCFS]] 的优化：
The intuition behind the Nudge algorithm is that we’d like to basically stick to FCFS, which we know is great for handling the extreme tail (high 𝑡), while at the same time incorporating a little bit of prioritization of small jobs, which we know can be helpful for the mean and lower 𝑡.</description></item><item><title>Weekly Issue 2022-10-30</title><link>https://zdyxry.github.io/2022/10/30/Weekly-Issue-2022-10-30/</link><pubDate>Sun, 30 Oct 2022 23:50:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/10/30/Weekly-Issue-2022-10-30/</guid><description>文章 链接到标题 技术 链接到标题 Python 工匠：语句、表达式和海象操作符
关于复制表达式的使用场景介绍。
如果是一个私人脚本，也许我会愿意把代码写成上面那样。但在多人参与的真实项目里，我目前可能更愿意用一段平平无奇的 for 循环替代它。很多时候，相比“聪明”的代码，“笨”代码才是我们更需要的东西，它们能为项目的参与者省去许多沟通和维护上的成本。 LINUX PID 1 和 SYSTEMD
关于 init 进程的演进。
How Salesforce Built a Cloud-Native Task Execution Service
关于 [[Salesforce]] 的 [[Hyperforce]] 介绍。
深入（彻底）理解闭包实现原理
使用 Golang 来讲解闭包。
生活 链接到标题 A &amp;ldquo;real&amp;rdquo; day in the life of an SRE.
I decide to take a break for breakfast. I am a little annoyed with myself for not having got any &amp;lsquo;real&amp;rsquo; work done before my first break.</description></item><item><title>Weekly Issue 2022-10-23</title><link>https://zdyxry.github.io/2022/10/23/Weekly-Issue-2022-10-23/</link><pubDate>Sun, 23 Oct 2022 23:50:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/10/23/Weekly-Issue-2022-10-23/</guid><description>文章 链接到标题 技术 链接到标题 电信宽带 ipv6 折腾记
运营商配置变化太快。
Be Lean, Go Far: leveraging Kubernetes for an elastic right-sized platform
将业务迁移到 kubernetes 后所做的资源分配调度优化，需要 GKE 背景知识。
You can only improve what you measure
GitHub Copi­lot inves­ti­ga­tion
关于 [[github]] [[copilot]] 调查，除了讨论[[copilot]] 会导致开源协议的错误引入之外，还讨论 [[copilit]] 让用户只关心自己想要的内容(代码)，而不关心背后的社区。
Web 玩具项目技术栈
采用 [[Next.js]] [[Supabase]] [[Fly.io]] 运行个人项目，成本为0 。
关于swap 的一些补充
误解1: swap 是虚拟内存，虚拟内存肯定比物理内存慢嘛 误解2: 但是没有交换区的话，虚拟内存地址都有物理内存对应嘛 误解3： 不是内存快用完的时候才会交换的么？惰性分配有什么好处？那么内核什么时候会开始回收内存？
Why we&amp;rsquo;re leaving the cloud
Basecamp 谈论为什么不使用公有云。AWS 利润率达到 30%。
之前阅读过类似的文章：
Use One Big Server</description></item><item><title>Weekly Issue 2022-10-16</title><link>https://zdyxry.github.io/2022/10/16/Weekly-Issue-2022-10-16/</link><pubDate>Sun, 16 Oct 2022 23:50:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/10/16/Weekly-Issue-2022-10-16/</guid><description>文章 链接到标题 技术 链接到标题 Startup Ideas I&amp;rsquo;ve Considered
无代理可观测性平台、机器学习基础设施、表格系统、安全、VPN、BaaS、版本控制。
为你的 Python 应用选择一个最好的 Docker 映像
如何选择 容器 镜像是一个需要仔细调研权衡的问题，从各方面考虑 alpine 不是一个好选择。
Infrastructure Defined Software
Puppet 2009, Salt 2011, Ansible 2012 CloudFormation 2011, Terraform 2014 Pulumi 2017, AWS CDK 2019 下一步是什么？ 白话Kubernetes入门实践
k8e 作者关于 kubernetes 的一系列文章，持续更新中。
Why Linkerd doesn&amp;rsquo;t use Envoy
将 Cloudflare 连接到互联网的代理——Pingora 的构建方式
为什么 Linkerd 不使用 envoy. - 复杂度、资源消耗、安全。 - But what if we have a requirement to use Envoy? I would argue that’s not a real requirement.</description></item><item><title>Weekly Issue 2022-09-25</title><link>https://zdyxry.github.io/2022/09/25/Weekly-Issue-2022-09-25/</link><pubDate>Sun, 25 Sep 2022 23:50:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/09/25/Weekly-Issue-2022-09-25/</guid><description>文章 链接到标题 技术 链接到标题 How I’m a Productive Programmer With a Memory of a Fruit Fly
通过 [[doc2dash]] 来制作 [[Dash]] 文档。
用 CFSSL 从零构建一套 PKI
使用 [[cfssl]] 代替 [[openssl]] 管理证书。
SUB-NUMA CLUSTERING
介绍 Sub-NUMA-Clustering ，目前来看除非是性能特别敏感的场景，其他场景没什么用。服务器如果启用了一些[[虚拟化]]的高级选项，可能会导致 Sub-NUMA-CLustering 开启，从而导致节点的 [[NUMA]] 数量超过预期。
Going originless with Cloudflare Workers – Building a Todo app – Part 1: The API
使用 [[CloudFlare]] 全家桶： Workers，D1 来构建一个 Todo APP。
Systemd support is now available in WSL!
[[WSL]] 支持 systemd，是时候再给 [[WSL]] 一次机会了。</description></item><item><title>Weekly Issue 2022-09-18</title><link>https://zdyxry.github.io/2022/09/18/Weekly-Issue-2022-09-18/</link><pubDate>Sun, 18 Sep 2022 23:50:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/09/18/Weekly-Issue-2022-09-18/</guid><description>文章 链接到标题 技术 链接到标题 Kubernetes overstretched
这几年抱怨 k8s 的也不少. 一方面是 k8s 越来越成为事实上的标准(借“Cloud Native”之风), 在各大中小厂落地. 很多人被潮流裹挟不得不用, 心里未必愿意. 场景未必适合, 加上心不甘情不愿, 遇到麻烦就容易不满. 另一方面, 为了进一步提升适用范围和可定制性, k8s 开放出了越来越复杂的插件机制: custom apiserver, scheduler-extender, volume provisioner, federation, edge proxy, knative, etc.. 最初方便扩展的开放性, 反而带来了越来越高的复杂度. 在我看来, 在90%的场景下, 大部分开发者其实用不着, 也最好别碰这些东西; 剩下10%的特殊需求, 最好交给专门的云厂商做. 但不贴上高级词汇, 怎么向公司体现自身价值呢? 于是也跟在后面亦步亦趋, 做出不伦不类的东西, 结果越改越难用.如果要上升一下, 就是工具有自己的舒适区. 工具原来是为哪种场景设计的, 就最适合在相应的场景下使用. 突破界限做成一个普适的东西, 多半会增加痛苦. 然而古往今来能被滥用的技术, 就没有不被滥用的. 可扩展性越高越会被滥用, 就像性能越高越会被用户往死里捅一样. No good deed goes unpunished, as always.
Traditional Packaging is not Suitable for Modern Applications</description></item><item><title>Weekly Issue 2022-09-11</title><link>https://zdyxry.github.io/2022/09/11/Weekly-Issue-2022-09-11/</link><pubDate>Sun, 11 Sep 2022 23:50:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/09/11/Weekly-Issue-2022-09-11/</guid><description>文章 链接到标题 技术 链接到标题 容器技术之发展简史
容器技术以及公有云容器功能支持历史。
如何编写低耦合可维护的 Python 代码
通过观察者模式和装饰器模式来编写可维护代码。
CPU 是如何与内存交互的?
How to send raw network packets in Python with tun/tap
如何使用 [[Python]] 发送读取 [[TUN]] 设备数据。
What&amp;rsquo;s Inside Of a Distroless Container Image: Taking a Deeper Look
如何选择基础 [[Container]] [[image]] 一直是一个比较重要的考虑，比如很多人不推荐的 [[alpine]]，小而美，但是 [[musl]] 不那么美。很多人推荐使用标准发行版，但是又觉得大小太大不利于分发。 [[Distroless]] 是一个可以看到的方向，但是我个人在不能完全确定自己的项目中是否依赖了某些隐式的内容时，应该还是会使用标准发行版，比如[[Debian]] 或者 [[Fedora]]。
In Pursuit of Better Container Images: Alpine, Distroless, Apko, Chisel, DockerSlim, oh my!
博主在 [[Twitter]] 上发起了一些关于 [[Container]] [[image]] 的投票，一些人表面关注 CVE，实际上还是更关注镜像大小。 [[alpine]] 是目前大多数项目的选择，但是已经出现了一些替代品。</description></item><item><title>Weekly Issue 2022-09-04</title><link>https://zdyxry.github.io/2022/09/04/Weekly-Issue-2022-09-04/</link><pubDate>Sun, 04 Sep 2022 10:50:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/09/04/Weekly-Issue-2022-09-04/</guid><description>文章 链接到标题 技术 链接到标题 什么时候你第一次读懂了「云技术」？
通过具体的工业场景解释什么是云。
wifi有关的一些问题
关于 Wifi 概念以及计算方式的讲解。
可扩展服务设计原则 checklist
开发应用的基本设计原则，包含基本原则、整体设计、自动化管理、依赖管理、发布周期、测试、审计、监控告警
有赞TCP网络编程最佳实践
在net.ipv4.tcp_retries2默认配置下，可能还是一直等到15min左右才能感知到网络异常。
Introducing vSphere 8!
问：当你安装了 vSphere 8，你实际安装了多少个 ESXi 和多少个虚拟机？
Kubernetes 1.25: cgroup v2 graduates to GA
[[kubernetes]] 正式支持 [[cgroup]] v2 。kubelet 和 container runtime 使用 systemd 来做 cgroup 管理。
cgroup v2 offers several improvements over cgroup v1, such as the following:
Single unified hierarchy design in API Safer sub-tree delegation to containers Newer features like Pressure Stall Information Enhanced resource allocation management and isolation across multiple resources Unified accounting for different types of memory allocations (network and kernel memory, etc) Accounting for non-immediate resource changes such as page cache write backs Linux IO</description></item><item><title>Weekly Issue 2022-08-28</title><link>https://zdyxry.github.io/2022/08/28/Weekly-Issue-2022-08-28/</link><pubDate>Sun, 28 Aug 2022 10:00:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/08/28/Weekly-Issue-2022-08-28/</guid><description>文章 链接到标题 技术 链接到标题 Steam Deck, Linux Container and the Arch Community
关于 [[Steam Deck]] OS 的介绍，底层是 [[Arch]] Linux，采用的是 A/B 升级方式，应用采用 [[Flatpak]] 方式进行安装升级(保证安全性)。现在关于这种 OS 比较轻，应用采用容器化的模式应该是很成熟了。
Global Code Time Report
编码时间报告。平均每天编码时间少于 1 小时，周三是编码时间最多的，很少有开发人员每天编码时间超过 2 小时。
(A few) Ops Lessons We All Learn The Hard Way
一些“经验”教训。比如：在某个你没有在意过的服务，会解析 DNS来完成某项工作。关掉 TCP 53 可能会有奇怪的事情发生。正在查看的源代码不是在生产中运行的代码。如果一周内没有完成故障复盘，那有可能永远也无法完成。没有人知道你在做什么。
Slacker: Fast Distribution with Lazy Docker Containers
76%的时间花费在镜像的拉取。容器真正运行需要的有效数据只占用镜像大小的 6%。
镜像大小中，低层级(&amp;lt;9)的数据占到了镜像大小的一半以上。
Kubernetes 中 Descheduler 组件的使用与扩展
Descheduler 通过触发 Pod 的驱逐，来保证集群内资源分布均衡，达到 DRS效果。作者提出了 Descheduler 改进后的评估方式。</description></item><item><title>Weekly Issue 2022-08-21</title><link>https://zdyxry.github.io/2022/08/21/Weekly-Issue-2022-08-21/</link><pubDate>Sun, 21 Aug 2022 23:00:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/08/21/Weekly-Issue-2022-08-21/</guid><description>文章 链接到标题 技术 链接到标题 与 CentOS 社区委员对话后 CentOS 时代
[[centos]] stream 之前的阶段，用户很难参与到 [[RHEL]] 的研发阶段，无法直接通过 [[centos]] 贡献代码，来保证下一个版本的 [[centos]] 包含自己所发现的问题修复，只能通过贡献给组件自身，然后由 RedHat 开发人员决定是否包含在下一个版本中。在 [[centos stream]] 之后的阶段，用户可以直接贡献给 [[centos]]，保证 [[centos]] 包含问题修复，至于 [[RHEL]] 是否修复，由 RedHat 自身决定。
关于 Fedora、Stream，还有 RHEL 未来的发展计划是什么？
从社会组织的维度： Fedora：主题是如何提高对 Fedora 的贡献，如何使得社区更多样化； CentOS Stream：和 Fedora 差不多，提高社区贡献和使社区更多样化，另外就是发展 SIG（特殊兴趣小组），充分发挥 SIG 的作用； RHEL：进一步繁荣包括社区、合作伙伴、客户的 RHEL 生态 从代码的维度： Fedora： 集成上游社区最新最好的代码，功能最丰富，做业界的引领者； 面向特定的场景，做特色的发行版，如 Fedora IoT 就是面向物联网场景的 Fedora 操作系统。 CentOS Stream： RHEL 稳定可靠的持续交付版，用户可以提前看到即将发布的 RHEL 版本； 基于稳定的代码基础，通过社区发展 SIG，在特定领域创新。 RHEL： 我们面向客户的销售团队有很多关于产品的介绍，但我今天不是来为产品做广告的。我相信红帽大中华区的同事们可以给您很好的支持。 面试题：开发新功能和重构老代码之间怎么选？
对于所有商业公司来说，第一原理永远是商业，不是产品也不是技术。</description></item><item><title>Weekly Issue 2022-08-14</title><link>https://zdyxry.github.io/2022/08/14/Weekly-Issue-2022-08-14/</link><pubDate>Sun, 14 Aug 2022 13:00:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/08/14/Weekly-Issue-2022-08-14/</guid><description>文章 链接到标题 技术 链接到标题 2022-31: Databend 的工程效率实践
[[Databend]] 效率工程介绍，使用 SaaS 来完成大部分工作，Self Host Github Runner 尽量使用 [[AWS]] 内部服务，来减免流量费用。
效率工程体会：
摆正定位 渐进变更 公开透明 Improving the Experience of Making Envoy Route Changes
[[Lyft]] 针对 [[envoy]] 配置方式进行的改进，原有存在的问题：
原有路由配置使用[[Jinja]] 模版进行维护，无法进行很好的语法检查和验证，现已替换为 [[Golang]]
原有 [[envoy]] API 在配置平面和控制平面都被引用，当 [[envoy]] 升级时，都需要考虑兼容性问题，现在只在控制平面引用
原有Route table check tool 无法进行很好的分发（为啥一个 binary 会不好分发呢？），改为内部检查工具，并添加了 CI 检测结果。
容器 CPU 和 Memory 限制行为简述
关于 CPU 和 Memory cgroup 基本配置参数介绍。
Avoiding CPU Throttling in a Containerized Environment</description></item><item><title>Weekly Issue 2022-08-07</title><link>https://zdyxry.github.io/2022/08/07/Weekly-Issue-2022-08-07/</link><pubDate>Sun, 07 Aug 2022 23:59:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/08/07/Weekly-Issue-2022-08-07/</guid><description>文章 链接到标题 技术 链接到标题 2022-30: 如何维护一个开源项目
明确自己的项目预期，后续的发展路线以及如何与开发者沟通。
How Our Bare Metal Cloud Keeps up with All the New OS Releases
[[Equinix]] 如何进行发行版的快速验证工作的介绍。之前一直是手动测试验证(无法想象)，现在通过 [[BuildKite]] ，通过 DSL 来描述 OS 内容，使用 [[virt-customize]] 来进行配置改动，改动完整后，推送到 S3，进行自动化测试，最终推送给客户。
采用 [[Buildkite]] 的原因：
支持动态 pipeline，可以进行条件判断 允许 pipeline 进行交互输入 可以自定义运行形态(环境) 不同架构可以共用一套 Pipeline [[BuildKite]] 学习成本不低。
程序 Hot reload config 的实现方式
监听文件(我自己比较常用的方式) 每次都reload 监听HUP 信号 10 Kubernetes Security Context settings you should understand
关于 [[kubernetes]] 安全配置的一些方法(感觉大部分人都用不上)
The people of the cloud</description></item><item><title>Weekly Issue 2022-07-31</title><link>https://zdyxry.github.io/2022/07/31/Weekly-Issue-2022-07-31/</link><pubDate>Sun, 31 Jul 2022 23:59:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/07/31/Weekly-Issue-2022-07-31/</guid><description>文章 链接到标题 技术 链接到标题 一些 System Design 面试的建议
明确需求；定义系统接口和业务 Entity；画一个架构图；讨论具体细节。
A Checklist Manifetsy
维护自己的检查清单可以对所做内容更有掌控感。
Alerts, what are they good for?
如何设置报警规则？在我司通常是依靠经验拍脑袋。作者提出了一个可以量化的规则来 评估规则：
影响：越严重则数值越大
频率：发生频率越高，则数值越大
可恢复性：如果涉及到的问题所需要手动工作量越大，则数值越大
最终计算方式为(i+f)*r ，作者给出了数值建议：
1–19 ignore
20–49 alert
50–79 evaluate the event. is it rated properly and if yes, what improvements can be made if any. The below example of US East 1 going down is a worse case scenario that relies on DR however, with good monitoring, can be detected and actioned</description></item><item><title>Weekly Issue 2022-07-24</title><link>https://zdyxry.github.io/2022/07/24/Weekly-Issue-2022-07-24/</link><pubDate>Sun, 24 Jul 2022 18:55:00 +0000</pubDate><guid>https://zdyxry.github.io/2022/07/24/Weekly-Issue-2022-07-24/</guid><description>文章 链接到标题 技术 链接到标题 如何劫持 docker.io 的镜像流量到私有仓库
通过修改Client 受信证书将 docker.io 流量转发到内部其他 registry。
问题：所有 Client 都需要进行证书配置。如果证书这环节出了问题，会引发较大安全问题。
周刊（第22期）：图解一致性模型
通过发布朋友圈作为示例来描述：顺序一致性、线性一致性、因果一致性。
顺序一致性条件：
条件1：每个进程的执行顺序要和该进程的程序执行顺序保持一致。
条件2：对变量的读写要表现得像FIFO一样先入先出，即每次读到的都是最近写入的数据。
线性一致性条件，在顺序一致性的基础上，增加：
条件3：不同进程的事件，如果在时间上不重叠，即不是并发事件，那么要求这个先后顺序在重排之后保持一致。
因果一致性是更弱的一致性，只要满足happen-before关系即可。由于happen-before关系实际上是由Lamport时钟定义的，这是一种逻辑时钟，所以不同的读者看到的先后顺序可能会有点反直觉，但是只要满足happen-before关系就是正确的。
工程效能CI/CD之流水线引擎的建设实践
美团内部 CI/CD 发展过程。在 jenkins 阶段遇到了调度瓶颈、资源管理瓶颈，Jenkins 多集群方式管理困难，转为自研。
spf13 Google &amp;ndash;&amp;gt;
spf13 从 [[Google]] 离职加入了Two Sigma
When I first joined there was so much to learn about both Go and working within Google. My learning had slowed down dramatically. I was torn. I loved the team and the work we were doing, but was feeling personally stagnant.</description></item><item><title>Weekly Issue 2022-07-17</title><link>https://zdyxry.github.io/2022/07/18/Weekly-Issue-2022-07-17/</link><pubDate>Mon, 18 Jul 2022 22:03:36 +0000</pubDate><guid>https://zdyxry.github.io/2022/07/18/Weekly-Issue-2022-07-17/</guid><description>文章 链接到标题 Side Project 成本最小化运维
现成的 SaaS &amp;gt; 基于库实现 &amp;gt; 自己从软件方面实现 &amp;gt; 使用新的开源项目额外部署系统来实现。现在的各个 SaaS 已经非常成熟了，大部分场景都可以涵盖到，不建议把时间花费在运维维护工作上。
Setting the Number of Cores per CPU in a Virtual Machine
关于 [[vmware]] ESXi 虚拟机 CPU 配置说明
When you define the number of logical processors (vCPUs) for a VM, prefer the cores-per-socket configuration. Continue until the count exceeds the number of CPU cores on a single NUMA node on the ESXi server. Use the same logic until you exceed the amount of memory that is available on a single NUMA node of your physical ESXi server.</description></item></channel></rss>