<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yiran</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zdyxry.com/"/>
  <updated>2019-03-09T13:49:04.349Z</updated>
  <id>http://zdyxry.com/</id>
  
  <author>
    <name>yiran</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 生成器使用</title>
    <link href="http://zdyxry.com/2019/03/09/Python-%E7%94%9F%E6%88%90%E5%99%A8%E4%BD%BF%E7%94%A8/"/>
    <id>http://zdyxry.com/2019/03/09/Python-生成器使用/</id>
    <published>2019-03-09T13:47:35.000Z</published>
    <updated>2019-03-09T13:49:04.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在清理 Pocket 列表的时候，发现自己很早之前收藏过 dabeaz 在 2008 年 PyCon 关于生成器的 PPT 讲解，今天读完，有所收获。</p><p>在 PPT 中， dabeaz 通过一个具体的文件处理的例子，一步一步的讲解了程序的演进，具体代码可以在 <a href="https://github.com/dabeaz/generators" target="_blank" rel="external">Github</a> 查看。</p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>使用 yield 关键字的函数就是生成器。生成器在运行时生成值，所以只能迭代一次。生成器可以通过 next 关键字执行，通常我们通过 for 循环来迭代生成器，可以自动处理 StopIteration 情况。</p><p>一个简单的生成器例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></div><div class="line">   <span class="keyword">while</span> n &gt; <span class="number">0</span>:</div><div class="line">       <span class="keyword">yield</span> n</div><div class="line">       n -= <span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> countdown(<span class="number">5</span>):</div><div class="line"><span class="meta">... </span>    print(i, end=<span class="string">' '</span>)</div><div class="line">...</div><div class="line"><span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></div></pre></td></tr></table></figure></p><p>当我们调用生成器时，仅返回一个生成器对象，不会执行函数内容，只有当执行 <code>__next__()</code> 时函数才会真正执行。yield 会返回给调用者当前值，同时暂停执行，等待下一次调用 <code>__next__()</code> 继续执行。</p><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>在 python 中通过生成器的方式来实现协程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">7</span>]: <span class="function"><span class="keyword">def</span> <span class="title">recv_count</span><span class="params">()</span>:</span></div><div class="line">   ...:     <span class="keyword">try</span>:</div><div class="line">   ...:         <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">   ...:             n = <span class="keyword">yield</span></div><div class="line">   ...:             print(<span class="string">"T-minus"</span>, n)</div><div class="line">   ...:     <span class="keyword">except</span> GeneratorExit:</div><div class="line">   ...:         print(<span class="string">"boom"</span>)</div><div class="line">   ...:</div><div class="line">In [<span class="number">8</span>]: r = recv_count()</div><div class="line">In [<span class="number">9</span>]: r.send(<span class="keyword">None</span>) <span class="comment"># init</span></div><div class="line">In [<span class="number">10</span>]: r.next() <span class="comment"># yield 未接收到调用者发送具体值</span></div><div class="line">(<span class="string">'T-minus'</span>, <span class="keyword">None</span>)</div><div class="line">In [<span class="number">13</span>]: r.send(<span class="number">1</span>) </div><div class="line">(<span class="string">'T-minus'</span>, <span class="number">1</span>)</div><div class="line">In [<span class="number">14</span>]: r.send(<span class="number">2</span>)</div><div class="line">(<span class="string">'T-minus'</span>, <span class="number">2</span>)</div><div class="line">In [<span class="number">15</span>]: r.send(<span class="number">3</span>)</div><div class="line">(<span class="string">'T-minus'</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure><p>关于为什么要执行 <code>r.send(None)</code> ，可以看 <a href="https://www.python.org/dev/peps/pep-0342/" target="_blank" rel="external">PEP-342</a> 中具体解释：</p><blockquote><p>Because generator-iterators begin execution at the top of the generator’s function body, there is no yield expression to receive a value when the generator has just been created. Therefore, calling send() with a non-None argument is prohibited when the generator iterator has just started, and a TypeError is raised if this occurs (presumably due to a logic error of some kind). Thus, before you can communicate with a coroutine you must first call next() or send(None) to advance its execution to the first yield expression.</p></blockquote><p>在此基础上进行扩展，我们写一个生产消费者模型:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">root@yiran<span class="number">-30</span><span class="number">-250</span>:/tmp</div><div class="line"> $ cat a.py</div><div class="line"><span class="comment">#!/usr/bin/python3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">()</span>:</span></div><div class="line">    r = <span class="string">''</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        n = <span class="keyword">yield</span> r</div><div class="line">        print(<span class="string">'Consuming %s ...'</span> % n)</div><div class="line">        r = <span class="string">'200 OK'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(c)</span>:</span></div><div class="line">    c.send(<span class="keyword">None</span>)</div><div class="line">    n = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</div><div class="line">        n += <span class="number">1</span></div><div class="line">        print(<span class="string">"Producing %s ..."</span> % n)</div><div class="line">        r = c.send(n)</div><div class="line">        print(<span class="string">"Consumer return: %s"</span> % r)</div><div class="line">    c.close()</div><div class="line">c = consumer()</div><div class="line">producer(c)</div><div class="line"></div><div class="line">root@yiran<span class="number">-30</span><span class="number">-250</span>:/tmp</div><div class="line"> $ python3 a.py</div><div class="line">Producing <span class="number">1</span> ...</div><div class="line">Consuming <span class="number">1</span> ...</div><div class="line">Consumer <span class="keyword">return</span>: <span class="number">200</span> OK</div><div class="line">Producing <span class="number">2</span> ...</div><div class="line">Consuming <span class="number">2</span> ...</div><div class="line">Consumer <span class="keyword">return</span>: <span class="number">200</span> OK</div><div class="line">Producing <span class="number">3</span> ...</div><div class="line">Consuming <span class="number">3</span> ...</div><div class="line">Consumer <span class="keyword">return</span>: <span class="number">200</span> OK</div><div class="line">Producing <span class="number">4</span> ...</div><div class="line">Consuming <span class="number">4</span> ...</div><div class="line">Consumer <span class="keyword">return</span>: <span class="number">200</span> OK</div><div class="line">Producing <span class="number">5</span> ...</div><div class="line">Consuming <span class="number">5</span> ...</div><div class="line">Consumer <span class="keyword">return</span>: <span class="number">200</span> OK</div></pre></td></tr></table></figure><p>在 Python3.3 之后，添加了 <code>yield from</code>, <code>asyncio</code> 等关键字，在之后的博客中单独记录。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://www.dabeaz.com/generators/Generators.pdf" target="_blank" rel="external">http://www.dabeaz.com/generators/Generators.pdf</a></li><li><a href="https://www.tornadoweb.org/en/stable/guide/coroutines.html" target="_blank" rel="external">https://www.tornadoweb.org/en/stable/guide/coroutines.html</a></li><li><a href="https://www.zhihu.com/question/28105502" target="_blank" rel="external">https://www.zhihu.com/question/28105502</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在清理 Pocket 列表的时候，发现自己很早之前收藏过 dabeaz 在 2008 年 PyCon 关于生成器的 PPT 讲解，今天读完，
      
    
    </summary>
    
    
      <category term="Python" scheme="http://zdyxry.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Libvirt CPU 配置</title>
    <link href="http://zdyxry.com/2019/03/02/Libvirt-CPU-%E9%85%8D%E7%BD%AE/"/>
    <id>http://zdyxry.com/2019/03/02/Libvirt-CPU-配置/</id>
    <published>2019-03-02T11:40:20.000Z</published>
    <updated>2019-03-02T11:46:33.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Libvirt-CPU-配置参数"><a href="#Libvirt-CPU-配置参数" class="headerlink" title="Libvirt CPU 配置参数"></a>Libvirt CPU 配置参数</h2><p>我们先来看下 Libvirt 关于虚拟机 CPU 配置项：</p><ul><li>match</li><li>check</li><li>mode</li><li>model</li><li>…</li></ul><p>具体配置解释可以去 Libvirt 官方文档中查看，这里主要说一下 <code>mode</code> 参数，看一下 <code>mode</code> 具体含义及可选配置：</p><h3 id="host-passthrough"><a href="#host-passthrough" class="headerlink" title="host-passthrough"></a>host-passthrough</h3><p>Libvirt 通知 KVM 对 CPU 不做任何配置项修改，直通给虚拟机。因为虚拟机可以使用与物理主机相同 CPU 指令集，性能最好，相反，在虚拟机热迁移过程中，对目标主机 CPU 要求同型号同代。</p><h3 id="host-model"><a href="#host-model" class="headerlink" title="host-model"></a>host-model</h3><p>本质上是根据物理主机 CPU 从 <code>cpu_map.xml</code> 文件中选择最匹配的 CPU 型号。由于CPU定义是在启动虚拟机之前复制的，因此可以在不同主机上使用完全相同的XML，同时仍然提供每个主机支持的最佳虚拟机 CPU。属于在功能与性能之间的平衡。</p><h3 id="custom"><a href="#custom" class="headerlink" title="custom"></a>custom</h3><p>不指定 <code>mode</code> 属性时的默认值。此模式使得无论虚拟机启动哪个主机，虚拟机都将看到相同的硬件，兼容性最好。</p><h2 id="最佳选择"><a href="#最佳选择" class="headerlink" title="最佳选择"></a>最佳选择</h2><p>在不考虑虚拟机兼容性（热迁移）情况下，优先选择 <code>host-passthrough</code> ，综合考虑选择 <code>host-model</code> 。  </p><p>OpenStack 中如果检测到 hypervisor 是 kvm-qemu ，则默认值为 <code>host-model</code> ；在 hypervisor 是其他类型时，默认值为 <code>none</code>，即由 hypervisor 自己选择。</p><p>我查看了自己两台 VPS 的 CPU 信息，如下：</p><h3 id="Vultr"><a href="#Vultr" class="headerlink" title="Vultr"></a>Vultr</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@vultr ~]<span class="comment"># lscpu</span></div><div class="line">Architecture:          x86_64</div><div class="line">厂商 ID：           GenuineIntel</div><div class="line">CPU 系列：          6</div><div class="line">型号：              60</div><div class="line">型号名称：        Virtual CPU 71438xxxxxxx</div><div class="line">超管理器厂商：  KVM</div><div class="line">虚拟化类型：     完全</div><div class="line">Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 syscall nx rdtscp lm constant_tsc rep_good nopl xtopology cpuid tsc_known_freq pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm invpcid_single pti fsgsbase bmi1 avx2 smep bmi2 erms invpcid xsaveopt arat</div></pre></td></tr></table></figure><h3 id="BWH"><a href="#BWH" class="headerlink" title="BWH"></a>BWH</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@bwh ~]<span class="comment"># lscpu</span></div><div class="line">Architecture:          x86_64</div><div class="line">厂商 ID：           GenuineIntel</div><div class="line">CPU 系列：          6</div><div class="line">型号：              13</div><div class="line">型号名称：        QEMU Virtual CPU version (cpu64-rhel6)</div><div class="line">超管理器厂商：  KVM</div><div class="line">虚拟化类型：     完全</div><div class="line">Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pse36 clflush mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm rep_good nopl pni pclmulqdq ssse3 cx16 pcid sse4_1 sse4_2 x2apic popcnt aes xsave avx f16c rdrand hypervisor lahf_lm fsgsbase smep xsaveopt</div></pre></td></tr></table></figure><p>可以看到 BWH 的 CPU 比 Vultr CPU 指令集少了很多，而且 CPU 型号是 <code>QEMU Virtual CPU version (cpu64-rhel6)</code> 推断物理机 libvirt 配置是 <code>custom</code> ，果然便宜无好货。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://docs.openstack.org/juno/config-reference/content/kvm.html" target="_blank" rel="external">https://docs.openstack.org/juno/config-reference/content/kvm.html</a></li><li><a href="https://wiki.openstack.org/wiki/LibvirtXMLCPUModel" target="_blank" rel="external">https://wiki.openstack.org/wiki/LibvirtXMLCPUModel</a></li><li><a href="https://patchwork.kernel.org/patch/9219601/" target="_blank" rel="external">https://patchwork.kernel.org/patch/9219601/</a></li><li><a href="https://lists.gnu.org/archive/html/qemu-devel/2016-06/msg00634.html" target="_blank" rel="external">https://lists.gnu.org/archive/html/qemu-devel/2016-06/msg00634.html</a></li><li><a href="http://wsfdl.com/openstack/2018/01/02/libvirt_cpu_mode.html" target="_blank" rel="external">http://wsfdl.com/openstack/2018/01/02/libvirt_cpu_mode.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Libvirt-CPU-配置参数&quot;&gt;&lt;a href=&quot;#Libvirt-CPU-配置参数&quot; class=&quot;headerlink&quot; title=&quot;Libvirt CPU 配置参数&quot;&gt;&lt;/a&gt;Libvirt CPU 配置参数&lt;/h2&gt;&lt;p&gt;我们先来看下 Libvirt
      
    
    </summary>
    
    
      <category term="Libvirt" scheme="http://zdyxry.com/tags/Libvirt/"/>
    
  </entry>
  
  <entry>
    <title>学会拒绝</title>
    <link href="http://zdyxry.com/2019/02/05/%E5%AD%A6%E4%BC%9A%E6%8B%92%E7%BB%9D/"/>
    <id>http://zdyxry.com/2019/02/05/学会拒绝/</id>
    <published>2019-02-05T01:33:18.000Z</published>
    <updated>2019-02-05T01:34:07.246Z</updated>
    
    <content type="html"><![CDATA[<p>趁着春节 7 天假期，把 18年所有的年假都请了下来，计划在家里待 20多天，这次假期最大的感受就是父母不懂得拒绝，或者说他们不想拒绝。</p><p>我小时候也是这样，可能是因为父母的关系，我一直处于一个周围同学中的“好人”状态，有事情要找人帮忙，一般都会找到我这来，因为我不拒绝。这也给我自身造成了一种假象：“我跟周围的关系不错”。那么我不拒绝的原因是什么呢？ </p><p>最早可能是我不会拒绝，觉得拒绝会让对方难堪；之后可能是我觉得这段关系是我所看重的，所以我为了维持关系不拒绝，但是根本原因还是第一条；最终可能是我懒。（？</p><p>不拒绝，不想拒绝或者说不懂得拒绝，给我造成了很多的困扰，很被动。我这个人是一个喜欢计划的人，无论是生活还是工作，我都希望能够按照我的计划进行（当然如果出现计划外的事情往往我会比较懊恼。但是又因为我不拒绝，导致我的计划经常被中断，甚至是有些时效性的事情，就被彻底的终止了。可能这件事情对我比较重要，但是因为不拒绝，导致事情没完成。</p><p>那么我是从什么开始学会拒绝的呢？准确的说是同事教我的（虽然现在这位同事经常被我拒绝 - - 。在 2017年，我负责的工作准确的说是一半在公司内部，另一半在与公司外部的合作上。公司外部的工作优先级比较高，当我在做公司内部工作的时候，经常性的被打断，去处理优先级比较高的工作，造成我的整体工作效率不高，甚至说很低，哪怕我已经尽可能的考虑到部分原因，但是计划永远赶不上变化，我们要针对不同的事情去拒绝，比如当我正在处理公司外部的工作 A，我的老板让我立即做公司内部工作 B，自我评估优先级之后，我们决定是否接受 B，而不是因为那是我的老板，我就毫不犹豫的接受，因为当时接受的结果很有可能会造成 A &amp; B 都做不好。</p><p>亲戚、朋友甚至是恋人关系也是一样，这种与工作关系不同，在让你帮忙时，他们往往会带上“情感”上的束缚，会利用“情感”关系去控制你，仿佛你不做这段关系就到此为止一样，这种是最可怕的，要学会拒绝，避免深陷。</p><p>当然我现在的拒绝可能比较生硬，导致不愉快，但是终究对我来说是个好事，期望后续能够通过阅读《情感勒索》这部书来改善。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;趁着春节 7 天假期，把 18年所有的年假都请了下来，计划在家里待 20多天，这次假期最大的感受就是父母不懂得拒绝，或者说他们不想拒绝。&lt;/p&gt;
&lt;p&gt;我小时候也是这样，可能是因为父母的关系，我一直处于一个周围同学中的“好人”状态，有事情要找人帮忙，一般都会找到我这来，因为
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>聊一聊 ISO 9660</title>
    <link href="http://zdyxry.com/2019/01/12/%E8%81%8A%E4%B8%80%E8%81%8A-ISO-9660/"/>
    <id>http://zdyxry.com/2019/01/12/聊一聊-ISO-9660/</id>
    <published>2019-01-12T14:06:45.000Z</published>
    <updated>2019-01-12T15:46:39.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ISO-9660"><a href="#ISO-9660" class="headerlink" title="ISO 9660"></a>ISO 9660</h2><blockquote><p>ISO 9660，也被一些硬件和软件供应商称作CDFS（光盘文件系统），是一个由国际标准化组织（ISO）为光盘介质发布的文件系统。其目标是能够在不同的操作系统如Windows、Mac OS以及类Unix系统上交换数据。</p></blockquote><p>我们平时接触到的 ISO 格式文件均为 ISO 9660，我们可以通过 <code>file</code> 命令进行查看，以 RedHat 发行版为例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@node redhat]<span class="comment"># file rhel-server-7.6-x86_64-dvd.iso </span></div><div class="line">rhel-server-7.6-x86_64-dvd.iso: ISO 9660 CD-ROM filesystem data <span class="string">'RHEL-7.6 Server.x86_64         '</span> (bootable)</div></pre></td></tr></table></figure></p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><ol><li>安装操作系统，我们可以通过将 ISO 挂载到物理服务器/PC 上，从 ISO 启动进行操作系统的安装；</li><li>作为软件安装源，比如红帽系列的版本，在 ISO 中，通常会有 <code>Packages</code> 路径，下面包含了当前版本完整的软件源，我们可以通过本地挂载的方式使用；</li><li>作为软件发行方式，常见的有 VMware vmtools, KVM Virtio 等统一打包方式；</li><li>…</li></ol><h3 id="制作方式"><a href="#制作方式" class="headerlink" title="制作方式"></a>制作方式</h3><ol><li>genisoimage</li><li>mkisofs</li></ol><p>第一种方式不常用，主要使用第二种方式进行使用，之前的文章中提到过 LiveCD 制作方式也是通过 <code>mkisofs</code> 命令继续构建的。</p><p>这里我们可以参考 VMware 官方文档了解如何定制自己的 ISO。</p><blockquote><p>说一下何时需要定制我们自己的 ISO。当我们获取到各个发行版本的 ISO 后，我们可以正常使用进行安装，但是都是交互式安装，需要我们通过图形化界面/命令行交互的方式进行配置确认及参数设置。如果我们想要 ISO 支持静默安装，那么就需要我们自己定制属于自己的 KickStart 脚本，然后放置到 ISO 中并设置为默认执行项。<br>此场景对于 *nix 系统均适用。</p></blockquote><p>当前路径结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">test</span>/</div><div class="line">├── a.b00</div><div class="line">├── ata_liba.v00</div><div class="line">|...</div><div class="line">├── char_ran.v00</div><div class="line">├── efi</div><div class="line">│   └── boot</div><div class="line">│       ├── boot.cfg</div><div class="line">│       ├── bootia32.efi</div><div class="line">│       └── bootx64.efi</div><div class="line">├── efiboot.img</div><div class="line">├── hid_hid.v00</div><div class="line">|...</div></pre></td></tr></table></figure><p>执行 mkisofs 命令，指定 ISO 源文件路径，指定目标 ISO 名称，即可构建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">[root@installer mnt]<span class="comment"># mkisofs -relaxed-filenames -J -R -o custom_esxi.iso -b isolinux.bin -c boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table  test/</span></div><div class="line">Warning: creating filesystem that does not conform to ISO-9660.</div><div class="line">I: -input-charset not specified, using utf-8 (detected <span class="keyword">in</span> locale settings)</div><div class="line">Size of boot image is 4 sectors -&gt; No emulation</div><div class="line">  2.89% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line">  5.78% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line">  8.66% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 11.55% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 14.44% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 17.33% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 20.21% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 23.10% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 25.98% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 28.88% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 31.76% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 34.65% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 37.53% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 40.42% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 43.31% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 46.20% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 49.08% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 51.97% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 54.85% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 57.74% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 60.63% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 63.52% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 66.40% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 69.29% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 72.17% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 75.06% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 77.95% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 80.84% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 83.72% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 86.61% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 89.49% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 92.39% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 95.27% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line"> 98.16% <span class="keyword">done</span>, estimate finish Sat Jan 12 21:56:27 2019</div><div class="line">Total translation table size: 2048</div><div class="line">Total rockridge attributes bytes: 14593</div><div class="line">Total directory bytes: 6144</div><div class="line">Path table size(bytes): 50</div><div class="line">Max brk space used 25000</div><div class="line">173203 extents written (338 MB)</div></pre></td></tr></table></figure><p>使用 <code>file</code> 命令查看构建结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@installer mnt]<span class="comment"># file custom_esxi.iso </span></div><div class="line">custom_esxi.iso: <span class="comment"># ISO 9660 CD-ROM filesystem data 'CDROM' (bootable)</span></div></pre></td></tr></table></figure><h3 id="定制-ISO-信息"><a href="#定制-ISO-信息" class="headerlink" title="定制 ISO 信息"></a>定制 ISO 信息</h3><p>通过上面的命令，我们构建了属于我们自己的 ISO，但是这时候出现一个需求，如果我们要对我们定制的 ISO 进行版本管理，要求可以通过 ISO 自动升级，那么我们在需要有渠道/方式获取 ISO 属性信息，比如：release date，size，dependency… 我们如何管理这些属性信息呢？ </p><p>最简单的方式肯定是直接再编写一个文件，与 ISO 一一匹配，在文件中记录 ISO 相应信息，比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="attr">"md5"</span>: <span class="string">"04db3dc9d872c382b1f42c9741815138"</span>,</div><div class="line"><span class="attr">"size"</span>: <span class="number">354719744</span>,</div><div class="line"><span class="attr">"dependency"</span>: [<span class="string">"yiran1"</span>, <span class="string">"yiran2"</span>, <span class="string">"yiran3"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这样虽然简单实现了，但是很不方便管理，通过查看 ISO 9660 维基百科中的描述，可以看到有一个特性：</p><blockquote><p>最开始的32768字节没有被ISO 9660数据结构使用，因此可以有其他用处，例如：CD-ROM可以在此区包含一个替代文件系统描述信息块，通常被混合光盘(Hybrid CD)用于提供Mac OS特定的内容。此未用块后面跟着一连串卷描述符，详细记录了该磁盘上的内容和类型信息（类似被FAT和NTFS格式磁盘使用的BIOS参数块）。</p></blockquote><p>可以看到 ISO 前 32KiB 空间未被使用，Mac OS 早就利用这个空间来进行信息记录了，那么我们可以通过 <code>dd</code> 的方式来将二进制的信息写入 ISO 前 32KiB 空间中。<br>这样就避免了同时维护 ISO 及 ISO 对应 metadata 文件，管理起来更加方便。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.upgrade.doc/GUID-C03EADEA-A192-4AB4-9B71-9256A9CB1F9C.html" target="_blank" rel="external">https://docs.vmware.com/en/VMware-vSphere/6.5/com.vmware.vsphere.upgrade.doc/GUID-C03EADEA-A192-4AB4-9B71-9256A9CB1F9C.html</a></li><li><a href="https://zh.wikipedia.org/wiki/ISO_9660" target="_blank" rel="external">https://zh.wikipedia.org/wiki/ISO_9660</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ISO-9660&quot;&gt;&lt;a href=&quot;#ISO-9660&quot; class=&quot;headerlink&quot; title=&quot;ISO 9660&quot;&gt;&lt;/a&gt;ISO 9660&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;ISO 9660，也被一些硬件和软件供应商称作CDFS（光盘文件系
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://zdyxry.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Shell cat 保存文件方式</title>
    <link href="http://zdyxry.com/2019/01/05/Shell-cat-%E4%BF%9D%E5%AD%98%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F/"/>
    <id>http://zdyxry.com/2019/01/05/Shell-cat-保存文件方式/</id>
    <published>2019-01-05T12:12:30.000Z</published>
    <updated>2019-01-05T12:20:32.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在 Shell 中保存文件可以通过 echo 保存一个字符串， cat 保存一个字符片段，最近在用 cat 编写 Nginx 配置文件的时候，想要写入 <code>$test</code> 类似字段，但是 Shell 会自动将其识别为变量而忽略，记录下该方式。</p><h2 id="cat-编写文件"><a href="#cat-编写文件" class="headerlink" title="cat 编写文件"></a>cat 编写文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">root@yiran-30-250:/tmp</div><div class="line"> $ cat cat.sh</div><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"></div><div class="line">cat &lt;&lt; EOF &gt; /tmp/yiran</div><div class="line">aaa</div><div class="line">bbb</div><div class="line">ccc</div><div class="line">ddd</div><div class="line"><span class="variable">$eee</span></div><div class="line"><span class="variable">$fff</span></div><div class="line"></div><div class="line">EOF</div><div class="line">root@yiran-30-250:/tmp</div><div class="line"> $ bash cat.sh</div><div class="line">root@yiran-30-250:/tmp</div><div class="line"> $ cat yiran</div><div class="line">aaa</div><div class="line">bbb</div><div class="line">ccc</div><div class="line">ddd</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">root@yiran-30-250:/tmp</div><div class="line"> $ cat cat2.sh</div><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"></div><div class="line">cat &lt;&lt; <span class="string">'EOF'</span> &gt; /tmp/yiran</div><div class="line">aaa</div><div class="line">bbb</div><div class="line">ccc</div><div class="line">ddd</div><div class="line"><span class="variable">$eee</span></div><div class="line"><span class="variable">$fff</span></div><div class="line"></div><div class="line">EOF</div><div class="line">root@yiran-30-250:/tmp</div><div class="line"> $ bash cat2.sh</div><div class="line">root@yiran-30-250:/tmp</div><div class="line"> $ cat yiran</div><div class="line">aaa</div><div class="line">bbb</div><div class="line">ccc</div><div class="line">ddd</div><div class="line"><span class="variable">$eee</span></div><div class="line"><span class="variable">$fff</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在 Shell 中保存文件可以通过 echo 保存一个字符串， cat 保存一个字符片段，最近在用 cat 编写 Nginx 配置文件的时候
      
    
    </summary>
    
    
      <category term="Shell" scheme="http://zdyxry.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark 远程抓包方法</title>
    <link href="http://zdyxry.com/2019/01/01/Wireshark-%E8%BF%9C%E7%A8%8B%E6%8A%93%E5%8C%85%E6%96%B9%E6%B3%95/"/>
    <id>http://zdyxry.com/2019/01/01/Wireshark-远程抓包方法/</id>
    <published>2019-01-01T04:46:50.000Z</published>
    <updated>2019-01-05T02:34:51.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在看 《Wireshark网络分析就这么简单》，目前读了 1/3，觉得作为一本工具介绍书籍还是不错的，至少可以让我更关注网络相关知识。<br>书中有大量的实例来讲解 Wireshark 的使用，及网络基础，在阅读的过程中，需要实际动手操作下，由于搜到的教程中没有正确操作的步骤，特此记录。</p><h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><ul><li>个人 PC<ul><li>Windows 10</li></ul></li><li>服务器<ul><li>CentOS 7</li></ul></li></ul><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><h3 id="1-个人-PC"><a href="#1-个人-PC" class="headerlink" title="(1)个人 PC"></a>(1)个人 PC</h3><ol><li>登陆 Wireshark 官网，下载最新版本软件包并安装</li><li>打开 Wireshark ，选择本机的网卡，并进行抓取，验证软件是否正常工作</li></ol><img src="/2019/01/01/Wireshark-远程抓包方法/pc-wireshark.png" alt="PC1" title="PC1"><img src="/2019/01/01/Wireshark-远程抓包方法/pc-wireshark2.png" alt="PC2" title="PC2"><h3 id="2-服务器"><a href="#2-服务器" class="headerlink" title="(2)服务器"></a>(2)服务器</h3><p>验证个人 PC 上软件正常后，我们需要在服务器安装 rpcapd，以便让 Wireshark 连接该服务器。</p><ol><li>访问 rpcapd <a href="https://github.com/rpcapd-linux/rpcapd-linux" target="_blank" rel="external">github</a></li><li>克隆相应代码 <code>cd /tmp; git clone https://github.com/rpcapd-linux/rpcapd-linux</code>  </li><li>安装相应依赖 <code>yum install glibc-static flex binutils</code></li><li>编译安装 libpcap <code>cd /tmp/rpcapd-linux/libpcap ; ./configure &amp;&amp; make</code></li><li>编译安装 rpcapd ，注意 README 中的 <code>libcrypt.a in glibc-static is broken in ,remove -static in Makefile</code> ，需要先将 Makefile 中的 <code>-static</code> 删掉，执行 <code>make</code> 即可</li><li>执行 <code>./rpcapd -n</code> 可以看到程序正在运行：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@yiran-30-250:/tmp/rpcapd-linux </div><div class="line">master ✗ $ ./rpcapd -n</div><div class="line">Press CTRL + C to stop the server...</div><div class="line"><span class="built_in">bind</span>(): Address already <span class="keyword">in</span> use (code 98)</div></pre></td></tr></table></figure><h3 id="3-个人-PC"><a href="#3-个人-PC" class="headerlink" title="(3)个人 PC"></a>(3)个人 PC</h3><ol><li>打开 Wireshark，点击 <code>Capture</code> –&gt; <code>Options</code> –&gt; <code>Manage Interfaces</code> –&gt; <code>Remote interfaces</code> –&gt; <code>+</code> –&gt; 在 Host 输入对应服务器 IP 即可<img src="/2019/01/01/Wireshark-远程抓包方法/pc-add-remote.png" alt="PC3" title="PC3"></li><li>在 Wireshark 首页上我们可以看到服务器上的相应网卡列表，选择我们想要抓取的网卡，即可抓取。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近在看 《Wireshark网络分析就这么简单》，目前读了 1/3，觉得作为一本工具介绍书籍还是不错的，至少可以让我更关注网络相关知识。&lt;
      
    
    </summary>
    
    
      <category term="tools" scheme="http://zdyxry.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>2018年读书记录</title>
    <link href="http://zdyxry.com/2018/12/30/2018%E5%B9%B4%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/"/>
    <id>http://zdyxry.com/2018/12/30/2018年读书记录/</id>
    <published>2018-12-30T11:16:24.000Z</published>
    <updated>2019-01-05T02:34:51.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="年终总结"><a href="#年终总结" class="headerlink" title="年终总结"></a>年终总结</h2><ul><li>计划 30 本，实际25本。  </li></ul><p>根据 2017 和 2018 两年的状态来看，平均 20本左右是正常状态了，平时很少有长时间的阅读时间，今天这种元旦假期无人打扰的阅读时间更是少的可怜，还是要学会利用片段阅读。<br>调整下阅读策略，把想读的书调整为 1 本，防止过度堆积导致无法进行，希望 19 年可以有所改变。   </p><p>“总要有点进步嘛”。</p><h2 id="已读"><a href="#已读" class="headerlink" title="已读"></a>已读</h2><ol><li>《区块链》</li><li>《人工智能》</li><li>《哲学家们都干了些什么》</li><li>《大数据时代 : 生活、工作与思维的大变革》</li><li>《鞋狗 : 耐克创始人菲尔·奈特亲笔自传》</li><li>《大话存储（终极版） : 存储系统底层架构原理极限剖析》</li><li>《魔法时刻》</li><li>《大规模分布式存储系统 : 原理解析与架构实战》</li><li>《Python 自动化运维 : 技术与最佳实践》</li><li>《支付战争 : 互联网金融创世纪》</li><li>《遗落的南境1：湮灭》</li><li>《Effective Python : 编写高质量Python代码的59个有效方法》</li><li>《精通VMware vSphere 5》</li><li>《写给大家看的设计书（第3版）》</li><li>《算法图解》</li><li>《Fluent Python》</li><li>《C 程序设计语言》</li><li>《The Hitchhiker’s Guide to Python》</li><li>《Python Cookbook》</li><li>《高效程序员的45个习惯 : 敏捷开发修炼之道》</li><li>《Docker 进阶与实战》</li><li>《动物农场》</li><li>《爆款文案》</li><li>《Selenium 2自动化测试实战 : 基于Python语言》</li><li>《重新定义公司 : 谷歌是如何运营的》</li></ol><h2 id="在读"><a href="#在读" class="headerlink" title="在读"></a>在读</h2><ul><li>《HTTP权威指南》</li><li>《Go 语言圣经》</li></ul><h2 id="想读"><a href="#想读" class="headerlink" title="想读"></a>想读</h2><ul><li>《大话数据结构》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;年终总结&quot;&gt;&lt;a href=&quot;#年终总结&quot; class=&quot;headerlink&quot; title=&quot;年终总结&quot;&gt;&lt;/a&gt;年终总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;计划 30 本，实际25本。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据 2017 和 2018 两年的状态来看，平均
      
    
    </summary>
    
    
      <category term="Book" scheme="http://zdyxry.com/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>cgroup 资源预留</title>
    <link href="http://zdyxry.com/2018/12/18/cgroup-%E8%B5%84%E6%BA%90%E9%A2%84%E7%95%99/"/>
    <id>http://zdyxry.com/2018/12/18/cgroup-资源预留/</id>
    <published>2018-12-18T13:15:33.000Z</published>
    <updated>2018-12-18T13:17:27.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="cgroup-资源预留"><a href="#cgroup-资源预留" class="headerlink" title="cgroup 资源预留"></a>cgroup 资源预留</h2><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在之前的博客中，提到了 cgroup 中如何为自己的服务配置资源限制，比如 CPU，内存等，当时以为在 <code>cgroup.conf</code> 中配置的服务，那么相应绑定的 CPU 就归属于该服务，也就是资源预留，今天发现并不是这样，记录下如何通过 cgroup 做资源预留。</p><h2 id="资源预留"><a href="#资源预留" class="headerlink" title="资源预留"></a>资源预留</h2><p>在之前提到的博客中关于资源限制是这么配置的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[root@node 20:56:49 ~]<span class="variable">$cat</span> /etc/cgconfig.conf</div><div class="line"><span class="comment"># yiran cgroups configuration</span></div><div class="line"></div><div class="line">group . &#123;</div><div class="line">    cpuset &#123;</div><div class="line">        cpuset.memory_pressure_enabled = <span class="string">"1"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">group yiran &#123;</div><div class="line">    cpuset &#123;</div><div class="line">        cpuset.cpus = <span class="string">"0,1,2,3,4,5"</span>;</div><div class="line">        cpuset.mems = <span class="string">"0-1"</span>;</div><div class="line">        cpuset.cpu_exclusive = <span class="string">"1"</span>;</div><div class="line">        cpuset.mem_hardwall = <span class="string">"1"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">group yiran/<span class="built_in">test</span> &#123;</div><div class="line">    cpuset &#123;</div><div class="line">        cpuset.cpus = <span class="string">"0"</span>;</div><div class="line">        cpuset.mems = <span class="string">"0-1"</span>;</div><div class="line">        cpuset.cpu_exclusive = <span class="string">"1"</span>;</div><div class="line">        cpuset.mem_hardwall = <span class="string">"1"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我为 yiran 这个服务做了限制，其中分配给 <code>yiran/test</code> 的 CPU 是 <code>0</code>，并且配置了 <code>cpuset.cpu_exclusive</code> 选项。注意，这里的 exclusive 的意思并不是说分配到 <code>yiran/test</code> 中的服务独自占用该线程，而是说分配到 <code>yiran/test</code> 中的服务只会占用该线程，不会侵入到其他线程中，也就是通常我们说的 Limit。<br>可以通过 <code>stress</code> 命令来进行验证：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 对一台配置好 cgroup 的物理服务器 CPU 加压</span></div><div class="line">[root@node 21:05:37 ~]<span class="variable">$stress</span> -c 24</div><div class="line">stress: info: [4033] dispatching hogs: 24 cpu, 0 io, 0 vm, 0 hdd</div></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 新开终端，执行 top 命令查看 CPU 情况</span></div><div class="line">[root@node 21:05:37 ~]<span class="variable">$top</span></div><div class="line">top - 21:06:35 up 5 days,  9:03,  3 users,  load average: 32.58, 19.04, 15.43</div><div class="line">Tasks: 449 total,  36 running, 412 sleeping,   0 stopped,   1 zombie</div><div class="line">%Cpu0  : 89.0 us,  8.6 sy,  0.0 ni,  2.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu1  : 99.7 us,  0.3 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu2  : 90.4 us,  8.9 sy,  0.0 ni,  0.3 id,  0.3 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu3  : 95.4 us,  4.6 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu4  : 84.4 us, 13.6 sy,  0.3 ni,  1.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu5  : 46.5 us, 36.0 sy,  1.7 ni, 15.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu6  : 93.4 us,  6.6 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu7  : 94.4 us,  5.6 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu8  : 88.0 us, 12.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu9  : 88.7 us, 11.3 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu10 : 88.4 us, 10.9 sy,  0.0 ni,  0.3 id,  0.0 wa,  0.0 hi,  0.3 si,  0.0 st</div><div class="line">%Cpu11 : 85.4 us, 13.9 sy,  0.7 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu12 : 98.7 us,  1.3 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu13 : 39.0 us, 12.0 sy,  0.0 ni, 49.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu14 : 92.7 us,  6.9 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.3 si,  0.0 st</div><div class="line">%Cpu15 : 98.7 us,  1.3 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu16 : 97.0 us,  3.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu17 : 97.0 us,  2.3 sy,  0.0 ni,  0.3 id,  0.0 wa,  0.0 hi,  0.3 si,  0.0 st</div><div class="line">%Cpu18 :100.0 us,  0.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu19 : 93.7 us,  6.3 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu20 : 88.4 us, 11.6 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu21 : 89.4 us, 10.6 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu22 : 88.1 us, 11.9 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu23 : 90.4 us,  9.6 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div></pre></td></tr></table></figure><p>那么我们如何确保自己的服务有足够的资源运行呢？ 比如像 vSphere ESXi 上面可以针对某些虚拟机进行具体的资源预留（CPU，内存，磁盘等）。<br>其实只要将其他资源也限制在一个 cgroup 中就可以了。  </p><ol><li>在 <code>/etc/cgconfig.conf</code> 中创建一个新的 cgroup，将系统上其余的资源分配给该 group，如创建 <code>yiran/others</code> 并分配 3个 线程；</li><li>修改 <code>/etc/cgrules.conf</code> ，将系统其它所有服务分配到步骤1创建的 group 中，如：<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*       cpuset       yiran/others</div></pre></td></tr></table></figure></li></ol><p>修改配置完成后，分别重启 <code>cgred</code> 和 <code>cgconfig</code> 使配置生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl restart cgred</div><div class="line">systemctl restart cgconfig</div></pre></td></tr></table></figure></p><p>此时我们再通过 <code>stress</code> 进行验证<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@node 21:09:29 ~]<span class="variable">$stress</span> -c 24</div><div class="line">stress: info: [12475] dispatching hogs: 24 cpu, 0 io, 0 vm, 0 hdd</div></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">top - 21:11:58 up 5 days,  9:09,  3 users,  load average: 38.11, 30.37, 21.48</div><div class="line">Tasks: 445 total,  38 running, 406 sleeping,   0 stopped,   1 zombie</div><div class="line">%Cpu0  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu1  :100.0 us,  0.0 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu2  :  0.0 us,  0.0 sy,  0.3 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu3  :  0.0 us,  0.3 sy,  0.0 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu4  : 88.1 us, 11.9 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu5  : 81.9 us, 16.1 sy,  1.6 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.3 si,  0.0 st</div><div class="line">%Cpu6  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu7  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu8  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu9  :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu10 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu11 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu12 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu13 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu14 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu15 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu16 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu17 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu18 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu19 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu20 :  0.0 us,  0.0 sy,  0.3 ni, 99.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu21 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu22 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">%Cpu23 :  0.0 us,  0.0 sy,  0.0 ni,100.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">KiB Mem : 13174792+total, 11522948+free,  6439344 used, 10079088 buff/cache</div><div class="line">KiB Swap:        0 total,        0 free,        0 used. 12406676+avail Mem</div></pre></td></tr></table></figure><p>我在 <code>yiran/others</code> 中配置了 3 个线程，那么此时哪怕我执行 <code>stress</code>  worker 为 24，也只会在这3个线程中，不会对其他 cgroup 服务产生干扰，从而达到了资源预留的效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;cgroup-资源预留&quot;&gt;&lt;a href=&quot;#cgroup-资源预留&quot; class=&quot;headerlink&quot; title=&quot;cgroup 资源预留&quot;&gt;&lt;/a&gt;cgroup 资源预留&lt;/h2&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://zdyxry.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>剑指-Offer（七）</title>
    <link href="http://zdyxry.com/2018/12/15/%E5%89%91%E6%8C%87-Offer%EF%BC%88%E4%B8%83%EF%BC%89/"/>
    <id>http://zdyxry.com/2018/12/15/剑指-Offer（七）/</id>
    <published>2018-12-15T00:44:06.000Z</published>
    <updated>2018-12-15T02:56:15.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_list</span><span class="params">(list_head)</span>:</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> list_head <span class="keyword">or</span> <span class="keyword">not</span> list_head.next:</div><div class="line">        <span class="keyword">return</span> list_head</div><div class="line"></div><div class="line">    reverse_node = <span class="keyword">None</span></div><div class="line">    node_pre = <span class="keyword">None</span></div><div class="line">    node = list_head</div><div class="line">    <span class="keyword">while</span> node:</div><div class="line">        node_next = node.next</div><div class="line">        <span class="keyword">if</span> node_next == <span class="keyword">None</span>:</div><div class="line">            reverse_node = node</div><div class="line">        node.next = node_pre</div><div class="line">        node_pre = node</div><div class="line">        node = node_next</div><div class="line">    <span class="keyword">return</span> reverse_node</div><div class="line"></div><div class="line">node1 = ListNode(<span class="number">10</span>)</div><div class="line">node2 = ListNode(<span class="number">11</span>)</div><div class="line">node3 = ListNode(<span class="number">13</span>)</div><div class="line">node1.next = node2</div><div class="line">node2.next = node3</div><div class="line"></div><div class="line">reverse_list(node1)</div></pre></td></tr></table></figure><h2 id="合并两个排序的链表"><a href="#合并两个排序的链表" class="headerlink" title="合并两个排序的链表"></a>合并两个排序的链表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_link</span><span class="params">(head1, head2)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> head1:</div><div class="line">        <span class="keyword">return</span> head2</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> head2:</div><div class="line">        <span class="keyword">return</span> head1</div><div class="line">    <span class="keyword">if</span> head1.val &lt;= head2.val:</div><div class="line">        ret = head1</div><div class="line">        ret.next = merge_link(head1.next, head2)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        ret = head2</div><div class="line">        ret.next = merge_link(head1, head2.next)</div><div class="line">    <span class="keyword">return</span> ret</div><div class="line"></div><div class="line"></div><div class="line">node1 = ListNode(<span class="number">10</span>)</div><div class="line">node2 = ListNode(<span class="number">15</span>)</div><div class="line">node3 = ListNode(<span class="number">18</span>)</div><div class="line">node1.next = node2</div><div class="line">node2.next = node3</div><div class="line"></div><div class="line">node4 = ListNode(<span class="number">11</span>)</div><div class="line">node5 = ListNode(<span class="number">16</span>)</div><div class="line">node6 = ListNode(<span class="number">19</span>)</div><div class="line">node4.next = node5</div><div class="line">node5.next = node6</div><div class="line"></div><div class="line"></div><div class="line">a = merge_link(node1, node2)</div><div class="line"><span class="keyword">print</span> a.next.next.val</div></pre></td></tr></table></figure><h2 id="树的子结构"><a href="#树的子结构" class="headerlink" title="树的子结构"></a>树的子结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.left = <span class="keyword">None</span></div><div class="line">        self.right = <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">HasSubtree</span><span class="params">(self, pRoot1, pRoot2)</span>:</span></div><div class="line">        result = <span class="keyword">False</span></div><div class="line">        <span class="keyword">if</span> pRoot1 <span class="keyword">and</span> pRoot2:</div><div class="line">            <span class="keyword">if</span> pRoot1.val == pRoot2.val:</div><div class="line">                result = self.DoesTree1haveTree2(pRoot1, pRoot2)</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> result:</div><div class="line">                result = self.HasSubtree(pRoot1.left, pRoot2) <span class="keyword">or</span> self.HasSubtree(pRoot1.right, pRoot2)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DoesTree1haveTree2</span><span class="params">(self, pRoot1, pRoot2)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pRoot2:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pRoot1:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">if</span> pRoot1.val != pRoot2.val:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> self.DoesTree1haveTree2(pRoot1.left, pRoot2.left) <span class="keyword">and</span> self.DoesTree1haveTree2(pRoot1.right, pRoot2.right)</div><div class="line"></div><div class="line"></div><div class="line">pRoot1 = TreeNode(<span class="number">8</span>)</div><div class="line">pRoot2 = TreeNode(<span class="number">8</span>)</div><div class="line">pRoot3 = TreeNode(<span class="number">7</span>)</div><div class="line">pRoot4 = TreeNode(<span class="number">9</span>)</div><div class="line">pRoot5 = TreeNode(<span class="number">2</span>)</div><div class="line">pRoot6 = TreeNode(<span class="number">4</span>)</div><div class="line">pRoot7 = TreeNode(<span class="number">7</span>)</div><div class="line">pRoot1.left = pRoot2</div><div class="line">pRoot1.right = pRoot3</div><div class="line">pRoot2.left = pRoot4</div><div class="line">pRoot2.right = pRoot5</div><div class="line">pRoot5.left = pRoot6</div><div class="line">pRoot5.right = pRoot7</div><div class="line"></div><div class="line">pRoot8 = TreeNode(<span class="number">8</span>)</div><div class="line">pRoot9 = TreeNode(<span class="number">9</span>)</div><div class="line">pRoot10 = TreeNode(<span class="number">2</span>)</div><div class="line">pRoot8.left = pRoot9</div><div class="line">pRoot8.right = pRoot10</div><div class="line"></div><div class="line">S = Solution()</div><div class="line">print(S.HasSubtree(pRoot1, pRoot8))</div></pre></td></tr></table></figure><h2 id="二叉树镜像"><a href="#二叉树镜像" class="headerlink" title="二叉树镜像"></a>二叉树镜像</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.left = <span class="keyword">None</span></div><div class="line">        self.right = <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Mirror</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:</div><div class="line">            <span class="keyword">return</span> root</div><div class="line"></div><div class="line">        pTemp = root.left</div><div class="line">        root.left = root.right</div><div class="line">        root.right = pTemp</div><div class="line"></div><div class="line">        self.Mirror(root.left)</div><div class="line">        self.Mirror(root.right)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Mirror2</span><span class="params">(self, root)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        stackNode = []</div><div class="line">        stackNode.append(root)</div><div class="line">        <span class="keyword">while</span> len(stackNode) &gt; <span class="number">0</span>:</div><div class="line">            nodeNum = len(stackNode) - <span class="number">1</span></div><div class="line">            tree = stackNode[nodeNum]</div><div class="line">            stackNode.pop()</div><div class="line">            nodeNum -= <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> tree.left <span class="keyword">or</span> tree.right:</div><div class="line">                tree.left, tree.right = tree.right, tree.left</div><div class="line">            <span class="keyword">if</span> tree.left:</div><div class="line">                stackNode.append(tree.left)</div><div class="line">                nodeNum += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> tree.right:</div><div class="line">                stackNode.append(tree.right)</div><div class="line">                nodeNum += <span class="number">1</span></div><div class="line"></div><div class="line"></div><div class="line">pNode1 = TreeNode(<span class="number">8</span>)</div><div class="line">pNode2 = TreeNode(<span class="number">6</span>)</div><div class="line">pNode3 = TreeNode(<span class="number">10</span>)</div><div class="line">pNode4 = TreeNode(<span class="number">5</span>)</div><div class="line">pNode5 = TreeNode(<span class="number">7</span>)</div><div class="line">pNode6 = TreeNode(<span class="number">9</span>)</div><div class="line">pNode7 = TreeNode(<span class="number">11</span>)</div><div class="line"></div><div class="line">pNode1.left = pNode2</div><div class="line">pNode1.right = pNode3</div><div class="line">pNode2.left = pNode4</div><div class="line">pNode2.right = pNode5</div><div class="line">pNode3.left = pNode6</div><div class="line">pNode3.right = pNode7</div><div class="line"></div><div class="line">S = Solution()</div><div class="line">S.Mirror(pNode1)</div><div class="line">print(pNode1.right.left.val)</div></pre></td></tr></table></figure><h2 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a>顺时针打印矩阵</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printMatrix</span><span class="params">(self, matrix)</span>:</span></div><div class="line">        <span class="keyword">if</span> matrix == <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        rows = len(matrix)</div><div class="line">        columns = len(matrix[<span class="number">0</span>])</div><div class="line">        start = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> rows &gt; start * <span class="number">2</span> <span class="keyword">and</span> columns &gt; start * <span class="number">2</span>:</div><div class="line">            self.PrintMatrixInCircle(matrix, columns, rows, start)</div><div class="line">            start += <span class="number">1</span></div><div class="line">        print(<span class="string">''</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">PrintMatrixInCircle</span><span class="params">(self, matrix, columns, rows, start)</span>:</span></div><div class="line">        endX = columns - <span class="number">1</span> - start</div><div class="line">        endY = rows - <span class="number">1</span> - start</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(start, endX+<span class="number">1</span>):</div><div class="line">            number = matrix[start][i]</div><div class="line">            print(number, <span class="string">' '</span>, end=<span class="string">''</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> start &lt; endY:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(start+<span class="number">1</span>, endY+<span class="number">1</span>):</div><div class="line">                number = matrix[i][endX]</div><div class="line">                print(number, <span class="string">' '</span>, end=<span class="string">''</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> start &lt; endX <span class="keyword">and</span> start &lt; endY:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(endX<span class="number">-1</span>, start<span class="number">-1</span>, <span class="number">-1</span>):</div><div class="line">                number = matrix[endY][i]</div><div class="line">                print(number, <span class="string">' '</span>, end=<span class="string">''</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> start &lt; endX <span class="keyword">and</span> start &lt; endY<span class="number">-1</span>:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(endY<span class="number">-1</span>, start, <span class="number">-1</span>):</div><div class="line">                number = matrix[i][start]</div><div class="line">                print(number, <span class="string">' '</span>, end=<span class="string">''</span>)</div><div class="line">                </div><div class="line"></div><div class="line">matrix = [[<span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>],</div><div class="line">          [<span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],</div><div class="line">          [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>],</div><div class="line">          [<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>]]</div><div class="line">matrix2 = [[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>],[<span class="number">4</span>],[<span class="number">5</span>]]</div><div class="line">matrix3 = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>],[<span class="number">9</span>,<span class="number">10</span>]]</div><div class="line">S = Solution()</div><div class="line">S.printMatrix(matrix)</div><div class="line">S.printMatrix(matrix2)</div><div class="line">S.printMatrix(matrix3)</div><div class="line"><span class="comment"># print(S.PrintMatrix(matrix))</span></div><div class="line"><span class="comment"># print(S.PrintMatrix(matrix2))</span></div><div class="line"><span class="comment"># print(S.PrintMatrix(matrix3))</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;反转链表&quot;&gt;&lt;a href=&quot;#反转链表&quot; class=&quot;headerlink&quot; title=&quot;反转链表&quot;&gt;&lt;/a&gt;反转链表&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="alogrithms" scheme="http://zdyxry.com/tags/alogrithms/"/>
    
  </entry>
  
  <entry>
    <title>戴尔服务器 iDrac 配置</title>
    <link href="http://zdyxry.com/2018/12/12/%E6%88%B4%E5%B0%94%E6%9C%8D%E5%8A%A1%E5%99%A8-iDrac-%E9%85%8D%E7%BD%AE/"/>
    <id>http://zdyxry.com/2018/12/12/戴尔服务器-iDrac-配置/</id>
    <published>2018-12-12T14:18:15.000Z</published>
    <updated>2018-12-12T14:42:46.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前介绍过超微的 IPMI 配置时提过，超微的 IPMI 是最简陋的，最近在用戴尔服务器的时候碰到了一个比较坑的事情，查了资料解决了，更加坚定之前的结论，IPMI 相应的配置尽量独立。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在戴尔服务器安装 CentOS 后，可见网卡比预期要多出一块，物理服务器安装了两块 PCIe 网卡，一块千兆，一块万兆，每块网卡有两个网口，那么理应在服务器看到的应该是 4个网口，即 <code>ip ad</code> 看到的应该是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@node11 22:24:49 ~]<span class="variable">$ip</span> ad |grep enp</div><div class="line">2: enp94s0f0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq master ovs-system state UP qlen 1000</div><div class="line">3: enp24s0f0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq portid 3cfdfe6c9e10 state DOWN qlen 1000</div><div class="line">4: enp24s0f1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq master ovs-system portid 3cfdfe6c9e12 state UP qlen 1000</div><div class="line">5: enp94s0f1: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN qlen 1000</div></pre></td></tr></table></figure><p>但是安装完 OS，发现多出一块网口 <code>eno16</code> ，通过 <code>ethtool</code> 工具查看，发现该网口为千兆，且处于连接状态，最开始没多想，直接将该网口作为管理网络配置了，一切正常。</p><p>当我尝试通过该网口连接 IPMI 获取风扇信息时，发现无法获取，验证命令为：<br><code>ipmitool -I lanplus -H &lt;ipmi ip&gt; -U &lt;user name&gt; -P &lt;password&gt; lan print</code><br>最开始以为是密码不对，后来发现是在 OS 内部无法 ping 通 IPMI IP，这就很奇怪了。</p><p>当时网络情况如下：</p><table><thead><tr><th>连通情况</th><th>yiran’s PC</th><th>IPMI IP</th><th>OS IP</th></tr></thead><tbody><tr><td>yiran’s PC</td><td>1</td><td>1</td><td>1</td></tr><tr><td>IPMI IP</td><td>1</td><td>1</td><td>0</td></tr><tr><td>OS IP</td><td>1</td><td>0</td><td>1</td></tr></tbody></table><p>因为没遇到过这种情况，根据经验，先检查了下 iDRAC 网络配置，发现当时 iDRAC 网卡选择的是 LOM1，也就是板载网卡，且该网卡处于 pass-through 状态，官方解释如下：</p><blockquote><p>板载网卡 (LAN On Motherboards, LOM)，如果您选择 Network Settings（网络设置）下的 Auto Dedicated NIC（自动专用 NIC），则当 iDRAC 将其 NIC 选择作为共享 LOM（1、2、3 或 4）并且在 iDRAC 专用 NIC 上检测到链接时，iDRAC 会更改其 NIC 选择来使用专用 NIC。如果在专用 NIC 上检 测不到链接，则 iDRAC 使用共享 LOM。从共享 NIC 切换到专用 NIC 的超时为五秒，而从专用 NIC 切换到共享 NIC 的超时为 30 秒。可以使用 RACADM 或 WS-MAN 配置此超时值。<br>如果选择 LOM 作为直通配置，并且使用专用模式连接服务器，则输入操作系统的 IPv4 地址。 注: 如果在共享的 LOM 模式下连接了服务器，则操作系统 IP 地址字段将禁用。</p></blockquote><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>将 iDRAC 网络配置从 LOM 改为 Dedicated 后，重启 OS 即可，注意，改为 Dedicated 后，OS 将无法识别到 LOM，需要重新配置网络。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;之前介绍过超微的 IPMI 配置时提过，超微的 IPMI 是最简陋的，最近在用戴尔服务器的时候碰到了一个比较坑的事情，查了资料解决了，更加坚
      
    
    </summary>
    
    
      <category term="Server" scheme="http://zdyxry.com/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer（六）</title>
    <link href="http://zdyxry.com/2018/12/06/%E5%89%91%E6%8C%87-Offer%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <id>http://zdyxry.com/2018/12/06/剑指-Offer（六）/</id>
    <published>2018-12-06T14:34:54.000Z</published>
    <updated>2018-12-06T14:59:39.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表中倒数第k个结点"><a href="#链表中倒数第k个结点" class="headerlink" title="链表中倒数第k个结点"></a>链表中倒数第k个结点</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用两个指针，a 先遍历 k-1，之后一起遍历，直到a 指针到最后一个节点，则 b 为倒数 k 节点</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_k_to_tail</span><span class="params">(self, head, k)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">and</span> k &lt;= <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">        a_head = head</div><div class="line">        b_head = <span class="keyword">None</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k - <span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> a_head.next != <span class="keyword">None</span>:</div><div class="line">                a_head = a_head.next</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">        b_head = head</div><div class="line">        <span class="keyword">while</span> a_head.next != <span class="keyword">None</span>:</div><div class="line">            a_head = a_head.next</div><div class="line">            b_head = b_head.next</div><div class="line">        <span class="keyword">return</span> b_head.val</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_k_to_tail2</span><span class="params">(self, head, k)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">and</span> k &lt;= <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">        a_head = head</div><div class="line"></div><div class="line">        <span class="keyword">while</span> a_head <span class="keyword">and</span> (k - <span class="number">1</span>) &gt;= <span class="number">0</span>:</div><div class="line">            a_head = a_head.next</div><div class="line">            k -= <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> a_head:</div><div class="line">            a_head = a_head.next</div><div class="line">            head = head.next</div><div class="line">        <span class="keyword">return</span> head.val</div><div class="line"></div><div class="line"></div><div class="line">a = ListNode(<span class="number">1</span>)</div><div class="line">a.next = ListNode(<span class="number">2</span>)</div><div class="line">a.next.next = ListNode(<span class="number">3</span>)</div><div class="line">a.next.next.next = ListNode(<span class="number">4</span>)</div><div class="line">a.next.next.next.next = ListNode(<span class="number">5</span>)</div><div class="line"></div><div class="line">s = Solution()</div><div class="line"><span class="keyword">print</span> s.find_k_to_tail2(a, <span class="number">3</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;链表中倒数第k个结点&quot;&gt;&lt;a href=&quot;#链表中倒数第k个结点&quot; class=&quot;headerlink&quot; title=&quot;链表中倒数第k个结点&quot;&gt;&lt;/a&gt;链表中倒数第k个结点&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
      <category term="alogrithms" scheme="http://zdyxry.com/tags/alogrithms/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer（五）</title>
    <link href="http://zdyxry.com/2018/12/05/%E5%89%91%E6%8C%87-Offer%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>http://zdyxry.com/2018/12/05/剑指-Offer（五）/</id>
    <published>2018-12-05T12:25:38.000Z</published>
    <updated>2018-12-05T12:33:30.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="调整数组顺序使奇数位于偶数前面"><a href="#调整数组顺序使奇数位于偶数前面" class="headerlink" title="调整数组顺序使奇数位于偶数前面"></a>调整数组顺序使奇数位于偶数前面</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reorder</span><span class="params">(nums, func)</span>:</span></div><div class="line">    left, right = <span class="number">0</span>, len(nums) - <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> left &lt; right:</div><div class="line">        <span class="keyword">while</span> <span class="keyword">not</span> func(nums[left]):</div><div class="line">            left += <span class="number">1</span></div><div class="line">        <span class="keyword">while</span> func(nums[right]):</div><div class="line">            right -= <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> left &lt; right:</div><div class="line">            nums[left], nums[right] = nums[right], nums[left]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_even</span><span class="params">(num)</span>:</span></div><div class="line">    <span class="keyword">return</span> (num &amp; <span class="number">1</span>) == <span class="number">0</span></div></pre></td></tr></table></figure><h2 id="调整数组顺序使奇数位于偶数前面，保持相对位置不变"><a href="#调整数组顺序使奇数位于偶数前面，保持相对位置不变" class="headerlink" title="调整数组顺序使奇数位于偶数前面，保持相对位置不变"></a>调整数组顺序使奇数位于偶数前面，保持相对位置不变</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reorder2</span><span class="params">(nums)</span>:</span></div><div class="line">    left = [num <span class="keyword">for</span> num <span class="keyword">in</span> nums <span class="keyword">if</span> num &amp; <span class="number">1</span> != <span class="number">0</span>]</div><div class="line">    right = [num <span class="keyword">for</span> num <span class="keyword">in</span> nums <span class="keyword">if</span> num &amp; <span class="number">1</span> == <span class="number">0</span>]</div><div class="line">    <span class="keyword">return</span> left + right</div><div class="line"></div><div class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</div><div class="line"><span class="keyword">print</span> reorder2(nums)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;调整数组顺序使奇数位于偶数前面&quot;&gt;&lt;a href=&quot;#调整数组顺序使奇数位于偶数前面&quot; class=&quot;headerlink&quot; title=&quot;调整数组顺序使奇数位于偶数前面&quot;&gt;&lt;/a&gt;调整数组顺序使奇数位于偶数前面&lt;/h2&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="alogrithms" scheme="http://zdyxry.com/tags/alogrithms/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer（四）</title>
    <link href="http://zdyxry.com/2018/12/02/%E5%89%91%E6%8C%87-Offer%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://zdyxry.com/2018/12/02/剑指-Offer（四）/</id>
    <published>2018-12-02T12:11:24.000Z</published>
    <updated>2018-12-02T12:12:24.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在O-1-时间内删除链表结点"><a href="#在O-1-时间内删除链表结点" class="headerlink" title="在O(1)时间内删除链表结点"></a>在O(1)时间内删除链表结点</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=None)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        self.val = <span class="keyword">None</span></div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_list</span><span class="params">(self, list_head, to_delete)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> list_head <span class="keyword">or</span> <span class="keyword">not</span> to_delete:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> to_delete.next != <span class="keyword">None</span>:</div><div class="line">            next_node = to_delete.next</div><div class="line">            to_delete.val = next_node.val</div><div class="line">            to_delete.next = next_node.next</div><div class="line">            next_node.__del__()</div><div class="line"></div><div class="line">        <span class="keyword">elif</span> list_head == to_delete:</div><div class="line">            list_head.__del__()</div><div class="line">            to_delete.__del__()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            list_node = list_head</div><div class="line">            <span class="keyword">while</span> list_node.next != to_delete:</div><div class="line">                list_node = list_node.next</div><div class="line">            list_node.next = <span class="keyword">None</span></div><div class="line">            to_delete.__del__()</div><div class="line"></div><div class="line"></div><div class="line">node1 = ListNode(<span class="number">10</span>)</div><div class="line">node2 = ListNode(<span class="number">11</span>)</div><div class="line">node3 = ListNode(<span class="number">13</span>)</div><div class="line">node4 = ListNode(<span class="number">15</span>)</div><div class="line">node1.next = node2</div><div class="line">node2.next = node3</div><div class="line">node3.next = node4</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Solution().delete_list(node1, node4)</span></div><div class="line">Solution().delete_list(node1, node3)</div><div class="line">print(node1.next.next.val)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在O-1-时间内删除链表结点&quot;&gt;&lt;a href=&quot;#在O-1-时间内删除链表结点&quot; class=&quot;headerlink&quot; title=&quot;在O(1)时间内删除链表结点&quot;&gt;&lt;/a&gt;在O(1)时间内删除链表结点&lt;/h2&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="alogrithms" scheme="http://zdyxry.com/tags/alogrithms/"/>
    
  </entry>
  
  <entry>
    <title>个人常用工具</title>
    <link href="http://zdyxry.com/2018/12/02/%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <id>http://zdyxry.com/2018/12/02/个人常用工具/</id>
    <published>2018-12-02T08:35:54.000Z</published>
    <updated>2018-12-02T11:05:38.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司标配 Thinkpad，也曾经折腾过 Linux，最终因为舍不得 Windows 下的各种软件，就老老实实用 Windows 。<br>周五的时候电脑故障，趁着重新配置开发环境的机会，整理下自己常用的软件|工具。</p><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><h4 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h4><p>主力编辑器，因为平时写 Python 比较多，所以安装的插件并不多，主要用到的就是函数之间的跳转，具体配置在 <a href="https://github.com/zdyxry/Dotfiles" target="_blank" rel="external">github</a> 。</p><h4 id="VScode"><a href="#VScode" class="headerlink" title="VScode"></a>VScode</h4><p>在写代码的时候通常使用 vim ，但是看代码还是习惯于 VScode，主要是看代码用鼠标控制比较方便。<br>偶尔会碰到编写配置文件，比如 JSON/YAML 的时候，vim 写起来还是有些吃力，可能是我用的不到家吧。</p><h3 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h3><h4 id="XShell"><a href="#XShell" class="headerlink" title="XShell"></a>XShell</h4><p>在 Windows 用的比较多的应该是 XShell，同时管理多台服务器简单高效，且有配套的 XSFTP，上传/下载文件很方便。</p><h4 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h4><p>在 Linux 上主要用系统自带的 Terminal 配合 Tmux 使用，主要原因是 Tmux 可以在多平台使用，不用针对不同平台记不同的快捷键（没错，说的就是 Jetbrains）。  </p><p>并没有对 tmux 做太多定制化配置，因为有时候服务器上面不会允许你修改默认配置文件的，所以大部分用的默认配置，平时用的比较多的应该就是 Window &amp; Panel 配合使用。</p><h4 id="Hyper"><a href="#Hyper" class="headerlink" title="Hyper"></a>Hyper</h4><p>好看。</p><h3 id="周边工具"><a href="#周边工具" class="headerlink" title="周边工具"></a>周边工具</h3><h4 id="Wox"><a href="#Wox" class="headerlink" title="Wox"></a>Wox</h4><p>作为 Windows 下的 alfred， Wox 无疑是一个合格的软件，可以极大的提高效率。</p><h4 id="Sumatra-PDF"><a href="#Sumatra-PDF" class="headerlink" title="Sumatra PDF"></a>Sumatra PDF</h4><p>一款极小的 PDF 阅读器，该有的功能都有，比福昕好用，无广告。</p><h4 id="Ditto"><a href="#Ditto" class="headerlink" title="Ditto"></a>Ditto</h4><p>Windows 下的一款剪切板软件，可以记录复制粘贴的历史情况，提供搜索等功能。</p><h3 id="个人管理"><a href="#个人管理" class="headerlink" title="个人管理"></a>个人管理</h3><h4 id="有道云笔记"><a href="#有道云笔记" class="headerlink" title="有道云笔记"></a>有道云笔记</h4><p>笔记这类工具用上一款之后，随着使用时间的增加，切换成本是成正比的，所以就要选一块稳定可靠的。像近来流行的 Bear，为知，Notion，说实在的，就是担心哪天公司突然倒闭了。  </p><p>有道现在支持 Markdown，部分功能需要开通会员才可以，比如 Markdown 中上传图片。不过对于我来说还是够用了。</p><h4 id="Trello"><a href="#Trello" class="headerlink" title="Trello"></a>Trello</h4><p>由于现在工作内容每天变动很大，随时有可能调整任务优先级，所以平时记录 Todo 类型内容基本上靠着 Markdown 上的 <code>- [ ]</code> 过活。但是对于个人管理而言，还是使用 Trello ，便于管理和记录，方便观察自我成长。</p><h4 id="Pocket"><a href="#Pocket" class="headerlink" title="Pocket"></a>Pocket</h4><p>稍后阅读工具，配合 Chrome 上的插件使用很完美，多平台同步很快。<br>缺点就是分类较为痛苦，要管理自己的 tag。</p><h4 id="Inoreader"><a href="#Inoreader" class="headerlink" title="Inoreader"></a>Inoreader</h4><p>RSS 阅读器。 随着微信/微博等社交公众号的推广，生活中充斥着一些片段信息，有些公众号发的内容毫无营养，极大的浪费时间，这时候关注自己想关注的就比较重要了。</p><p>个人比较喜欢 RSS 订阅的方式订阅自己感兴趣的内容，无论是博客，还是公众号，都可以通过 RSS 的方式订阅，如果没有提供 RSS，也可以通过 RSSHub 来订阅。之后找时间把我订阅的一些博客/网站整理分享出来。</p><h4 id="记账"><a href="#记账" class="headerlink" title="记账"></a>记账</h4><p>一直想找一款账本类工具，多平台，简单易用的，但是没找到，随着第三方支付的便捷性，很多账本都没办法去自动同步，如果手动同步的话又特别麻烦，很容易遗漏。  </p><p>我个人的解决方案简单粗暴：支付宝。 所有个人支出全部通过支付宝支付，利用支付宝的账单统计了解个人消费情况。</p><h3 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h3><h4 id="RescueTime"><a href="#RescueTime" class="headerlink" title="RescueTime"></a>RescueTime</h4><p>支持多平台，且会自动统计工作内容及相应软件使用时间，最终形成以天/周/月为单位的报告。</p><h4 id="ManicTime"><a href="#ManicTime" class="headerlink" title="ManicTime"></a>ManicTime</h4><p>同样支持多平台，相比于 RescueTime ，ManicTime 记录的内容更细，具体到你每天工作的起始/终止时间，中间电脑待机时间等等，每款软件的使用时间及使用频率，最终报告也会精确到每款软件的总使用时间。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>把日常使用最多的软件列举了一下，基本上我每天清醒的时间都是在使用上述软件，想想还是很恐怖的。</p><p>最后的时间管理软件其实我中断使用过一段时间，那段时间我认为自己能够控制自己的工作内容分配，时间分配都在自己的计划中，应该不会出现 <code>时间去哪了</code> 之类的问题。结果最近随着工作内容的增加，每天感觉都有做不完的事情，又不清楚自己的时间都用来做什么了，就又安装回来观察下，结果很震惊：工作分配真的变多了 ( º﹃º )</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;公司标配 Thinkpad，也曾经折腾过 Linux，最终因为舍不得 Windows 下的各种软件，就老老实实用 Windows 。&lt;br&gt;
      
    
    </summary>
    
    
      <category term="tools" scheme="http://zdyxry.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Exponential backoff</title>
    <link href="http://zdyxry.com/2018/12/01/Exponential-backoff/"/>
    <id>http://zdyxry.com/2018/12/01/Exponential-backoff/</id>
    <published>2018-12-01T12:26:02.000Z</published>
    <updated>2018-12-01T12:26:31.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>昨天看到 Ansible 关于 Linux reboot plugin  <a href="https://www.ansible.com/blog/reboot-plugin-for-linux-in-ansible-2-7?utm_medium=Email&amp;utm_campaign=weekly&amp;sc_cid=701f2000000RRCNAA4" target="_blank" rel="external">相关文章</a> 时，看到了它关于重试等待的设计，了解了下 Exponential backoff，特此记录。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>假设存在需求：</p><ol><li>获取服务器 A 启动时间</li><li>重启服务器 A</li><li>获取服务器 A 当前时间</li></ol><p>其中第 2 点，我一般会重启服务器 A 后，不断的重连服务器 A 来判断服务器 A 是否正常启动，每次重连后等待，再次重试，设置一个最大超时时间，超过最大超时时间认为服务器 A 启动失败，任务失败。</p><p>那么什么是 Exponential backoff 呢？ 中文应该叫“指数退避”，意思就是每次重连失败后，等待的时候随着重试次数的增加而成指数增长，如果我们第1次重试等待时间为2s，则第2次重试等待时间为4s，第三次重试等待时间为8s，以此类推。</p><p>我理解最大的好处就是防止短时间内大量的重复错误，有时候当你知道你的操作是短时间无法完成的（比如重启服务器 A），那么该操作执行过程中，短时间内重试多次是没有意义的。当然我们也不能让重试等待时间无限的增长，我们可以设置一个最大的重试时间（不是最大超时时间），如果大于等于最大重试时间，则等待最大重试时间后再次重试。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Do some asynchronous operation.</div><div class="line"></div><div class="line">retries = 0</div><div class="line"></div><div class="line">DO</div><div class="line">    wait for (2^retries * 100) milliseconds</div><div class="line"></div><div class="line">    status = Get the result of the asynchronous operation.</div><div class="line"></div><div class="line">    IF status = SUCCESS</div><div class="line">        retry = false</div><div class="line">    ELSE IF status = NOT_READY</div><div class="line">        retry = true</div><div class="line">    ELSE IF status = THROTTLED</div><div class="line">        retry = true</div><div class="line">    ELSE</div><div class="line">        Some other error occurred, so stop calling the API.</div><div class="line">        retry = false</div><div class="line">    END IF</div><div class="line"></div><div class="line">    retries = retries + 1</div><div class="line"></div><div class="line">WHILE (retry AND (retries &lt; MAX_RETRIES))</div></pre></td></tr></table></figure><h3 id="Ansible-linux-reboot-plugin"><a href="#Ansible-linux-reboot-plugin" class="headerlink" title="Ansible linux reboot  plugin"></a>Ansible linux reboot  plugin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">fail_count = 0</div><div class="line">max_fail_sleep = 12</div><div class="line"></div><div class="line">while datetime.utcnow() &lt; max_end_time:</div><div class="line">    try:</div><div class="line">        action()</div><div class="line">        if action_desc:</div><div class="line">            display.debug(&apos;%s: %s success&apos; % (self._task.action, action_desc))</div><div class="line">        return</div><div class="line">    except Exception as e:</div><div class="line">        # Use exponential backoff with a max timout, plus a little bit of randomness</div><div class="line">        random_int = random.randint(0, 1000) / 1000</div><div class="line">        fail_sleep = 2 ** fail_count + random_int</div><div class="line">        if fail_sleep &gt; max_fail_sleep:</div><div class="line">            fail_sleep = max_fail_sleep + random_int</div><div class="line">        if action_desc:</div><div class="line">            display.debug(&quot;&#123;0&#125;: &#123;1&#125; fail &apos;&#123;2&#125;&apos;, retrying in &#123;3:.4&#125; seconds...&quot;.format(self._task.action, action_desc, to_text(e), fail_sleep))</div><div class="line">        fail_count += 1</div><div class="line">        time.sleep(fail_sleep)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;昨天看到 Ansible 关于 Linux reboot plugin  &lt;a href=&quot;https://www.ansible.com/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>剑指 Offer（三）</title>
    <link href="http://zdyxry.com/2018/11/25/%E5%89%91%E6%8C%87-Offer%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://zdyxry.com/2018/11/25/剑指-Offer（三）/</id>
    <published>2018-11-25T02:29:46.000Z</published>
    <updated>2018-12-01T01:49:08.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="打印1到最大的n位数"><a href="#打印1到最大的n位数" class="headerlink" title="打印1到最大的n位数"></a>打印1到最大的n位数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将数组转换为字符</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_number</span><span class="params">(number)</span>:</span></div><div class="line">    is_beginning_0 = <span class="keyword">True</span></div><div class="line">    num_len = len(number)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_len):</div><div class="line">        <span class="keyword">if</span> is_beginning_0 <span class="keyword">and</span> number[i] != <span class="string">"0"</span>:</div><div class="line">            is_beginning_0 = <span class="keyword">False</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_beginning_0:</div><div class="line">            print(<span class="string">"%c"</span> % number[i], end=<span class="string">""</span>)</div><div class="line">    print(<span class="string">""</span>)</div><div class="line"></div><div class="line"><span class="comment"># 边界条件：n &gt; 0</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_1_to_max_of_n1</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> </div><div class="line">    </div><div class="line">    number = [<span class="string">"0"</span>] * n</div><div class="line">    <span class="keyword">while</span> <span class="keyword">not</span> increment(number):</div><div class="line">        print_number(number)</div><div class="line"></div><div class="line"><span class="comment"># 从最后一位开始计算，如果 最后一位增长为10，则重置为 0，且进位；如果首位增长为 10，则溢出</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment</span><span class="params">(number)</span>:</span></div><div class="line">    is_carry = <span class="number">0</span></div><div class="line">    is_overflow = <span class="keyword">False</span></div><div class="line">    sum = <span class="number">0</span></div><div class="line">    num_len = len(number)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_len - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</div><div class="line">        sum = int(number[i]) + is_carry</div><div class="line">        <span class="keyword">if</span> i == num_len - <span class="number">1</span>:</div><div class="line">            sum += <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> sum &gt;= <span class="number">10</span>:</div><div class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</div><div class="line">                is_overflow = <span class="keyword">True</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                sum -= <span class="number">10</span></div><div class="line">                number[i] = str(sum)</div><div class="line">                is_carry = <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            number[i] = str(sum)</div><div class="line">            <span class="keyword">break</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> is_overflow</div><div class="line">        </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_1_to_max_of_n2</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span></div><div class="line">    </div><div class="line">    number = [<span class="string">"0"</span>] * n</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        number[<span class="number">0</span>] = str(i)</div><div class="line">        print_1_to_max_of_n_recursively(number, n, <span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 始终找到最后一位，并将其计算</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_1_to_max_of_n_recursively</span><span class="params">(number, num_len, index)</span>:</span></div><div class="line">    <span class="keyword">if</span> index == num_len - <span class="number">1</span>:</div><div class="line">        print_number(number)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        number[index + <span class="number">1</span>] = str(i)</div><div class="line">        print_1_to_max_of_n_recursively(number, num_len, index +<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line">print_number([<span class="string">"0"</span>, <span class="string">"1"</span>, <span class="string">"1"</span>])</div><div class="line">print_1_to_max_of_n1(<span class="number">2</span>)</div><div class="line">print_1_to_max_of_n2(<span class="number">2</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;打印1到最大的n位数&quot;&gt;&lt;a href=&quot;#打印1到最大的n位数&quot; class=&quot;headerlink&quot; title=&quot;打印1到最大的n位数&quot;&gt;&lt;/a&gt;打印1到最大的n位数&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
      <category term="alogrithms" scheme="http://zdyxry.com/tags/alogrithms/"/>
    
  </entry>
  
  <entry>
    <title>Ansible最佳实践</title>
    <link href="http://zdyxry.com/2018/11/24/Ansible%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://zdyxry.com/2018/11/24/Ansible最佳实践/</id>
    <published>2018-11-24T13:18:28.000Z</published>
    <updated>2018-12-01T01:49:08.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>说起来我真正负责过大批量服务器线上管理的时间，还是在16年负责运维的时候，那时候还都是通过 Shell 脚本来完成一些自动化的工作，当时觉得还不错，至少我觉得可定制化上还是很好的。  </p><p>目前负责公司产品中一部分功能目前是通过 Shell 来完成的，但是 Shell 脚本在使用中存在一些弊端，最近在用 Ansible 来重写这部分功能，在重写过程中感受负责，又爱又恨，也有一些疑惑，特此记录。</p><h2 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h2><p>相信大家都或多或少听过 Ansible,Puppet,SaltStack 等等自动管理工具，它们的功能都很强大，但使用起来又不简单，Ansible 可以说是这里面上手最快的一个。</p><p>这里我不讲述 Ansible 具体的使用规则，大家看文档就好，我讲下我常用的几个场景：</p><h3 id="批量查看、操作、拷贝"><a href="#批量查看、操作、拷贝" class="headerlink" title="批量查看、操作、拷贝"></a>批量查看、操作、拷贝</h3><p>无论是作为一名开发，还是测试、运维，应该都碰到过需要管理多台服务器的情况，比如我们想要查看一个集群中所有节点的负责情况，那么我们可以执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> $ ansible yiran-cluster -m raw -a <span class="string">'uptime'</span></div><div class="line">192.168.67.39 | SUCCESS | rc=0 &gt;&gt;</div><div class="line"> 20:23:24 up 3 days,  7:32,  4 users,  load average: 14.97, 13.81, 12.55</div><div class="line">Shared connection to 192.168.67.39 closed.</div><div class="line">192.168.67.40 | SUCCESS | rc=0 &gt;&gt;</div><div class="line"> 20:23:24 up 3 days,  7:32,  1 user,  load average: 11.79, 14.15, 14.81</div><div class="line">Shared connection to 192.168.67.40 closed.</div><div class="line">192.168.67.41 | SUCCESS | rc=0 &gt;&gt;</div><div class="line"> 20:23:24 up 6 days, 22:36,  1 user,  load average: 19.89, 20.10, 19.79</div><div class="line">Shared connection to 192.168.67.41 closed.</div></pre></td></tr></table></figure></p><p>如果我们想要拷贝自己的测试代码到所有的服务器上，我们可以执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible yiran-cluster -m synchronize -a <span class="string">'src=zbs_rest dest=/usr/lib/python2.7/site-packages/'</span></div></pre></td></tr></table></figure></p><h3 id="重复性操作"><a href="#重复性操作" class="headerlink" title="重复性操作"></a>重复性操作</h3><p>如果我们经常要查看某些集群（无监控）情况下的性能，我们可以编写一个 playbook，这个 playbook 专门用来收集集群的状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> $ cat cluster_status.yml</div><div class="line"><span class="comment">#!/usr/bin/env ansible-playbook</span></div><div class="line">---</div><div class="line">- name: cluster status</div><div class="line">  hosts: yiran-cluster</div><div class="line">  max_fail_percentage: 0</div><div class="line">  gather_facts: <span class="literal">false</span></div><div class="line">  tasks:</div><div class="line">     - name: uptime</div><div class="line">       raw: uptime</div><div class="line">       register: out</div><div class="line">     - debug: var=out.stdout_lines</div><div class="line"></div><div class="line">     - name: check services status</div><div class="line">       shell: /usr/share/tuna/script/control_all_services.sh --action=status --group=role</div><div class="line">       register: out</div><div class="line">       async: 300</div><div class="line">       poll: 2</div><div class="line">     - debug: var=out.stdout_lines</div><div class="line"></div><div class="line">     - name: memory status</div><div class="line">       raw: free -h</div><div class="line">       register: out</div><div class="line">     - debug: var=out.stdout_lines</div></pre></td></tr></table></figure></p><h2 id="Shell-Script-vs-Ansible"><a href="#Shell-Script-vs-Ansible" class="headerlink" title="Shell Script vs Ansible"></a>Shell Script vs Ansible</h2><p>通过上述的简单示例，可以体会到 Ansible 的强大，但是 Ansible 真的有那么好么？</p><p>明明几行  Shell 就可以搞定的事情，为什么一定要使用 Ansible 来做呢？<br>明明一个 Shell 脚本就可以完成的环境监察，为什么一定要使用 Ansible Playbook 来做呢？要知道 Playbook 编写语法虽然是 YAML，但是使用起来并不简单，有很多特殊的语法需要去注意，完全没有必要花费精力去学习一个新的工具去完成。</p><p>前两天看到 <a href="https://www.kawabangga.com/" target="_blank" rel="external">卡瓦邦噶</a> 介绍 Ansible的一篇博客中，提到了一篇 <a href="https://hvops.com/articles/ansible-vs-shell-scripts/" target="_blank" rel="external">Shell Script vs Ansible: Fight</a> 的文章（远古版真香），其中有一段总结，用来描述 Ansible 的优势，我加上了 Shell Script 的对比如下：   </p><table><thead><tr><th>Ansible</th><th>Shell Script</th><th>优胜者</th></tr></thead><tbody><tr><td>可以进行源码管理</td><td>Shell 也可以</td><td>-</td></tr><tr><td>幂等性</td><td>Shell 中需要额外做条件判断</td><td>Ansible</td></tr><tr><td>同时在多台服务器运行</td><td>Shell 可以通过 sshpass 编写脚本同时在多台运行</td><td>Ansible</td></tr><tr><td>验证服务器正确性</td><td>Shell 需要编写脚本收集更多信息</td><td>Ansible</td></tr><tr><td>定位部分服务器组</td><td>Shell 需要编写脚本对配置文件进行过滤筛选</td><td>Ansible</td></tr><tr><td>支持模板</td><td>-</td><td>Ansible</td></tr><tr><td>技术栈支持</td><td>-</td><td>Ansible</td></tr></tbody></table><p> 综合看上去，感觉 Ansible 太好了，上述情况下如果可以选择的话，我们都应该选择 Ansible 来做管理，事实上真的是这样么？ </p><p> 我也以为是这样，直到我通过 Ansible 重写 Shell 脚本。</p><h2 id="噩梦开始"><a href="#噩梦开始" class="headerlink" title="噩梦开始"></a>噩梦开始</h2><p> 由于产品功能需要处理多平台的、多场景的情况，该功能的 Shell 脚本大概有 4800 行左右。<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> --------------------------------------------------------------------------------</div><div class="line">Language                      files          blank        comment           code</div><div class="line">--------------------------------------------------------------------------------</div><div class="line">Bourne Shell                     57            990            154           4847</div><div class="line">Python                            2             48              0            201</div><div class="line">Bourne Again Shell                1              4              5             28</div></pre></td></tr></table></figure></p><p>我们找一个简单的脚本来看下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">master ✔ $ cat stage_mount_extent_disks.sh</div><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"></div><div class="line">cur=`dirname <span class="variable">$0</span>`</div><div class="line">. <span class="variable">$cur</span>/zbs_util.sh</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$#</span>"</span> -lt 1 ]]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &lt;disk1&gt; &lt;disk2&gt;"</span></div><div class="line">    <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">disks=$*</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"waiting service start ....."</span></div><div class="line"><span class="keyword">for</span> ((i = 0; i &lt; 30; i++)); <span class="keyword">do</span></div><div class="line">    <span class="keyword">if</span> pidof service; <span class="keyword">then</span></div><div class="line">        <span class="built_in">break</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        sleep 2</div><div class="line">    <span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"service started"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># mount partition</span></div><div class="line"><span class="keyword">for</span> disk <span class="keyword">in</span> <span class="variable">$&#123;disks[@]&#125;</span>; <span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"mount <span class="variable">$disk</span>"</span></div><div class="line">    <span class="variable">$cur</span>/mount_extent_disk.sh <span class="string">"/dev/<span class="variable">$disk</span>"</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p><p>这是一个很简单的脚本，首先我们判断了下输入参数，需要输入两块磁盘盘符，接下来等待服务启动后，我们调用另一个脚本进行磁盘的挂载，如果我们想要执行这个脚本，那么我们可以执行执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./stage_mount_extent_disks.sh sda sdb</div></pre></td></tr></table></figure></p><p>然后等待脚本执行结束就可以了，这里的 sda 和 sdb 是存在一个 json 文件中，我们使用 <code>jq</code> 命令可以很容易的获取到 json 文件中的执行磁盘。</p><p>那么我们在 Ansible Playbook 我们要怎么做？ </p><ol><li>读取配置文件，并将读取结果设置为参数 <code>myvar</code></li><li>解析 <code>myvar</code> 获取 extent disks list，注意，这里的解析语法是 JMESPath 的语法</li><li>将 extent disk list 转换为 extent disk string ，这里是因为如果调用 raw 模块，需要传递字符串</li><li>如果平台是 xen7 的话，执行 xen7 的脚本</li><li>如果平台不是 xen7，且是 halo 的话，执行 halo 脚本</li></ol><p>具体 Playbook 如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- name: mount extent disk</div><div class="line">  gather_facts: <span class="literal">false</span></div><div class="line">  hosts: master:storage</div><div class="line">  tasks:</div><div class="line">      - shell: cat /path/config.json</div><div class="line">        register: result</div><div class="line">      - set_fact:</div><div class="line">          myvar: <span class="string">"&#123;&#123; result.stdout | from_json &#125;&#125;"</span></div><div class="line"></div><div class="line">      - name: get all extent disk list</div><div class="line">        set_fact:</div><div class="line">          extent_disk_list: <span class="string">"&#123;&#123; myvar | json_query('disks[?function==`extent`][].drive') | list &#125;&#125;"</span></div><div class="line"></div><div class="line">      - name: get all extent disk string</div><div class="line">        set_fact:</div><div class="line">          extent_disk_string: <span class="string">"&#123;&#123; extent_disk_list | join(' ') &#125;&#125;"</span></div><div class="line"></div><div class="line">      - name: mount xen7 extent disk</div><div class="line">        raw: /usr/share/tuna/script/xen70/stage_mount_extent_disks.sh <span class="string">"&#123;&#123; extent_disk_string &#125;&#125;"</span></div><div class="line">        when: myvar.xen7 == True</div><div class="line">        register: out</div><div class="line">      - debug: var=out.stdout_lines</div><div class="line"></div><div class="line">      - name: mount halo extent disk</div><div class="line">        raw: /usr/share/tuna/script/halo/stage_mount_extent_disks.sh <span class="string">"&#123;&#123; extent_disk_string &#125;&#125;"</span></div><div class="line">        when: myvar.xen7 == False and myvar.halo == True</div><div class="line">        register: out</div><div class="line">      - debug: var=out.stdout_lines</div></pre></td></tr></table></figure></p><p>相信大家通过这个简单的示例发现一些问题，我总结了下：</p><ol><li>如果脚本中存在较多判断，不宜使用 Playbook 实现逻辑</li><li>如果脚本中存在部分参数解析功能，不宜使用 Playbook 实现逻辑</li><li>不要过度拆分 task，保证每个 task 完整性</li></ol><p>其实上面的 Playbook 我们完全可以写成这样：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- name: mount extent disk</div><div class="line">  gather_facts: <span class="literal">false</span></div><div class="line">  hosts: master:storage</div><div class="line">  tasks:</div><div class="line">      - name: mount  extent disk</div><div class="line">      <span class="comment"># 所有逻辑判断均在 stage_mount_extent_disks.sh 中完成</span></div><div class="line">        raw: /usr/share/tuna/script/stage_mount_extent_disks.sh <span class="string">"&#123;&#123; extent_disk_string &#125;&#125;"</span></div><div class="line">        register: out</div><div class="line">      - debug: var=out.stdout_lines</div></pre></td></tr></table></figure></p><p>Ansible 只作操作分发，减轻 Playbook 复杂性，虽然这会损失一部分幂等性，但是可以最简化的满足要求，同时执行，获取执行结果。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从个人使用上来说，Ansible 还是很好用的，至少它无需 Agent，SSH 连接等特性，使用起来很友好。<br>但是我们也不应该过分使用 Playbook，编写 Playbook 解析 json 花费了不少的时间，远不如直接在被执行脚本中完成的成本低。</p><p>Ansible 还有一些未能合理解决的问题，比如如何知道一个 Playbook 执行的总体进度？<br>如何获取执行的实时结果输出等。</p><p>如果我们只是普通的操作一些节点执行命令，获取信息，那么完全可以通过 sshpass，mmh 等命令完成，相对来说更方便。</p><p>希望随着自己的使用，能够更好的掌握使用 Ansible 的度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;说起来我真正负责过大批量服务器线上管理的时间，还是在16年负责运维的时候，那时候还都是通过 Shell 脚本来完成一些自动化的工作，当时觉得
      
    
    </summary>
    
    
      <category term="Ansible" scheme="http://zdyxry.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer（二）</title>
    <link href="http://zdyxry.com/2018/11/20/%E5%89%91%E6%8C%87-Offer%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://zdyxry.com/2018/11/20/剑指-Offer（二）/</id>
    <published>2018-11-20T13:08:14.000Z</published>
    <updated>2018-11-20T13:10:21.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a>数值的整数次方</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</span></div><div class="line"><span class="comment"># 考虑边界情况，base = 0, exponent &lt; 0, exponent = 0 场景。</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">equal_zero</span><span class="params">(num)</span>:</span></div><div class="line">    <span class="keyword">if</span> abs(num - <span class="number">0.0</span>) &lt; <span class="number">0.0000001</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(base, exponent)</span>:</span></div><div class="line">    <span class="keyword">if</span> equal_zero(base):</div><div class="line">        result = <span class="keyword">False</span></div><div class="line">    <span class="keyword">if</span> exponent == <span class="number">0</span>:</div><div class="line">        result = <span class="number">1</span></div><div class="line">    result = power(base, abs(exponent) &gt;&gt; <span class="number">1</span>)</div><div class="line">    result *= result</div><div class="line">    <span class="keyword">if</span> abs(exponent) &amp; <span class="number">1</span> == <span class="number">1</span>:</div><div class="line">        result *= base</div><div class="line">    <span class="keyword">if</span> exponent &lt; <span class="number">0</span>:</div><div class="line">        result = <span class="number">1.0</span> / result</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line">power_value(<span class="number">2</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数值的整数次方&quot;&gt;&lt;a href=&quot;#数值的整数次方&quot; class=&quot;headerlink&quot; title=&quot;数值的整数次方&quot;&gt;&lt;/a&gt;数值的整数次方&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="alogrithms" scheme="http://zdyxry.com/tags/alogrithms/"/>
    
  </entry>
  
  <entry>
    <title>Traceroute 简易实现</title>
    <link href="http://zdyxry.com/2018/11/18/Traceroute-%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0/"/>
    <id>http://zdyxry.com/2018/11/18/Traceroute-简易实现/</id>
    <published>2018-11-18T04:33:35.000Z</published>
    <updated>2018-11-20T12:44:24.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在平时遇到网络问题时，我们通常会使用 <code>ping</code>,<code>route</code>,<code>ip</code> 等命令去 debug，当我们确定我们本机的网络配置及服务没有问题后，我通常会使用 <code>traceroute</code> 来判断网络走向。</p><p>最近公司搬家之后，整体网络架构进行了改进，随着配置的复杂化，稳定性相较于原来有了很大的下降，导致最近频繁使用 <code>traceroute</code>，一直使用它却不知道是怎么工作的，研究了一下，作为总结。</p><h2 id="Traceroute"><a href="#Traceroute" class="headerlink" title="Traceroute"></a>Traceroute</h2><p>先上维基百科的解释：</p><blockquote><p>traceroute，现代Linux系统称为tracepath，Windows系统称为tracert，是一种计算机网络工具。它可显示数据包在IP网络经过的路由器的IP地址。</p></blockquote><p>我们通常使用无需特殊配置，直接用 traceroute 加上我们的目标地址即可，如：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@yiran-workstation:~ </div><div class="line"> $ traceroute 192.168.16.1</div><div class="line">traceroute to 192.168.16.1 (192.168.16.1), 30 hops max, 60 byte packets</div><div class="line"> 1  gateway (192.168.8.1)  19.469 ms  19.089 ms  18.911 ms</div><div class="line"> 2  192.168.1.201 (192.168.1.201)  11.539 ms  11.423 ms  11.307 ms</div><div class="line"> 3  192.168.16.1 (192.168.16.1)  18.289 ms  18.184 ms  18.064 ms</div></pre></td></tr></table></figure><p>当我们想设置 TTL 数值时，我们可以使用 <code>-m</code> 参数:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@yiran-workstation:~ </div><div class="line"> $ traceroute 192.168.16.1 -m 2</div><div class="line">traceroute to 192.168.16.1 (192.168.16.1), 2 hops max, 60 byte packets</div><div class="line"> 1  gateway (192.168.8.1)  20.914 ms  20.700 ms  20.616 ms</div><div class="line"> 2  192.168.1.201 (192.168.1.201)  20.497 ms  20.465 ms  20.383 ms</div></pre></td></tr></table></figure></p><p>实现原理：</p><blockquote><p>主叫方首先发出 TTL=1 的数据包，第一个路由器将 TTL 减1得0后就不再继续转发此数据包，而是返回一个 ICMP 逾时报文，主叫方从逾时报文中即可提取出数据包所经过的第一个网关地址。然后又发出一个 TTL=2 的 ICMP 数据包，可获得第二个网关地址，依次递增 TTL 便获取了沿途所有网关地址。</p><p>需要注意的是，并不是所有网关都会如实返回 ICMP 超时报文。出于安全性考虑，大多数防火墙以及启用了防火墙功能的路由器缺省配置为不返回各种 ICMP 报文，其余路由器或交换机也可被管理员主动修改配置变为不返回 ICMP 报文。因此 Traceroute 程序不一定能拿全所有的沿途网关地址。所以，当某个 TTL 值的数据包得不到响应时，并不能停止这一追踪过程，程序仍然会把 TTL 递增而发出下一个数据包。一直达到默认或用参数指定的追踪限制（maximum_hops）才结束追踪。</p></blockquote><p>这里要说明一下，加入我们去 traceroute 最常用的 baidu.com，就会看到这个现象，traceroute 命令的结果中包含 <code>* * *</code> ，我也没有找到一个较为明确的解释，猜测这个节点禁止了 ping 或其他配置，无法返回 ICMP 超时报文，导致 traceroute 无法正常解析。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">master ✗ $ traceroute  baidu.com -m 20 </div><div class="line">traceroute to baidu.com (220.181.57.216), 20 hops max, 60 byte packets</div><div class="line"> 1  gateway (192.168.8.1)  18.535 ms  18.456 ms  29.185 ms</div><div class="line"> 2  10.1.1.1 (10.1.1.1)  6.599 ms  6.533 ms  6.378 ms</div><div class="line"> 3  106.38.14.1 (106.38.14.1)  28.707 ms  28.606 ms  28.514 ms</div><div class="line"> 4  5.0.142.219.broad.bj.bj.dynamic.163data.com.cn (219.142.0.5)  28.384 ms  28.305 ms  28.205 ms</div><div class="line"> 5  * * *</div><div class="line"> 6  36.110.244.46 (36.110.244.46)  37.131 ms  31.660 ms  31.489 ms</div><div class="line"> 7  * * *</div><div class="line"> 8  220.181.17.94 (220.181.17.94)  10.700 ms 220.181.17.146 (220.181.17.146)  10.511 ms 220.181.17.150 (220.181.17.150)  10.336 ms</div><div class="line"> 9  * * *</div><div class="line">10  * * *</div><div class="line">11  * * *</div><div class="line">12  * * *</div><div class="line">13  * * *</div><div class="line">14  * * *</div><div class="line">15  * * *</div><div class="line">16  * * *</div><div class="line">17  * * *</div><div class="line">18  * * *</div><div class="line">19  * * *</div><div class="line">20  * * *</div></pre></td></tr></table></figure><blockquote><p>依据上述原理，利用了 UDP 数据包的 Traceroute 程序在数据包到达真正的目的主机时，就可能因为该主机没有提供 UDP 服务而简单将数据包抛弃，并不返回任何信息。为了解决这个问题，Traceroute 故意使用了一个大于 30000 的端口号，因 UDP 协议规定端口号必须小于 30000 ，所以目标主机收到数据包后唯一能做的事就是返回一个“端口不可达”的 ICMP 报文，于是主叫方就将端口不可达报文当作跟踪结束的标志。</p></blockquote><h2 id="简易实现"><a href="#简易实现" class="headerlink" title="简易实现"></a>简易实现</h2><p>源地址： <a href="https://github.com/dnaeon/pytraceroute" target="_blank" rel="external">https://github.com/dnaeon/pytraceroute</a><br>对整个实现中最重要的部分做下注释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Copyright (c) 2015 Marin Atanasov Nikolov &lt;dnaeon@gmail.com&gt;</span></div><div class="line"><span class="comment"># All rights reserved.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Redistribution and use in source and binary forms, with or without</span></div><div class="line"><span class="comment"># modification, are permitted provided that the following conditions</span></div><div class="line"><span class="comment"># are met:</span></div><div class="line"><span class="comment"># 1. Redistributions of source code must retain the above copyright</span></div><div class="line"><span class="comment">#    notice, this list of conditions and the following disclaimer</span></div><div class="line"><span class="comment">#    in this position and unchanged.</span></div><div class="line"><span class="comment"># 2. Redistributions in binary form must reproduce the above copyright</span></div><div class="line"><span class="comment">#    notice, this list of conditions and the following disclaimer in the</span></div><div class="line"><span class="comment">#    documentation and/or other materials provided with the distribution.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR</span></div><div class="line"><span class="comment"># IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES</span></div><div class="line"><span class="comment"># OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.</span></div><div class="line"><span class="comment"># IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,</span></div><div class="line"><span class="comment"># INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT</span></div><div class="line"><span class="comment"># NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div><div class="line"><span class="comment"># DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div><div class="line"><span class="comment"># THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div><div class="line"><span class="comment"># (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF</span></div><div class="line"><span class="comment"># THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">Core module</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> struct</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">__all__ = [<span class="string">'Tracer'</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tracer</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dst, hops=<span class="number">30</span>)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        Initializes a new tracer object</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        Args:</span></div><div class="line"><span class="string">            dst  (str): Destination host to probe</span></div><div class="line"><span class="string">            hops (int): Max number of hops to probe</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        """</span></div><div class="line">        self.dst = dst <span class="comment"># 目标地址：域名或 IPv4 地址</span></div><div class="line">        self.hops = hops </div><div class="line">        self.ttl = <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="comment"># Pick up a random port in the range 33434-33534</span></div><div class="line">        <span class="comment"># 对应上述解释，随机选择一个 &gt; 30000 的端口用于连接</span></div><div class="line">        self.port = random.choice(range(<span class="number">33434</span>, <span class="number">33535</span>))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        Run the tracer</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        Raises:</span></div><div class="line"><span class="string">            IOError</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            dst_ip = socket.gethostbyname(self.dst) <span class="comment"># 解析域名</span></div><div class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</div><div class="line">            <span class="keyword">raise</span> IOError(<span class="string">'Unable to resolve &#123;&#125;: &#123;&#125;'</span>, self.dst, e)</div><div class="line"></div><div class="line">        text = <span class="string">'traceroute to &#123;&#125; (&#123;&#125;), &#123;&#125; hops max'</span>.format(</div><div class="line">            self.dst,</div><div class="line">            dst_ip,</div><div class="line">            self.hops</div><div class="line">        )</div><div class="line"></div><div class="line">        print(text)</div><div class="line"></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            startTimer = time.time()</div><div class="line">            receiver = self.create_receiver() <span class="comment"># 创建接收 socket 实例</span></div><div class="line">            sender = self.create_sender() <span class="comment"># 创建发送 socket 实例</span></div><div class="line">            sender.sendto(<span class="string">b''</span>, (self.dst, self.port)) <span class="comment"># 向目标地址指定端口发送报文</span></div><div class="line"></div><div class="line">            addr = <span class="keyword">None</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                data, addr = receiver.recvfrom(<span class="number">1024</span>) <span class="comment"># 获取发送 ICMP 超时报文，并解析地址</span></div><div class="line">                entTimer = time.time()</div><div class="line">            <span class="keyword">except</span> socket.error:</div><div class="line">                <span class="keyword">pass</span></div><div class="line">                <span class="comment"># raise IOError('Socket error: &#123;&#125;'.format(e))</span></div><div class="line">            <span class="keyword">finally</span>:</div><div class="line">                receiver.close()</div><div class="line">                sender.close()</div><div class="line"></div><div class="line">            <span class="keyword">if</span> addr: <span class="comment"># 如果获取到地址，则打印相应信息及用时</span></div><div class="line">                timeCost = round((entTimer - startTimer) * <span class="number">1000</span>, <span class="number">2</span>)</div><div class="line">                print(<span class="string">'&#123;:&lt;4&#125; &#123;&#125; &#123;&#125; ms'</span>.format(self.ttl, addr[<span class="number">0</span>]), timeCost)</div><div class="line">                <span class="keyword">if</span> addr[<span class="number">0</span>] == dst_ip:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(<span class="string">'&#123;:&lt;4&#125; *'</span>.format(self.ttl))</div><div class="line"></div><div class="line">            self.ttl += <span class="number">1</span> <span class="comment"># 增加 TTL，获取下一跳地址</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> self.ttl &gt; self.hops:</div><div class="line">                <span class="keyword">break</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_receiver</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        Creates a receiver socket</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        Returns:</span></div><div class="line"><span class="string">            A socket instance</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        Raises:</span></div><div class="line"><span class="string">            IOError</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        """</span></div><div class="line">        s = socket.socket(</div><div class="line">            family=socket.AF_INET, <span class="comment"># 指定 proto family 为 IPv4</span></div><div class="line">            type=socket.SOCK_RAW, <span class="comment"># 指定接收 socket 类型为 raw，这里是因为普通的 socket 类型无法处理 ICMP 报文</span></div><div class="line">            proto=socket.IPPROTO_ICMP <span class="comment"># 指定 socket 协议为 ICMP 协议，type 与 proto 需要特定的组合，不允许任意配置</span></div><div class="line">        )</div><div class="line"></div><div class="line">        timeout = struct.pack(<span class="string">"ll"</span>, <span class="number">5</span>, <span class="number">0</span>)</div><div class="line">        s.setsockopt(socket.SOL_SOCKET, socket.SO_RCVTIMEO, timeout)</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            s.bind((<span class="string">''</span>, self.port))</div><div class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</div><div class="line">            <span class="keyword">raise</span> IOError(<span class="string">'Unable to bind receiver socket: &#123;&#125;'</span>.format(e))</div><div class="line"></div><div class="line">        <span class="keyword">return</span> s</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_sender</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        Creates a sender socket</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        Returns:</span></div><div class="line"><span class="string">            A socket instance</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        """</span></div><div class="line">        s = socket.socket(</div><div class="line">            family=socket.AF_INET, <span class="comment"># 指定 proto family 为 IPv4</span></div><div class="line">            type=socket.SOCK_DGRAM, <span class="comment"># 指定发送的类型为 UDP，即发送广播消息</span></div><div class="line">            proto=socket.IPPROTO_UDP <span class="comment"># 指定协议为 IP UDP </span></div><div class="line">        )</div><div class="line"></div><div class="line">        s.setsockopt(socket.SOL_IP, socket.IP_TTL, self.ttl)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> s</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>了解了实现原理之后，希望之后排查网络问题应该也会得心应手一些吧。<br>也希望自己能更多的关注于 Why，而不是 How。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://dnaeon.github.io/traceroute-in-python/" target="_blank" rel="external">http://dnaeon.github.io/traceroute-in-python/</a></li><li><a href="https://www.nljb.net/default/SOCK_STREAM%E4%B8%8ESOCK_DGRAM%E7%9A%84%E5%8C%BA%E5%88%AB/" target="_blank" rel="external">https://www.nljb.net/default/SOCK_STREAM%E4%B8%8ESOCK_DGRAM%E7%9A%84%E5%8C%BA%E5%88%AB/</a></li><li><a href="https://stackoverflow.com/questions/1955198/when-is-ipproto-udp-required" target="_blank" rel="external">https://stackoverflow.com/questions/1955198/when-is-ipproto-udp-required</a></li><li><a href="https://blog.csdn.net/newnewman80/article/details/8000404" target="_blank" rel="external">https://blog.csdn.net/newnewman80/article/details/8000404</a></li><li><a href="http://www.zmonster.me/notes/tcp-ip-socket-in-c.html" target="_blank" rel="external">http://www.zmonster.me/notes/tcp-ip-socket-in-c.html</a></li><li><a href="http://courses.cs.vt.edu/cs4254/fall04/slides/raw_6.pdf" target="_blank" rel="external">http://courses.cs.vt.edu/cs4254/fall04/slides/raw_6.pdf</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在平时遇到网络问题时，我们通常会使用 &lt;code&gt;ping&lt;/code&gt;,&lt;code&gt;route&lt;/code&gt;,&lt;code&gt;ip&lt;/code
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://zdyxry.com/tags/Linux/"/>
    
      <category term="Network" scheme="http://zdyxry.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer（一）</title>
    <link href="http://zdyxry.com/2018/11/18/%E5%89%91%E6%8C%87-Offer%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://zdyxry.com/2018/11/18/剑指-Offer（一）/</id>
    <published>2018-11-18T04:23:07.000Z</published>
    <updated>2018-11-20T12:44:24.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-单实例模式"><a href="#Python-单实例模式" class="headerlink" title="Python 单实例模式"></a>Python 单实例模式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></div><div class="line">    _instances = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> cls._instances:</div><div class="line">            cls._instances[cls] = super(Singleton, cls).__new__(cls, *args, **kwargs)</div><div class="line">        <span class="keyword">return</span> cls._instances[cls]</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySingleton</span><span class="params">(Singleton)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val)</span>:</span></div><div class="line">        self.val = val</div><div class="line"></div><div class="line">a = MySingleton(<span class="number">1</span>)</div><div class="line">b = MySingleton(<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> a.val</div><div class="line"><span class="keyword">print</span> b.val</div></pre></td></tr></table></figure><h2 id="二维数组查找"><a href="#二维数组查找" class="headerlink" title="二维数组查找"></a>二维数组查找</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_num</span><span class="params">(matrix, num)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> matrix:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    rows = len(matrix)</div><div class="line">    cols = len(matrix[<span class="number">0</span>])</div><div class="line">    row, col = rows - <span class="number">1</span>, <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> row &gt;= <span class="number">0</span> <span class="keyword">or</span> col &lt;= cols <span class="number">-1</span>:</div><div class="line">        <span class="keyword">if</span> matrix[row][col] == num:</div><div class="line">            <span class="keyword">return</span> num</div><div class="line">        <span class="keyword">elif</span> matrix[row][col] &gt; num:</div><div class="line">            row -= <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            col += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">matrix = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</div><div class="line">          [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</div><div class="line">         ]</div><div class="line"><span class="keyword">print</span> find_num(matrix, <span class="number">7</span>)</div></pre></td></tr></table></figure><h2 id="打印链表"><a href="#打印链表" class="headerlink" title="打印链表"></a>打印链表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Links</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_links</span><span class="params">(links)</span>:</span></div><div class="line">    <span class="keyword">if</span> links:</div><div class="line">        print_links(links.next)</div><div class="line">        <span class="keyword">print</span> links.val</div><div class="line"></div><div class="line">links = Links(<span class="number">1</span>)</div><div class="line">links.next = Links(<span class="number">2</span>)</div><div class="line">links.next.next = Links(<span class="number">3</span>)</div><div class="line">print_links(links)</div></pre></td></tr></table></figure><h2 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 根据前序和中序遍历结果构建二叉树，遍历结果中不包含重复数值。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.left = <span class="keyword">None</span></div><div class="line">        self.right = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.root = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pre_traversal</span><span class="params">(self)</span>:</span></div><div class="line">        ret = []</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">traversal</span><span class="params">(head)</span>:</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</div><div class="line">                <span class="keyword">return</span></div><div class="line">            ret.append(head.val)</div><div class="line">            traversal(head.left)</div><div class="line">            traversal(head.right)</div><div class="line">        </div><div class="line">        traversal(self.root)</div><div class="line">        <span class="keyword">return</span> ret</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_traversal</span><span class="params">(self)</span>:</span></div><div class="line">        ret = []</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">traversal</span><span class="params">(head)</span>:</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</div><div class="line">                <span class="keyword">return</span> </div><div class="line">            traversal(head.left)</div><div class="line">            ret.append(head.val)</div><div class="line">            traversal(head.right)</div><div class="line">        </div><div class="line">        traversal(self.root)</div><div class="line">        <span class="keyword">return</span> ret</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_traversal</span><span class="params">(self)</span>:</span></div><div class="line">        ret = []</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">traversal</span><span class="params">(head)</span>:</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</div><div class="line">                <span class="keyword">return</span> </div><div class="line">            traversal(head.left)</div><div class="line">            traversal(head.right)</div><div class="line">            ret.append(head.val)</div><div class="line"></div><div class="line">        traversal(self.root)</div><div class="line">        <span class="keyword">return</span> ret</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">construct_tree</span><span class="params">(preorder=None, inorder=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> preorder <span class="keyword">or</span> <span class="keyword">not</span> inorder:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">    index = inorder.index(preorder[<span class="number">0</span>])</div><div class="line">    left = inorder[<span class="number">0</span>:index]</div><div class="line">    right = inorder[index + <span class="number">1</span>:]</div><div class="line">    root = TreeNode(preorder[<span class="number">0</span>])</div><div class="line">    root.left = construct_tree(preorder[<span class="number">1</span>:<span class="number">1</span>+len(left)], left)</div><div class="line">    root.right = construct_tree(preorder[-len(right):], right)</div><div class="line">    <span class="keyword">return</span> root</div><div class="line"></div><div class="line">t = Tree()</div><div class="line">root = construct_tree(preorder=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>],</div><div class="line">                      inorder=[<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>])</div><div class="line">t.root = root</div><div class="line"><span class="keyword">print</span> t.pre_traversal()</div><div class="line"><span class="keyword">print</span> t.in_traversal()</div><div class="line"><span class="keyword">print</span> t.post_traversal()</div></pre></td></tr></table></figure><h2 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_min</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    length = len(nums)</div><div class="line">    left, right = <span class="number">0</span>, length - <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> nums[right] &gt;= nums[left]:</div><div class="line">        <span class="keyword">if</span> right - left == <span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> nums[right]</div><div class="line">        mid = (left + right) / <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> nums[left] &lt;= nums[mid]:</div><div class="line">            left = mid</div><div class="line">        <span class="keyword">if</span> nums[right] &gt;= nums[mid]:</div><div class="line">            right = mid</div><div class="line">    <span class="keyword">return</span> nums[<span class="number">0</span>]</div><div class="line"></div><div class="line">nums = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</div><div class="line"><span class="keyword">print</span> find_min(nums)</div><div class="line">nums = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</div><div class="line"><span class="keyword">print</span> find_min(nums)</div></pre></td></tr></table></figure><h2 id="二进制中-1-的个数"><a href="#二进制中-1-的个数" class="headerlink" title="二进制中 1 的个数"></a>二进制中 1 的个数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_num_of_1</span><span class="params">(n)</span>:</span></div><div class="line">    ret = <span class="number">0</span></div><div class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</div><div class="line">        n = n &amp; <span class="number">0xffffffff</span></div><div class="line">    <span class="keyword">while</span> n:</div><div class="line">        ret += <span class="number">1</span></div><div class="line">        n = n &amp; (n - <span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> ret</div><div class="line"></div><div class="line">num = <span class="number">3</span></div><div class="line"><span class="keyword">print</span> find_num_of_1(num)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python-单实例模式&quot;&gt;&lt;a href=&quot;#Python-单实例模式&quot; class=&quot;headerlink&quot; title=&quot;Python 单实例模式&quot;&gt;&lt;/a&gt;Python 单实例模式&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;
      
    
    </summary>
    
    
      <category term="alogrithms" scheme="http://zdyxry.com/tags/alogrithms/"/>
    
  </entry>
  
</feed>
