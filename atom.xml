<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yiran&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zdyxry.github.io/"/>
  <updated>2022-08-28T04:18:55.827Z</updated>
  <id>https://zdyxry.github.io/</id>
  
  <author>
    <name>yiran</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何平(优）滑（雅）的抛弃 CentOS7</title>
    <link href="https://zdyxry.github.io/2022/08/28/%E5%A6%82%E4%BD%95%E5%8E%9F%E5%9C%B0%E5%8D%87%E7%BA%A7CentOS7/"/>
    <id>https://zdyxry.github.io/2022/08/28/如何原地升级CentOS7/</id>
    <published>2022-08-28T13:00:00.000Z</published>
    <updated>2022-08-28T04:18:55.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>CentOS 7 自身的生命周期截止到 2024年6月30日。在2020年底，CentOS 社区宣布修改现有的发布模式，将 CentOS 从作为 RHEL 的下游改为 CentOS Stream，即 RHEL 的上游，更导致 CentOS8的生命周期短的可怜，这让社区中原本就对 CentOS 不满的开发者/使用者不满，从而出现了抛弃 CentOS 转投其他发行版的情况。</p><p>大家选择使用 CentOS ，虽然都在说稳定，但是我理解更看重的是 RedHat 在身后背书，CentOS 作为 RHEL 的下游，所有的软件版本都是经过 RedHat 测试验证的，且后期维护也是有 RedHat 的身影在，不担心维护的问题。</p><p>CentOS 原有的模式也是有问题的，用户很难参与到 RHEL 的研发周期。用户发现了 CentOS 某个版本存在问题，想要给 CentOS 进行贡献，让 CentOS 下一个版本修复该问题。此时只有一条路，就是贡献给开源组件自身，但是这样也只是存在修复的可能，最终是否可能修复还是看 RedHat 开发人员的决定（毕竟 RHEL/CentOS 中存在大量开源组件自身不包含，但是 RHEL/CentOS 通过 rpm spec 中进行 Patch 的方式包含的 Patch）。在引入了 CentOS Stream 之后，用户就可以通过贡献给 CentOS 社区，来保证 CentOS 下一个版本包含该 Patch，至于 RHEL 是否包含，用户并不关心，那是 RedHat 关心的问题。</p><p>Fedora 更关注于上游社区最新的代码，包含最丰富的功能，作为先驱者；CentOS Stream 作为 RHEL 的上游，提供稳定可靠的持续交付版本，保证更多的贡献者可以参与进来；RHEL 给企业用户使用，有 RedHat 提供完整的维护服务。</p><p>在现有的模式下，CentOS Stream 已经与原有采用 CentOS 的用户初衷背离，已有的 CentOS7 用户需要寻找新的替代品，在国产化的浪潮下，选择的方向也发生了一定的变化。</p><h3 id="社区替代品"><a href="#社区替代品" class="headerlink" title="社区替代品"></a>社区替代品</h3><p>Rocky Linux</p><blockquote><p>Rocky Linux aims to function as a downstream build as CentOS had done previously, building releases after they have been added to the upstream vendor, not before.</p></blockquote><p>AlmaLinux</p><blockquote><p>AlmaLinux OS is replacing CentOS as the downstream rebuild of RedHat Enterprise Linux.</p></blockquote><p>在 CentOS 宣布策略改变之后，社区中出现了两个替代品，分别是 Rocky Linux 和 AlmaLinux，它俩的目的都是一样的，作为RHEL 的下游来构建发布，且发布模式和发布周期采用 CentOS 原有模式。</p><p>通过 AlmaLinux 官方提供的<a href="[https://wiki.almalinux.org/Comparison.html](https://wiki.almalinux.org/Comparison.html">发行版比较</a>)可以看到，AlmaLinux 和 Rocky Linux 两者对于用户来说没什么差别，如果一定要较真，那就是 AlmaLinux 大部分人员是来自 CloudLinux 公司，而 Rocky Linux 是 Greg 公司。</p><h3 id="国产替代品"><a href="#国产替代品" class="headerlink" title="国产替代品"></a>国产替代品</h3><p>Anolis OS（阿里巴巴）</p><blockquote><p>Anolis OS 8 是 OpenAnolis 社区推出的完全开源、中立、开放的发行版，它支持多计算架构，也面向云端场景优化，兼容 CentOS 软件生态。Anolis OS 8 旨在为广大开发者和运维人员提供稳定、高性能、安全、可靠、开源的操作系统服务。</p></blockquote><p>openEuler（华为）</p><blockquote><p>openEuler是一款开源操作系统。当前openEuler内核源于Linux，支持鲲鹏及其它多种处理器，能够充分释放计算芯片的潜能，是由全球开源贡献者构建的高效、稳定、安全的开源操作系统，适用于数据库、大数据、云计算、人工智能等应用场景。同时，openEuler是一个面向全球的操作系统开源社区，通过社区合作，打造创新平台，构建支持多处理器架构、统一和开放的操作系统，推动软硬件应用生态繁荣发展。</p></blockquote><p>银河麒麟操作系统</p><blockquote><p>银河麒麟高级服务器操作系统V10是针对企业级关键业务，适应虚拟化、云计算、大数据、工业互联网时代对主机系统可靠性、安全性、性能、扩展性和实时性等需求，依据CMMI5级标准研制的提供内生本质安全、云原生支持、自主平台深入优化、 高性能、易管理的新一代自主服务器操作系统</p></blockquote><p>在国产化浪潮下，如果产品需要满足信创标准，那么操作系统的选择需要考虑国产替代品，目前（个人了解）符合信创标准的操作系统只有银河麒麟，openEuler 和 Anolis OS 目前还无法完全通过信创评审。在这一系列的替代品中， Rocky Linux, AlmaLinux, Anolis OS 所采用的发布模式和版本控制方式，都维持 CentOS原有模式，即 8.1, 8.2, 8.3 发布方式。openEuler 和银河麒麟操作系统虽然也采用 RPM 作为包管理器并且大部分组件版本与社区中的 CentOS 8 相同，但是不能完全等价，这里需要注意。</p><h3 id="比较选择"><a href="#比较选择" class="headerlink" title="比较选择"></a>比较选择</h3><p>如果要满足信创要求，那么只能选择银河麒麟作为替代品；如果从使用角度考虑，选择 Rocky Linux/AlmaLinux/Anolis OS 是更好的选择，有良好的社区支持，版本控制也与 CentOS 保持一致，心智负担更低；如果从国产硬件支持考虑，openEuler 是不错的选择。</p><p>上述讨论的各个发行版，当前所采用的包管理器均为 RPM，所有软件均已 RPM 为粒度安装，在 RPM 之上，会存在 Yum/DNF 包含 RPM 依赖管理、冲突管理、升降级等功能的基于 RPM 的包管理器。其中 CentOS 7 系列所采用的基于RPM 的包管理器是 Yum，其他发行版当前维护版本所采用的基于 RPM 包管理器是 DNF(Dandified Yum)。</p><h2 id="升级转换"><a href="#升级转换" class="headerlink" title="升级转换"></a>升级转换</h2><p>在现有使用了 CentOS 7 的环境中，需要使用替代品将 CentOS 7 升级转换为目标发行版。</p><p>如果应用环境都是单体应用，且可以有下线维护时间，进行数据备份然后完整的重装 OS 是一个稳妥的选择。如果应用环境是集群，且大部分应用都已经容器化了，那么依次进行单节点重装 OS 需要认真测试验证，不同的发行版版本的默认系统参数可能存在差异，哪怕上层基础平台保证了版本一致（如 Kubernetes,containerd,runc 的版本一致），也可能导致异常情况。</p><p>如果选择不重装 OS，原地升级转换的话有两种方式：自动和手动。其中 Rocky Linux/AlmaLinux/Anolis OS 提供自动升级转换方式，openEuler 和银河麒麟可以采用手动转换方式。</p><h3 id="自动流程"><a href="#自动流程" class="headerlink" title="自动流程"></a>自动流程</h3><p>自动升级转换依赖于 <a href="[https://github.com/oamg/leapp](https://github.com/oamg/leapp">Leapp</a>)，Leapp 由 Redhat 员工开发的开源工具，Leapp 自身只是一个工作流框架，其中包含 Actor、Model、Message、Workflow 等概念，具体组件关系图如下，其中 workerflow 包含多个 phase，每个 phase 含有3个 stage：Before，Main，After，每个 stage 中包含多个 Actors，其中 Actors 之间没有严格的顺序，而是靠 Message 通信，Message 遵循 Model 的定义，如果 ActorA 依赖了 ActorB 产生的 MessageB，那么 ActorA 会在 ActorB 之后执行，没有 MessageB 依赖的 ActorC 会按照加载顺序执行，没有严格顺序依赖。</p><p>目前 Leapp 主要使用场景是用于 RedHat 系发行版升级、不同发行版之间的升级切换等。</p><p>在完整的升级流程中，使用统一定义的 Workflow，不同阶段（如预升级、升级、Firstboot）都是调用的同一个 Workflow，只是根据指定的不同的 Tag、参数来决定执行的 Phase 不同。</p><ul><li>预升级（preupgrade），进行环境信息的收集与检查，将检查结果以报告的形式提供给用户，这里进行的信息收集及检查项数量很大，包含了很多细节，除了包含一些基础组件的检查：CPU 架构、openssh 配置变更、PAM 模块变更、Driver 支持、NTP 变更等之外，还包含一些第三方应用的检查：SAP HANA、Memcached、宝塔等。</li><li>升级（upgrade），升级的主要动作，与预检查使用的是相同 Workflow。<ul><li>configuration_phase</li><li>FactsCollection</li><li>Checks</li><li>TargetTransactionFactsCollection，生成临时 minimal 环境，包含完整的目标版本的运行环境，用于使用目标版本的工具栈，比如 DNF、RPM 高级特性等，该环境还会用来生成下一步骤所需的 initramfs image</li><li>TargetTransactionCheck，通过上述生成的 minimal 环境，使用其中的 dnf 工具，dnf rhel-upgrade check 来检查当前节点是否可以进行升级</li><li>Reports</li><li>Download，升级所需软件包下载步骤， dnf rhel-upgrade download</li><li>InterimPreparation，生成下一步骤所需的 initramfs，在前述步骤中的minimal 环境中安装 dracut 相关工具包，<a href="https://github.com/oamg/leapp-repository/blob/master/repos/system_upgrade/common/actors/initramfs/upgradeinitramfsgenerator/files/generate-initram.sh" target="_blank" rel="noopener">使用 dracut</a> 生成 initramfs image，生成完成后调整系统启动项，将其置为第一个启动项</li></ul></li><li>临时环境升级（Interim Upgrade），真正执行 RPM 升级的步骤，与预检查使用的是相同的 Workflow<ul><li>在系统reboot 后，系统引导到前置步骤生成的 initramfs 中，系统正常引导，dracut hook 中，增加了两个 hook，分别是 <a href="https://github.com/oamg/leapp-repository/tree/master/repos/system_upgrade/common/actors/commonleappdracutmodules/files/dracut/85sys-upgrade-redhat" target="_blank" rel="noopener">85sys-upgrade-redhat</a> 和 <a href="https://github.com/oamg/leapp-repository/tree/master/repos/system_upgrade/common/actors/commonleappdracutmodules/files/dracut/90sys-upgrade" target="_blank" rel="noopener">90sys-upgrade</a>， 其中 85 是真正执行节点软件包升级的动作(leapp upgrade –resume），90 配置 systemd upgrade unit （与重启相关）</li><li>InitRamStart，移除启动项设置</li><li>LateTests</li><li>Preparation</li><li>RPMUpgrade，dnf rhel-upgrade upgrade 升级 RPM</li><li>Applications</li><li>ThirdPartyApplications</li><li>Finalization</li></ul></li><li>升级后动作（Firstboot），系统升级完成会，会自动 reboot 进入到目标版本系统中，此时会执行 Firstboot 阶段，在执行完成后，系统升级完成<ul><li>FirstBoot，执行清理动作，修改部分配置（NM）等</li></ul></li></ul><p>完整升级流程共执行 4次 Workflow，其中采用临时环境执行升级动作的目的是：升级动作执行工具链是目标环境对应版本的工具链。</p><h3 id="自动实现方式"><a href="#自动实现方式" class="headerlink" title="自动实现方式"></a>自动实现方式</h3><p>项目地址列表：</p><ul><li><a href="https://github.com/oamg/leapp" target="_blank" rel="noopener">https://github.com/oamg/leapp</a></li><li><a href="https://github.com/oamg/leapp-repository" target="_blank" rel="noopener">https://github.com/oamg/leapp-repository</a></li><li><a href="https://github.com/AlmaLinux/leapp-data" target="_blank" rel="noopener">https://github.com/AlmaLinux/leapp-data</a></li></ul><p>其中 leapp 是框架自身，leapp-repository 是 Leapp 的应用实现，也就是升级中所执行的 Actor 实现，leapp-data 是升级中所用到的基础配置信息。不同发行版会维护自己的 leapp-repository，比如Anolis OS 就维护了自己的 Git 仓库（在 Gitee 上），并针对性的增加了自己的检查项。在 Leapp 的架构中，因为最终的应用会以独立的插架形式安装，所以 Python 的 syspath 可能会发生变化，在查看代码的时候需要对应的修改一下路径地址。以 NTP 检查为例：</p><p>NTP 检查的 Actor 实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from leapp.actors <span class="keyword">import</span> Actor</span><br><span class="line">from leapp.libraries.actor.checkntp <span class="keyword">import</span> check_ntp</span><br><span class="line">from leapp.models <span class="keyword">import</span> InstalledRedHatSignedRPM, NtpMigrationDecision, Report</span><br><span class="line">from leapp.tags <span class="keyword">import</span> ChecksPhaseTag, IPUWorkflowTag</span><br><span class="line"></span><br><span class="line">class CheckNtp(Actor):</span><br><span class="line">    <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    Check if ntp and/or ntpdate configuration needs to be migrated.</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line">    name = <span class="string">'check_ntp'</span></span><br><span class="line">    consumes = (InstalledRedHatSignedRPM,)</span><br><span class="line">    produces = (Report, NtpMigrationDecision)</span><br><span class="line">    tags = (ChecksPhaseTag, IPUWorkflowTag)</span><br><span class="line"></span><br><span class="line">    def process(self):</span><br><span class="line">        installed_packages = set()</span><br><span class="line"></span><br><span class="line">        signed_rpms = self.consume(InstalledRedHatSignedRPM)</span><br><span class="line">        <span class="keyword">for</span> rpm_pkgs in signed_rpms:</span><br><span class="line">            <span class="keyword">for</span> pkg in rpm_pkgs.items:</span><br><span class="line">                installed_packages.add(pkg.name)</span><br><span class="line"></span><br><span class="line">        self.produce(check_ntp(installed_packages))</span><br></pre></td></tr></table></figure><p> Actor 中调用的 <code>check_ntp</code> 函数实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># Check services from the ntp packages <span class="keyword">for</span> migration</span><br><span class="line">def check_ntp(installed_packages):</span><br><span class="line">    service_data = [(<span class="string">'ntpd'</span>, <span class="string">'ntp'</span>, <span class="string">'/etc/ntp.conf'</span>),</span><br><span class="line">                    (<span class="string">'ntpdate'</span>, <span class="string">'ntpdate'</span>, <span class="string">'/etc/ntp/step-tickers'</span>),</span><br><span class="line">                    (<span class="string">'ntp-wait'</span>, <span class="string">'ntp-perl'</span>, None)]</span><br><span class="line"></span><br><span class="line">    migrate_services = []</span><br><span class="line">    migrate_configs = []</span><br><span class="line">    <span class="keyword">for</span> service, <span class="keyword">package</span>, main_config in service_data:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">package</span> in installed_packages and \</span><br><span class="line">                check_service(<span class="string">'&#123;&#125;.service'</span>.format(service)) and \</span><br><span class="line">                (not main_config or is_file(main_config)):</span><br><span class="line">            migrate_services.<span class="built_in">append</span>(service)</span><br><span class="line">            <span class="keyword">if</span> main_config:</span><br><span class="line">                migrate_configs.<span class="built_in">append</span>(service)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> migrate_configs:</span><br><span class="line">        reporting.create_report([</span><br><span class="line">            reporting.Title(<span class="string">'&#123;&#125; configuration will be migrated'</span>.format(<span class="string">' and '</span>.join(migrate_configs))),</span><br><span class="line">            reporting.Summary(<span class="string">'&#123;&#125; service(s) detected to be enabled and active'</span>.format(<span class="string">', '</span>.join(migrate_services))),</span><br><span class="line">            reporting.Severity(reporting.Severity.LOW),</span><br><span class="line">            reporting.Groups([reporting.Groups.SERVICES, reporting.Groups.TIME_MANAGEMENT]),</span><br><span class="line">        ] + related)</span><br><span class="line"></span><br><span class="line">        # Save configuration files that will be renamed in the upgrade</span><br><span class="line">        config_tgz64 = get_tgz64(files)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        api.current_logger().info(<span class="string">'ntpd/ntpdate configuration will not be migrated'</span>)</span><br><span class="line">        migrate_services = []</span><br><span class="line">        config_tgz64 = <span class="string">''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return NtpMigrationDecision(migrate_services=migrate_services, config_tgz64=config_tgz64)</span></span><br></pre></td></tr></table></figure><h3 id="手动流程"><a href="#手动流程" class="headerlink" title="手动流程"></a>手动流程</h3><p>对于 Linux 发行版来说，整体是由无数个 RPM 组成的，最终系统中看到的最小粒度就是 RPM，我们可以通过 RPM 的升级来完成整体的发行版的升级变更。但是对于部分 RPM 来说，RPM 之间的依赖阻碍了我们无法通过依次升级部分 RPM 的方式来完成完整的升级替换，其中一些关键组件，如 glibc、glib2、openssl 等等都是强依赖的，我们必须要找到一个方式来完成整体的升级。在 Yum 中，存在 <code>distribution-synchronization</code> 命令用来同步当前 OS 中所有的 RPM到目标 Repository 中的版本，但是用 Yum 可能会存在无法识别 rpmlib 的情况。RPM 作为基础包管理器，自身会存在部分高级特性以 rpmlib 的依赖形式提供，如果当前系统的包管理器无法识别 rpmlib，那么就会在同步过程中出现无法解决的依赖冲突。</p><p>举例：目标 RPM 为 dnf-4.2.23-6.oe1.noarch.rpm ，升级提示依赖 rpmlib(RichDependencies) &lt;= 4.12.0-1 冲突。这是因为 dnf-4.2.23 这个 RPM 在构建的阶段，所使用的 rpm 环境（可能是在 openEuler 20.03 或更高版本）比当前 OS 的 RPM 版本（CentOS 7）高，所以当前 rpm 无法满足这个依赖条件。</p><p>我们可以使用 DNF 的 <code>distro-sync</code> 并配合部分的 RPM 修改，来完成手动升级转换。流程如下：</p><ul><li>将当前 CentOS7 升级到 CentOS 7.x 系列最新版本；</li><li>停止节点上运行的所有应用</li><li>配置 CentOS7 Repository ，安装 DNF（DNF依赖于 glib2 的执行版本，但是未在 spec 中声明，需要单独升级 glib2）</li><li>移除 Yum 管理器，防止与 DNF 产生冲突</li><li>配置目标发行版 Repository</li><li>使用 <code>dnf distro-sync</code> 进行升级转换</li><li>使用 <code>dnf remove</code> 移除无用 RPM</li><li>重启主机生效</li></ul><h3 id="手动实现方式"><a href="#手动实现方式" class="headerlink" title="手动实现方式"></a>手动实现方式</h3><p>当前 CentOS7 包管理器是 Yum，在目标版本中包管理器是 DNF，在通过 Yum 安装 DNF ，在保证 Yum(DNF) Repository 配置是目标版本的前提下，使用 <code>dnf distro-sync</code> 命令来进行 RPM 的升级和同步，该命令会将当前 OS 已经安装的 RPM 与 Yum Repository 中的 RPM 进行匹配。 RPM 版本匹配存在以下几种情况：</p><ul><li>当前 RPM 版本低于目标 Repository 中包含的 RPM版本，则会升级；</li><li>当前 RPM 版本高于目标 Repository 中包含的 RPM 版本，则会降级；</li><li>当前 RPM 被目标 Repository 中包含的 RPM 所替代（指定 Obsolete），则会安装新 RPM，原有 RPM 被卸载（替代）；</li><li>当前 RPM 版本与目标 Repository 中包含的 RPM 版本相同，但 dist 等其他 RPM 元数据不同，则会重新安装；</li><li>当前 RPM 是被其他 RPM 依赖引入的，但是其他 RPM 已经被替代，则该 RPM 会被卸载；</li><li>当前 RPM 在目标 Repository 中不包含，则不会进行处理；</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过自动或者手动的方式，我们可以原地将 CentOS 7 升级转换为我们想要的目标发行版。社区的 Rocky Linux/AlmaLinux/Anolis OS 可以采用自动的方式完成 ，国产非等价替代的 openEuler 可以采用控制 Repository 的方式手动完成，减少发行版变更带来的工作量。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/upgrading_from_rhel_7_to_rhel_8/index" target="_blank" rel="noopener">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/upgrading_from_rhel_7_to_rhel_8/index</a></li><li><a href="https://www.google.com/url?q=https://www.itzgeek.com/how-tos/linux/centos-how-tos/how-to-upgrade-centos-7-to-rocky-linux-8.html&amp;sa=D&amp;source=docs&amp;ust=1661663555017475&amp;usg=AOvVaw1uCCWoVaNbLfVkE6paJqA5" target="_blank" rel="noopener">https://www.google.com/url?q=https://www.itzgeek.com/how-tos/linux/centos-how-tos/how-to-upgrade-centos-7-to-rocky-linux-8.html&amp;sa=D&amp;source=docs&amp;ust=1661663555017475&amp;usg=AOvVaw1uCCWoVaNbLfVkE6paJqA5</a></li><li><a href="https://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/RPM_Guide/ch05s02.html" target="_blank" rel="noopener">https://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/RPM_Guide/ch05s02.html</a></li><li><a href="https://copyprogramming.com/howto/rpmlib-filedigests-dependency-error-on-suse" target="_blank" rel="noopener">https://copyprogramming.com/howto/rpmlib-filedigests-dependency-error-on-suse</a></li><li><a href="https://lists.fedoraproject.org/archives/list/devel@lists.fedoraproject.org/thread/VVVD6QQUARKZJ5RBV46IQBYMSKYPT4YO/" target="_blank" rel="noopener">https://lists.fedoraproject.org/archives/list/devel@lists.fedoraproject.org/thread/VVVD6QQUARKZJ5RBV46IQBYMSKYPT4YO/</a></li><li><a href="https://github.com/uyuni-project/uyuni/issues/4000" target="_blank" rel="noopener">https://github.com/uyuni-project/uyuni/issues/4000</a></li></ul>]]></content>
    
    <summary type="html">
    
      将 CentOS 7 原地升级转换为 Rocky Linux/AlmaLinux/Anolis OS/openEuler。
    
    </summary>
    
    
      <category term="Linux" scheme="https://zdyxry.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-08-28</title>
    <link href="https://zdyxry.github.io/2022/08/28/Weekly-Issue-2022-08-28/"/>
    <id>https://zdyxry.github.io/2022/08/28/Weekly-Issue-2022-08-28/</id>
    <published>2022-08-28T10:00:00.000Z</published>
    <updated>2022-08-28T04:18:55.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://speakerdeck.com/suiong_ng/steam-deck-linux-container-and-the-arch-community" target="_blank" rel="noopener">Steam Deck, Linux Container and the Arch Community</a></p><p>关于 [[Steam Deck]] OS 的介绍，底层是 [[Arch]] Linux，采用的是 A/B 升级方式，应用采用 [[Flatpak]] 方式进行安装升级(保证安全性)。现在关于这种 OS 比较轻，应用采用容器化的模式应该是很成熟了。</p><hr><p><a href="https://www.software.com/reports/code-time-report" target="_blank" rel="noopener">Global Code Time Report</a></p><p>编码时间报告。平均每天编码时间少于 1 小时，周三是编码时间最多的，很少有开发人员每天编码时间超过 2 小时。</p><hr><p><a href="https://www.netmeister.org/blog/ops-lessons.html" target="_blank" rel="noopener">(A few) Ops Lessons We All Learn The Hard Way</a></p><p>一些“经验”教训。比如：在某个你没有在意过的服务，会解析 DNS来完成某项工作。关掉 TCP 53 可能会有奇怪的事情发生。正在查看的源代码不是在生产中运行的代码。如果一周内没有完成故障复盘，那有可能永远也无法完成。没有人知道你在做什么。</p><hr><p><a href="https://www.usenix.org/conference/fast16/technical-sessions/presentation/harter" target="_blank" rel="noopener">Slacker: Fast Distribution with Lazy Docker Containers</a></p><p>76%的时间花费在镜像的拉取。容器真正运行需要的有效数据只占用镜像大小的 6%。</p><p>镜像大小中，低层级(&lt;9)的数据占到了镜像大小的一半以上。</p><hr><p><a href="https://blog.tianfeiyu.com/2022/06/30/kubernetes_descheduler/" target="_blank" rel="noopener">Kubernetes 中 Descheduler 组件的使用与扩展</a></p><p>Descheduler 通过触发 Pod 的驱逐，来保证集群内资源分布均衡，达到 DRS效果。作者提出了 Descheduler 改进后的评估方式。</p><hr><p><a href="https://endtimes.dev/why-your-website-should-be-under-14kb-in-size/" target="_blank" rel="noopener">WHY YOUR WEBSITE SHOULD BE UNDER 14KB IN SIZE</a></p><p>将网页大小保持在 14KB 以下可以保证加载速度。</p><p>大多数服务器 TCP 慢启动算法从发送 10 个 TCP 数据包开始。TCP 数据包的最大大小为<code>1500 bytes</code>.</p><p>这个最大值不是由 TCP 规范设置的，它来自<a href="https://en.wikipedia.org/wiki/Ethernet_frame" target="_blank" rel="noopener">以太网标准</a>。每个 TCP 数据包在其标头中使用<strong>40 个字节</strong><a href="https://en.wikipedia.org/wiki/IPv4#Packet_structure" target="_blank" rel="noopener">——16 个字节用于 IP</a>，另外<a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure" target="_blank" rel="noopener">24 个字节用于 TCP</a>。每个 TCP 数据包剩下<strong>1460 个字节。</strong><code>10 x 1460 = 14600 bytes</code>或大约 14kB。 [[QUIC]] 同样。</p><hr><p><a href="https://www.lastweekinaws.com/blog/sagemaker_is_responsible_for_my_surprise_bill/" target="_blank" rel="noopener">Amazon SageMaker Is Responsible for My Surprise Bill</a></p><p>AWS 账单真的太复杂了，复杂到我不去使用它。</p><hr><p><a href="https://www.infoworld.com/article/3669477/devs-don-t-want-to-do-ops.html" target="_blank" rel="noopener">Devs don’t want to do ops</a></p><p>关于开发人员和运维人员的讨论。事实上，根据<a href="https://hello-tanzu.vmware.com/state-of-kubernetes-2022/" target="_blank" rel="noopener">VMware 的《2022 年 Kubernetes 现状》报告</a>，776 名受访者中有 54% 的人表示，更好的开发人员效率是采用 Kubernetes 的关键原因，超过三分之一（37%）的人表示他们希望提高运维效率。</p><hr><p><a href="https://matt-rickard.com/the-value-is-in-the-api" target="_blank" rel="noopener">The Value is in the API</a></p><p>关注于接口设计比关注实现更重要。</p><hr><p><a href="https://matt-rickard.com/developer-velocity-checklist" target="_blank" rel="noopener">Designing Developer Velocity</a></p><p>如何提升开发效率，通常大家会从使用角度来进行分析，作者列出了一些最佳实践。</p><hr><p><a href="https://shkspr.mobi/blog/2022/08/the-point-of-a-dashboard-isnt-to-use-a-dashboard/" target="_blank" rel="noopener">The point of a dashboard isn’t to use a dashboard</a></p><p>Dashboard 的目的是可以让系统的所有组件都可以提供数据访问接口，让你知道你可以掌控这些原始数据。</p><hr><p><a href="https://datree.io/resources/kubernetes-readiness-and-liveness-probes-best-practices" target="_blank" rel="noopener">6 Best Practices for Effective Readiness and Liveness Probes</a></p><p>关于 [[kubernetes]] 的 [[Readiness]] 和 [[Liveness]] 最佳实践。</p><p>根据应用实际情况适当的调整参数：<code>initialDelaySeconds</code>，<code>timeoutSeconds</code>, <code>periodSeconds</code>, <code>successThreshold</code>, <code>failureThreshold</code></p><p>不要只检测 HTTP 200 返回码，应该检查应用所有的依赖，如数据库连接，缓存连接。</p><hr><p><a href="https://freeman.vc/notes/falling-for-kubernetes" target="_blank" rel="noopener">Falling for Kubernetes</a></p><p>有时候在公有云使用 [[kubernetes]] 服务是一个更好的选择，但是这个前提是有人帮你维护 [[kubernetes]]，如果是私有环境，维护应该还是一个大问题。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://xiaowenz.com/blog/2022/08/finance-management/" target="_blank" rel="noopener">不记账的个人财务管理说明书</a></p><p>个人日常会记录自己的每笔开销，每个月固定时间也会进行二次校正。但是我没有真正的进行预算的控制，只是每个月大概有个心理预期，可以尝试一下明确自己各项开销的预算设置，尝试一下。</p><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《非常律师禹英禑》，前半部很好，后半部不太行，父母的情感纠葛感觉完全没有必要，男主的存在或者动机显得有些突兀。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-08-21</title>
    <link href="https://zdyxry.github.io/2022/08/21/Weekly-Issue-2022-08-21/"/>
    <id>https://zdyxry.github.io/2022/08/21/Weekly-Issue-2022-08-21/</id>
    <published>2022-08-21T23:00:00.000Z</published>
    <updated>2022-08-28T04:18:55.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://linux.cn/article-14927-1.html" target="_blank" rel="noopener">与 CentOS 社区委员对话后 CentOS 时代</a></p><p>[[centos]] stream 之前的阶段，用户很难参与到 [[RHEL]] 的研发阶段，无法直接通过 [[centos]] 贡献代码，来保证下一个版本的 [[centos]] 包含自己所发现的问题修复，只能通过贡献给组件自身，然后由 RedHat 开发人员决定是否包含在下一个版本中。在 [[centos stream]] 之后的阶段，用户可以直接贡献给 [[centos]]，保证 [[centos]] 包含问题修复，至于 [[RHEL]] 是否修复，由 RedHat 自身决定。</p><p><strong>关于 Fedora、Stream，还有 RHEL 未来的发展计划是什么？</strong></p><hr><p><a href="https://chinese.catchen.me/2022/08/interview-question-ship-new-feature-or-refactor-old-code.html?utm_source=dlvr.it&amp;utm_medium=feed&amp;utm_campaign=catchen" target="_blank" rel="noopener">面试题：开发新功能和重构老代码之间怎么选？</a></p><p>对于所有商业公司来说，第一原理永远是商业，不是产品也不是技术。</p><hr><p><a href="https://coolshell.cn/articles/10804.html" target="_blank" rel="noopener">X-Y PROBLEM</a></p><p>1）有人想解决问题X2）他觉得Y可能是解决X问题的方法3）但是他不知道Y应该怎么做4）于是他去问别人Y应该怎么做？<strong>没有去问怎么解决问题X，而是去问解决方案Y应该怎么去实现和操作</strong>。<br>X-Y Problem最大的严重的问题就是：**在一个根本错误的方向上浪费他人大量的时间和精力。</p><hr><p><a href="https://www.hashicorp.com/blog/nomad-kubernetes-a-pragmatic-look-at-choosing-orchestrators" target="_blank" rel="noopener">Nomad, Kubernetes, and a Pragmatic Look at Choosing Orchestrators</a></p><p>什么场景下使用 Nomad，什么场景下使用 Kubernetes？</p><hr><p><a href="https://www.kawabangga.com/posts/4794" target="_blank" rel="noopener">用 Wireshark 分析 TCP 吞吐瓶颈</a></p><p>手把手教学</p><hr><p><a href="https://www.raychase.net/7087" target="_blank" rel="noopener">常见分布式应用系统设计图解（十四）：日志系统</a></p><p>日志系统组件设计。</p><hr><p><a href="https://blog.danslimmon.com/2019/05/03/no-observability-without-theory/" target="_blank" rel="noopener">No observability without theory</a></p><ul><li>Data is just data until theory makes it signal.The next time you need to build an observable system, or make a system more observable, take the time to consider not just what data the system produces, but how to surface a coherent theory of the system’s workings. Remember that observability is about delivering <em>meaning</em>, not just data.</li></ul><p>理论和数据是互相影响的关系，无论是缺少理论还是缺少数据，都无法让我们对系统进行很好的观测。在创建图表时，需要明确的知道这个图表的含义以及数值波动所产生的影响。在创建报警条目时，除了产生报警，还应该显示对应的图表和操作说明。</p><hr><p><a href="https://doordash.engineering/2022/08/09/how-to-handle-kubernetes-health-checks/" target="_blank" rel="noopener">How to Handle Kubernetes Health Checks</a></p><p>一次因为 K8s 健康检查错误配置导致的事故复盘。作者使用 Spring Boot 框架的默认健康检查配置作为应用的检查，有些与应用无关的异常导致了应用健康检查不通过，进而导致应用程序 Pod 被干掉。</p><p>应用默认的 Metric,Tracing, Log 都没有健康检查的记录，导致排查起来很困难，最终通过eBPF agent 的日志来辅助排查。</p><hr><p><a href="https://blog.symops.com/2022/08/10/pay-for-continuous-integration/" target="_blank" rel="noopener">SHOULD YOU PAY FOR CI/CD IN 2022?</a></p><p>我们是否应该为 CI/CD 付费？文中介绍了 CI/CD 的发展，提到自建 CI/CD 的维护工作是隐形的，我们很难准确的评估这部分的成本到底有多大。</p><hr><p><a href="https://carlosbecker.dev/posts/ssh-tips-and-tricks/" target="_blank" rel="noopener">SSH Tips and Tricks</a></p><p>关于 SSH 的一些技巧，其中<code>ControlMaster</code> 和 <code>ServerAliveInterval</code> 很有用。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://about.gitlab.com/handbook/leadership/1-1/#transitioning-1-1s" target="_blank" rel="noopener">The 1-1 Agenda</a></p><p>[[Gitlab]] 关于 1-1 的介绍。个人1-1 次数很少，每次也不知道聊些什么。</p><hr><p><a href="https://daily.zhihu.com/story/9751840" target="_blank" rel="noopener">这可能是知乎最全的一篇中东烤肉介绍</a></p><p>吃（虽然感觉烤肉好像味道都差不多）。</p><hr><p><a href="https://geekplux.com/newsletters/28" target="_blank" rel="noopener">社交网络名存实亡 -#28</a></p><p>我更在意的是人，是能真正产生对话的、能够进行美好事物分享的人。我的微信朋友圈是我认真维护的，大部分屏蔽掉了，剩下的都是会分享生活的，比如晒娃的、游玩的、分享想法的。“朋友”圈应该是朋友，不应该是一个圈。</p><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《分手的决心》</p><p>一部很美好的爱情电影。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-08-14</title>
    <link href="https://zdyxry.github.io/2022/08/14/Weekly-Issue-2022-08-14/"/>
    <id>https://zdyxry.github.io/2022/08/14/Weekly-Issue-2022-08-14/</id>
    <published>2022-08-14T13:00:00.000Z</published>
    <updated>2022-08-28T04:18:55.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://xuanwo.io/reports/2022-31/" target="_blank" rel="noopener">2022-31: Databend 的工程效率实践</a></p><p>[[Databend]] 效率工程介绍，使用 SaaS 来完成大部分工作，Self Host Github Runner 尽量使用 [[AWS]] 内部服务，来减免流量费用。</p><p>效率工程体会：</p><ul><li>摆正定位</li><li>渐进变更</li><li>公开透明</li></ul><hr><p><a href="https://eng.lyft.com/improving-the-experience-of-making-envoy-route-changes-2a25dc8e1d44" target="_blank" rel="noopener">Improving the Experience of Making Envoy Route Changes</a></p><p>[[Lyft]] 针对 [[envoy]] 配置方式进行的改进，原有存在的问题：</p><p>原有路由配置使用[[Jinja]] 模版进行维护，无法进行很好的语法检查和验证，现已替换为 [[Golang]]</p><p>原有 [[envoy]] API 在配置平面和控制平面都被引用，当 [[envoy]] 升级时，都需要考虑兼容性问题，现在只在控制平面引用</p><p>原有<a href="https://www.envoyproxy.io/docs/envoy/latest/operations/tools/route_table_check_tool#route-table-check-tool" target="_blank" rel="noopener">Route table check tool</a> 无法进行很好的分发（为啥一个 binary 会不好分发呢？），改为内部检查工具，并添加了 CI 检测结果。</p><hr><p><a href="https://www.manjusaka.blog/posts/2022/08/07/A-simple-introduction-about-cpu-and-memory-limit-in-docker/" target="_blank" rel="noopener">容器 CPU 和 Memory 限制行为简述</a></p><p>关于 CPU 和 Memory cgroup 基本配置参数介绍。</p><hr><p><a href="https://www.uber.com/en-SG/blog/avoiding-cpu-throttling-in-a-containerized-environment/" target="_blank" rel="noopener">Avoiding CPU Throttling in a Containerized Environment</a></p><p>[[cgroup]] 使用 cpuset 来避免 CPU throttling 。</p><hr><p><a href="https://blog.ediri.io/how-to-remove-a-stuck-namespace" target="_blank" rel="noopener">How to remove a stuck namespace</a></p><p>[[kubernetes]] 如何删除 namespace，通常是因为 [[Finalizers]] 。</p><hr><p><a href="https://zwischenzugs.com/2022/08/08/who-should-write-the-terraform/" target="_blank" rel="noopener">“Who Should Write the Terraform?”</a></p><p>应该谁来写 Terraform ？要根据实际组织情况来看，我理解最终期望是 Developer 来写。配合阅读 <a href="https://matt-rickard.com/developers-should-deploy-their-own-code" target="_blank" rel="noopener">Developers Should Deploy Their Own Code</a></p><hr><p><a href="https://www.hashicorp.com/state-of-the-cloud" target="_blank" rel="noopener">HashiCorp 2022 State of Cloud Strategy Survey</a></p><p>[[hashicorp]] 关于 Cloud 的调查。multi-cloud 已经是事实，大多数是独立的团队来维护 multi-cloud 资源。其中 94% 认为存在资源浪费的情况。</p><hr><p><a href="https://specbranch.com/posts/one-big-server/" target="_blank" rel="noopener">Use One Big Server</a></p><p>作者表达的观点是，使用一台顶配的服务器可以承担很多服务，垂直扩展的方便程度也远胜于水平扩展。如果从可用性角度，可以使用公有云，但不要完全的使用公有云，公有云的溢价是明显的。但这都是在业务场景规模很大的基础上，如果业务规模很小，那么按量付费是一个好的选择。</p><hr><p><a href="https://semaphoreci.com/blog/bad-microservices" target="_blank" rel="noopener">When Microservices Are a Bad Idea</a></p><p>什么时候应该进行[[微服务]] 设计？除非理由非常明确，否则不要这样做。</p><p>当现有程序还在运行良好的情况下，进行很好的模块拆分可能比直接拆分为微服务是一个更好的选择，前者本身也是后者的一部分。进行微服务设计的前提是基础设施足够完善。</p><hr><p><a href="https://iximiuz.com/en/posts/kubernetes-vs-virtual-machines/" target="_blank" rel="noopener">How Kubernetes Reinvented Virtual Machines (in a good sense)</a></p><p>从应用部署的角度来讲解为什么我们需要[[容器]] 和 [[kubernetes]]。之前还有从应用发布的角度（binary -&gt; tar -&gt; rpm/deb -&gt; container）来讲解为什么需要[[容器]]。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://daily.zhihu.com/story/9751475" target="_blank" rel="noopener">打工人为什么会集体落入“狗屎工作”陷阱？</a></p><blockquote><p><a href="https://book.douban.com/subject/35929434/" target="_blank" rel="noopener">《 毫无意义的工作》</a></p></blockquote><blockquote><p><strong>毕竟，我们已经处在一个“狗屎工作”泛滥的时代。而如果这种“狗屎性”来自于一种体系性的力量，带有一点略微不可抗的时代性色彩，那我们就更加需要对自己的工作有更多的反思。</strong><br>最后，也是格雷伯在本书结尾时递上的一碗“鸡汤”：<br><strong>“大部分人喜欢在抽象层面谈论自由，甚至声称自由是最重要的事情……但很少有人去思考自由的生活具体意味着什么。”</strong><br><strong>因此这本书的目的不是提出解决方案，而是倡导大家去思考和讨论真正的自由，对“正常”有更多的反思。</strong><br>“狗屁工作是一扇窗”。<br>它既外看社会，也内观人生。</p></blockquote><hr><p><a href="https://mp.weixin.qq.com/s/3AJ32QiIFz-5xzWiiyCHIA" target="_blank" rel="noopener">Shopee 衰落幕后：一家最像中国大厂的东南亚巨头的全球化乱局</a></p><p>[[Shopee]] 的观察文章</p><hr><p><a href="https://daily.zhihu.com/story/9751613" target="_blank" rel="noopener">《甜蜜蜜》明明是一部悲剧爱情电影，为什么片名要叫「甜蜜蜜」？</a></p><p>小人物的爱情总是甜蜜的。</p><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《应得的权利》</p><p>这本书是在阅读 [[《从零开始的女性主义》]] 和 [[《职场妈妈不下班》]] 之后的第三本关于女性主义的书，相比前两本，这本书讲述的场景更多，让人产生思考也更多，更系统的描述了男性与女性在日常生活中所面临场景的不同，以及男性拥有了哪些不属于自己的权利。当我们在觉得一件事情理所当然的时候，我们就应该反问自己，为什么。比如为什么大家觉得男性会更能忍受痛苦(从而导致在表述相同痛苦时，女性很难得到同等对待)？为什么上司敬酒大部分女性会迫于“社会规则”压力去敬酒？为什么性别相关的恶性犯罪新闻经常使用被动句？作为男性，当面对这类事情发生时，我可以做些什么？</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-08-07</title>
    <link href="https://zdyxry.github.io/2022/08/07/Weekly-Issue-2022-08-07/"/>
    <id>https://zdyxry.github.io/2022/08/07/Weekly-Issue-2022-08-07/</id>
    <published>2022-08-07T23:59:00.000Z</published>
    <updated>2022-08-28T04:18:55.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://xuanwo.io/reports/2022-30/" target="_blank" rel="noopener">2022-30: 如何维护一个开源项目</a></p><p>明确自己的项目预期，后续的发展路线以及如何与开发者沟通。</p><hr><p><a href="https://thenewstack.io/how-our-bare-metal-cloud-keeps-up-with-all-the-new-os-releases/" target="_blank" rel="noopener">How Our Bare Metal Cloud Keeps up with All the New OS Releases</a></p><p>[[Equinix]] 如何进行发行版的快速验证工作的介绍。之前一直是手动测试验证(无法想象)，现在通过 [[BuildKite]] ，通过 DSL 来描述 OS 内容，使用 [[virt-customize]] 来进行配置改动，改动完整后，推送到 S3，进行自动化测试，最终推送给客户。</p><p>采用 [[Buildkite]] 的原因：</p><ul><li>支持动态 pipeline，可以进行条件判断</li><li>允许 pipeline 进行交互输入</li><li>可以自定义运行形态(环境)</li><li>不同架构可以共用一套 Pipeline</li></ul><p>[[BuildKite]] 学习成本不低。</p><hr><p><a href="https://www.kawabangga.com/posts/4756" target="_blank" rel="noopener">程序 Hot reload config 的实现方式</a></p><ul><li>监听文件(我自己比较常用的方式)</li><li>每次都reload</li><li>监听HUP 信号</li></ul><hr><p><a href="https://snyk.io/blog/10-kubernetes-security-context-settings-you-should-understand/" target="_blank" rel="noopener">10 Kubernetes Security Context settings you should understand</a></p><p>关于 [[kubernetes]] 安全配置的一些方法(感觉大部分人都用不上)</p><hr><p><a href="https://aeon.co/essays/downtime-is-not-an-option-meet-the-stewards-of-the-cloud" target="_blank" rel="noopener">The people of the cloud</a></p><p>云计算的另一个视角：工作在 IDC 的人们</p><hr><p><a href="https://blog.1password.com/1password-cli-easier-dns-management/" target="_blank" rel="noopener">How the 1Password CLI makes DNS management easier</a></p><p>使用 [[1Password]] 配合 <a href="https://stackexchange.github.io/dnscontrol/" target="_blank" rel="noopener">DNSControl</a> 管理域名</p><hr><p><a href="https://stanislas.blog/2021/08/firecracker/" target="_blank" rel="noopener">Using Firecracker and Go to run short-lived, untrusted code execution jobs</a></p><p>使用 [[Firecracker]] 来运行一些短生命周期的不可信任务。预先置备了VM pool，通过在 VM 中运行 Agent 来接收 Job，Job 执行完成后 VM 销毁，会自动置备新的 VM 加入到 VM pool 中。</p><hr><p><a href="https://libyear.com/" target="_blank" rel="noopener">libyear</a></p><p>我们经常面对维护的项目依赖老旧的情况，平时很少去主动的更新依赖，当等到不得不更新的时候，通常要投入的精力非常大。其中我觉得一个比较重要的原因是我们无法评估当前项目的依赖管理是否处于一个相对”健康“ 的状态， [[libyear]] 提出通过一种可以量化的数字来检查当前项目的依赖情况，通过比较项目中每一个依赖当前版本与最新版本的发布时间差值之和，来评估项目状态。</p><p>按照 libyear 的算法，项目中的依赖越多， libyear 越大，感觉 libyear 可以作为一个参考，实际应用选择一个比例值比较好，比如平均依赖年限小于 3 ？</p><hr><p><a href="https://xkln.net/blog/icmp-ping-and-traceroute--what-i-wish-i-was-taught/" target="_blank" rel="noopener">ICMP, Ping, and Traceroute - What I Wish I Was Taught</a></p><p>关于 [[ICMP]]， [[Ping]]， [[Traceroute]] 的实验和解释。</p><hr><p><a href="https://www.swyx.io/jobs-of-js-build-tools" target="_blank" rel="noopener">The Many Jobs of JS Build Tools</a></p><p>关于前端构建工具的介绍</p><hr><p><a href="https://leebriggs.co.uk/blog/2022/07/20/nobody-knows-what-declarative-is" target="_blank" rel="noopener">Why does nobody seem to know what imperative and declarative actually mean?</a></p><p>关于[[声明式]] 和 [[命令式]] 的讨论。<strong>命令式有<a href="https://en.wikipedia.org/wiki/Control_flow" target="_blank" rel="noopener">控制流</a>，而声明式没有。</strong></p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://daily.zhihu.com/story/9751345" target="_blank" rel="noopener">有氧运动真的会掉肌肉吗？</a></p><p><strong>总结起来，[[有氧运动]]对肌肉的抑制，除了总热量因素外，还应该补充的几个层面是：</strong></p><ul><li>有氧运动消耗了的大多是糖，而不是脂肪；</li><li>糖类不足，会激活 AMPK、抑制肌肉合成；</li><li>糖类不足，人体分解肌肉（糖异生）来获得糖，用糖类配脂肪氧化，从而获得能量维持生存。</li></ul><hr><p><a href="https://twitter.com/coolXiao/status/1554667451203276801" target="_blank" rel="noopener">9个写作技巧</a></p><ul><li>删掉“我觉得”，“我认为”，“我相信”，写出来的本身就代表个人观点，不需要重申</li><li>先写标题，写了标题就有了主旨，不会发散</li><li>短句很好，但是可以长短结合(虽然我还是觉得断句更好)</li><li>三合音，不经意的押韵可以起到奇妙的效果</li><li>CTA：call to action，告诉读者如何行动</li><li>一寸相框：先写下眼前已经明确的，最想说的电子，不需要考虑全文最后的呈现</li><li>简单和清晰</li><li>不说副词，不要用副词描绘情势，用更生动的叙述替代</li><li>填满画布，在写草稿时，应该一鼓作气，先填满画布</li></ul><hr>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-07-31</title>
    <link href="https://zdyxry.github.io/2022/07/31/Weekly-Issue-2022-07-31/"/>
    <id>https://zdyxry.github.io/2022/07/31/Weekly-Issue-2022-07-31/</id>
    <published>2022-07-31T23:59:00.000Z</published>
    <updated>2022-08-28T04:18:55.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://sichengingermay.com/how-to-do-system-design-interview/" target="_blank" rel="noopener">一些 System Design 面试的建议</a></p><p>明确需求；定义系统接口和业务 Entity；画一个架构图；讨论具体细节。</p><hr><p><a href="https://www.etsy.com/codeascraft/a-checklist-manifetsy" target="_blank" rel="noopener">A Checklist Manifetsy</a></p><p>维护自己的检查清单可以对所做内容更有掌控感。</p><hr><p><a href="https://medium.com/@tophatengblog/alerts-what-are-they-good-for-fe085e9ab4db" target="_blank" rel="noopener">Alerts, what are they good for?</a></p><p>如何设置报警规则？在我司通常是依靠经验拍脑袋。作者提出了一个可以量化的规则来 评估规则：</p><p>影响：越严重则数值越大</p><p>频率：发生频率越高，则数值越大</p><p>可恢复性：如果涉及到的问题所需要手动工作量越大，则数值越大</p><p>最终计算方式为<code>(i+f)*r</code> ，作者给出了数值建议：</p><blockquote><p><strong>1–19</strong> ignore<br><strong>20–49</strong> alert<br><strong>50–79</strong> evaluate the event. is it rated properly and if yes, what improvements can be made if any. The below example of US East 1 going down is a worse case scenario that relies on DR however, with good monitoring, can be detected and actioned<br><strong>80–100</strong> IMHO, any event with this scoring should NOT exist and if it does, we are in dire trouble</p></blockquote><hr><p><a href="https://blog.shell909090.org/blog/archives/2885/" target="_blank" rel="noopener">为什么浮点运算不精确</a></p><hr><p><a href="https://gist.github.com/richhickey/1563cddea1002958f96e7ba9519972d9" target="_blank" rel="noopener">Open Source is Not About You</a></p><p>关于[[开源]] 的讨论</p><hr><p><a href="https://jakub-m.github.io/2022/07/17/laport-clocks-formal.html" target="_blank" rel="noopener">User settings, Lamport clocks and lightweight formal methods</a></p><p>辅助阅读：<a href="https://www.codedump.info/post/20220703-weekly-21/" target="_blank" rel="noopener">周刊（第21期）：Lamport时钟介绍</a></p><hr><p><a href="https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture/" target="_blank" rel="noopener">The RED Method: key metrics for microservices architecture</a></p><p>[[weaveworks]] 关于设置监控指标的分类方法 <code>RED</code>：</p><p>Rate，服务每秒请求数</p><p>Errors，每秒失败的请求数</p><p>Duration，每个请求耗时分布</p><hr><p><a href="https://www.brendangregg.com/usemethod.html" target="_blank" rel="noopener">The USE Method</a></p><p>Utilization：以一定时间间隔内的百分比表示。例如，“一个磁盘以 90% 的利用率运行”。</p><p>Saturation：作为队列长度。例如，“CPU 的平均运行队列长度为 4”。</p><p>Errors：错误事件的计数。</p><hr><p><a href="https://eng.uber.com/vertical-cpu-scaling/" target="_blank" rel="noopener">Vertical CPU Scaling: Reduce Cost of Capacity and Increase Reliability</a></p><p>通过合理计算 Pod 的 CPU 使用率和预期可以容忍的可能故障，来计算最终分配给 Pod 的CPU core。</p><p>The reason for this is that responsibilities within a storage cluster can change over time, and all pods must therefore be allocated sufficient resources so that they can become the busiest pod in the cluster.</p><p>采集过去14天 Pod 的 CPU 利用率，在这些数据中，提取每8小时 P99 数值，选择利用率最高的 Pod 作为集群基准，利用率最高的 Pod 数据中的第三高作为最终用于计算额度的数值。Quota = Peak usage / Utilization target。</p><hr><p><a href="https://jiajunhuang.com/articles/2022_07_28-git_flows.md.html" target="_blank" rel="noopener">三种git流程以及发版模型</a></p><p>多种 Git 开发流程对比。</p><hr><p><a href="https://jvns.ca/blog/2022/07/28/toy-remote-login-server/" target="_blank" rel="noopener">A toy remote login server</a></p><p>实现一个简单的远程登录 Server，需要注意 tty 的使用，相关阅读可以看之前关于 tty 的介绍。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://www.theengineeringmanager.com/qa/how-do-i-get-better-at-giving-feedback/" target="_blank" rel="noopener">How do I get better at giving feedback?</a></p><p>如何更好的进行反馈？（觉得还是看人。</p><hr><p><a href="https://daily.zhihu.com/story/9751019" target="_blank" rel="noopener">有哪些外行觉得丑但其实很厉害的画？</a> </p><p>厉不厉害不知道，丑是真的丑。。。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-07-24</title>
    <link href="https://zdyxry.github.io/2022/07/24/Weekly-Issue-2022-07-24/"/>
    <id>https://zdyxry.github.io/2022/07/24/Weekly-Issue-2022-07-24/</id>
    <published>2022-07-24T18:55:00.000Z</published>
    <updated>2022-08-28T04:18:55.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://www.chenshaowen.com/blog/hijack-docker-io-req-to-private-repository.html#22-%E9%83%A8%E7%BD%B2-dockerio-%E7%9A%84%E4%BB%A3%E7%90%86-registry" target="_blank" rel="noopener">如何劫持 docker.io 的镜像流量到私有仓库</a></p><p>通过修改Client 受信证书将 docker.io 流量转发到内部其他 registry。<br>问题：所有 Client 都需要进行证书配置。如果证书这环节出了问题，会引发较大安全问题。</p><p><a href="https://www.codedump.info/post/20220710-weekly-22/" target="_blank" rel="noopener">周刊（第22期）：图解一致性模型</a></p><p>通过发布朋友圈作为示例来描述：顺序一致性、线性一致性、因果一致性。</p><p>顺序一致性条件：</p><p>条件1：每个进程的执行顺序要和该进程的程序执行顺序保持一致。</p><p>条件2：对变量的读写要表现得像FIFO一样先入先出，即每次读到的都是最近写入的数据。</p><p>线性一致性条件，在顺序一致性的基础上，增加：</p><p>条件3：不同进程的事件，如果在时间上不重叠，即不是并发事件，那么要求这个先后顺序在重排之后保持一致。</p><p>因果一致性是更弱的一致性，只要满足<code>happen-before</code>关系即可。由于<code>happen-before</code>关系实际上是由Lamport时钟定义的，这是一种逻辑时钟，所以不同的读者看到的先后顺序可能会有点<code>反直觉</code>，但是只要满足<code>happen-before</code>关系就是正确的。</p><p><a href="https://tech.meituan.com/2022/07/14/cicd-pipeline.html" target="_blank" rel="noopener">工程效能CI/CD之流水线引擎的建设实践</a></p><p>美团内部 CI/CD 发展过程。在 jenkins 阶段遇到了调度瓶颈、资源管理瓶颈，Jenkins 多集群方式管理困难，转为自研。</p><p><a href="https://spf13.com/p/spf13-google/" target="_blank" rel="noopener">spf13 Google –&gt;</a></p><p>spf13 从 [[Google]] 离职加入了Two Sigma</p><blockquote><p>When I first joined there was so much to learn about both Go and working within Google. My learning had slowed down dramatically. I was torn. I loved the team and the work we were doing, but was feeling personally stagnant.</p></blockquote><p><a href="https://coolshell.cn/articles/22263.html" target="_blank" rel="noopener">从一次经历谈 TIME_WAIT 的那些事</a></p><p>通过设置 <code>SO_LINGER</code> 为 0 来避免 TIME_WAIT 过多情况。<a href="https://github.com/tevino/tcp-shaker" target="_blank" rel="noopener">https://github.com/tevino/tcp-shaker</a></p><p><a href="https://statuspal.io/blog/2022-06-22-dns-incidents-like-cloudflares-could-turn-your-status-page-useless-here-is-how-to-prevent-it/" target="_blank" rel="noopener">DNS Incidents Like Cloudflare’s Could Turn your Status Page Useless; Here is How to Prevent It</a></p><p>很多公司使用<code>status.yourcompany.com</code> 来展示自己的服务状态，但是这可能会因为 DNS 问题而导致可用性变差，建议使用独立的 DNS 服务器并且使用 <code>yourcompany-status.com</code> 。</p><p>举例：</p><ul><li><p><a href="https://metastatus.com/" target="_blank" rel="noopener">https://metastatus.com/</a></p></li><li><p><a href="https://api.twitterstat.us/" target="_blank" rel="noopener">https://api.twitterstat.us/</a></p></li><li><p><a href="https://www.cloudflarestatus.com/" target="_blank" rel="noopener">https://www.cloudflarestatus.com/</a></p></li></ul><p><a href="https://shkspr.mobi/blog/2022/07/dns-esoterica-why-you-cant-dig-switzerland/" target="_blank" rel="noopener">DNS Esoterica - Why you can’t dig Switzerland</a></p><p>DNS 冷知识： <code>The default query class (IN for internet) is overridden by the -c option.  class is any valid class, such as HS for Hesiod records or CH for Chaosnet records.</code></p><p><a href="https://www.netmeister.org/blog/dns-size.html" target="_blank" rel="noopener">DNS Response Size</a></p><p>关于 DNS 请求响应大小的验证，通过不断地调整 DNS 解析大小来理解完整的请求流程。</p><p>DNS Packet Size限制在 512Byte 么？可以通过 <code>UDP payload size</code> 允许更大 size，当 size 更大时，会遇到 MTU 限制。更大的时候会自动切换到 TCP 进行重试，这个时候限制是 IP Packet Size 2^16=65535： <code>65536 bytes for DNS overhead + payload.</code> 。理论上我们可以设置的 A 记录大概在 4k 左右(4092)。</p><p><a href="https://blog.min.io/nutanix-objects-violates-minios-open-source-license/" target="_blank" rel="noopener">Nutanix Objects Violates MinIO’s Open Source License</a></p><p>MinIO 发表声明 Nutanix 违反了 AGPL v3协议。Hackernews 关于事件的讨论： <a href="https://news.ycombinator.com/item?id=32148007" target="_blank" rel="noopener">https://news.ycombinator.com/item?id=32148007</a></p><p><a href="https://twitter.com/sidpalas/status/1549026569535963136?s=12&amp;t=klOsSoeDfEW9Ra6ESp68HA" target="_blank" rel="noopener">Why does Kubernetes even exist?</a></p><p>为什么 Kubernetes 被需要，软件部署管理发展过程图示</p><p><a href="https://jvns.ca/blog/2021/09/24/new-tool--an-nginx-playground/" target="_blank" rel="noopener">New tool: an nginx playground</a></p><p>如何实现一个 Nginx playground：</p><ul><li>写入 nginx 配置</li><li>创建 net namespace</li><li>在 namespace 中分别运行 nginx 和 go-httpbin</li><li>执行 curl/http 命令并将结果返回给用户</li></ul><p><a href="https://jvns.ca/blog/2022/07/20/pseudoterminals/" target="_blank" rel="noopener">What happens when you press a key in your terminal?</a></p><p>项目地址： <a href="https://github.com/jvns/goterm/blob/master/main.go" target="_blank" rel="noopener">https://github.com/jvns/goterm/blob/master/main.go</a></p><p>通过 xterm.js 和 goterm 来学习在输入按键时，发生了什么。</p><p>在使用终端模拟器(比如 SecureCRT) 时，我们通常可以选择 V100、Xterm或者 ANSI 不同的终端序列/终端类型。</p><p>ANSI转义序列：<strong>ANSI转义序列（ANSI escape sequences）</strong>是一种<a href="https://zh.wikipedia.org/w/index.php?title=%E5%B8%A6%E5%86%85%E4%BF%A1%E5%8F%B7&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">带内信号</a>的<a href="https://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97" target="_blank" rel="noopener">转义序列</a>标准，用于控制视频文本<a href="https://zh.wikipedia.org/wiki/%E7%B5%82%E7%AB%AF" target="_blank" rel="noopener">终端</a>上的光标位置、颜色和其他选项。在文本中嵌入确定的字节序列，大部分以<a href="https://zh.wikipedia.org/wiki/%E9%80%80%E5%87%BA%E9%94%AE" target="_blank" rel="noopener">ESC</a><a href="https://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6" target="_blank" rel="noopener">转义字符</a>和”[“字符开始，终端会把这些字节序列解释为相应的指令，而不是普通的<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81" target="_blank" rel="noopener">字符编码</a>。</p><p><a href="https://www.kawabangga.com/posts/4728" target="_blank" rel="noopener">Coredns 源码解析：启动流程</a></p><p>Coredns 启动流程介绍，Coredns 自身使用 caddy 作为框架来实现，在实现流程上混杂着 caddy 和 coredns 自身逻辑。</p><p><a href="https://matt-rickard.com/commit-messages-dont-matter/" target="_blank" rel="noopener">Commit Messages Don’t Matter</a></p><p>我理解作者表达的是如果把 commit msg 作为主要的文档不合适，而不是 commit msg 不重要，一个良好的 commit msg 可以帮助 reviewer 和后续改动相关代码的人快速了解之前改动背景原因(可能不是很详细)，而不需要去查看相关的设计文档或 Ticket 了解细节。</p><p><a href="http://charap.co/how-to-read-computer-science-systems-papers-using-shampoo-algorithm/" target="_blank" rel="noopener">HOW TO READ COMPUTER SCIENCE (SYSTEMS) PAPERS USING SHAMPOO ALGORITHM</a></p><p>Q：如何阅读 CS Paper？A： 按阶段重复阅读。阅读论文是一个非线性的过程，在阅读的过程中，如果在某一章节没有理解，那么重复阅读是比较好的选择，在重复阅读的同时，需要提出问题以确保我们理解了这一章节的内容。</p><p>在阅读的过程中，我们要尽可能的慢下来，在阅读过程中同步进行笔记记录可能是一个好的方式。</p><p><a href="https://www.youtube.com/watch?v=-DbbIZzFHIY" target="_blank" rel="noopener">Roman Khavronenko | Open-source strategy at VictoriaMetrics</a></p><p>[[VictoriaMetrics]] 创始人讲述 VictoriaMetrics 如何起步，为什么开源，如何找到自己的用户，在开源过程中做了哪些事情来帮助社区快速成长。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://basicappleguy.com/basicappleblog/999month" target="_blank" rel="noopener">$9.99/MONTH</a></p><ul><li>每个月花费在订阅软件上的钱有多少？可能平时吃喝开销会及时感知，但是软件上的开销很容易就被忽略掉。我自己用了一款付费软件来记录自己每个月为软件付费(是的，我为了记录又买了一个软件)，目前每个月的开销是 91元。</li></ul><p><a href="https://www.foodaily.com/articles/27497" target="_blank" rel="noopener">糖，不那么伟大的作品丨青山资本2022年中消费报告</a></p><p>美国对国民的糖摄入推荐量为每日男性36克，女性25克，实际上他们的摄入平均数为70克。中国居民膳食指南表示，糖的摄入量每天最好不超过25克，但一听可乐就能轻松超过30多克糖。</p><p>GI（glycemic index）值指摄取某种食物后对人体血糖上升影响的速度。低GI食物在肠胃中停留更久，吸收率更低，更能增加饱腹感，降低进食欲望。高GI食物则会让血糖升高更快，胰岛素分泌增加，饿得更快。长此以往，不仅会让胰岛素过于兴奋，还抑制脂肪分解，促进脂肪合成。虽然胃里的食物其实足够了，但饥饿感带来的难以控制的加餐，使得摄入能量远超身体实际需要的。</p><p><a href="https://www.notion.so/2022-07-24-150c9e8f32744d7297a2124a1677e4bc" target="_blank" rel="noopener">坚持跑步对身体到底好不好？</a></p><p><strong>仅跑步 10 分钟，就能增加大脑中流向双侧前额叶皮层各个位点的局部血流量，从而有益于心理健康、增强执行能力</strong>。</p><p>“我们的研究表明，<strong>仅需 6 个月的锻炼，就有可能逆转衰老对血管的影响。在 21 岁 -69 岁不同年龄段的健康人群中，普遍能观察到这些益处。</strong>这强调了<strong>改变生活方式以减缓衰老相关风险</strong>的重要性，特别是在年龄较大、基础较弱的人群中，开始跑步也似乎永远不会太晚。”</p><p><a href="https://www.zhihu.com/question/383416202/answer/2584564433" target="_blank" rel="noopener">用了很久的全拼改为双拼值得吗？</a></p><p>优势：确定性(每次输入两个按键来完成一个文字的输入)；快(只需要输入2个按键)；</p><p>劣势：多平台适配；学习成本；</p><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><p>《职场妈妈不下班》： 婚姻中男性与女性对于家务劳动的付出的探讨，介绍了多个不同家庭的婚姻生活示例，来讲解不同类型/态度的人对于家庭生活付出的想法，想法的成因(往往是人原生家庭影响)。婚姻生活就是不断妥协的结果，几乎是一种潜规则，你不说，我不说，日子就继续这样过下去。原生家庭对于一个人的影响是看得见的，影响时间也远远超出一代人的范围。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-07-17</title>
    <link href="https://zdyxry.github.io/2022/07/18/Weekly-Issue-2022-07-17/"/>
    <id>https://zdyxry.github.io/2022/07/18/Weekly-Issue-2022-07-17/</id>
    <published>2022-07-18T22:03:36.000Z</published>
    <updated>2022-08-28T04:18:55.799Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p><a href="https://www.kawabangga.com/posts/4718" target="_blank" rel="noopener">Side Project 成本最小化运维</a></p><p>现成的 SaaS &gt; 基于库实现 &gt; 自己从软件方面实现 &gt; 使用新的开源项目额外部署系统来实现。现在的各个 SaaS 已经非常成熟了，大部分场景都可以涵盖到，不建议把时间花费在运维维护工作上。</p><p><a href="https://www.nakivo.com/blog/the-number-of-cores-per-cpu-in-a-virtual-machine/" target="_blank" rel="noopener">Setting the Number of Cores per CPU in a Virtual Machine</a></p><p>关于 [[vmware]] ESXi 虚拟机 CPU 配置说明</p><ul><li>When you define the number of logical processors (vCPUs) for a VM, prefer the cores-per-socket configuration. Continue until the count exceeds the number of CPU cores on a single NUMA node on the ESXi server. Use the same logic until you exceed the amount of memory that is available on a single NUMA node of your physical ESXi server.</li><li>Sometimes, the number of logical processors for your VM configuration is more than the number of physical CPU cores on a single NUMA node, or the amount of RAM is higher than the total amount of memory available for a single NUMA node. Consider dividing the count of logical processors (vCPUs) across the minimum number of NUMA nodes for optimal performance.</li><li>Don’t set an odd number of vCPUs if the CPU count or amount of memory exceeds the number of CPU cores. The same applies in case memory exceeds the amount of memory for a single NUMA node on a physical server.</li><li>Don’t create a VM that has a number of vCPUs larger than the count of physical processor cores on your physical host.</li></ul><p><a href="https://www.ewams.net/?date=2020/04/17&amp;view=sockets_vs_cores_for_esxi_which_is_better" target="_blank" rel="noopener">Sockets vs Cores for ESXi VMs, which is better? Part 1</a></p><p>关于 ESXi CPU 配置说明，结论是 socket 数量与 core 数量对于 CPU 性能几乎没有影响。</p><ul><li>Surprised to say, at least with this testing configuration, <strong>there appears to be no impact to virtual machine performance with different cores and socket configurations</strong>. Now NUMA might get you, depending on your application workload profile, so be careful. Y-cruncher obviously performs better the more vCPUs it has, but an 8-sockets-2-cores-per-socket system is going to perform the same as a VM with 4-sockets-4-cores-per-socket and the same as 1-socket-16-cores-per-socket since they all equal 16 vCPUs.</li></ul><p><a href="https://wklken.me/posts/2022/07/08/better-code-5-flexible-api.html" target="_blank" rel="noopener">Better Code: 关于接口的灵活性</a></p><p>在暴露接口的时候要尽量克制，谨慎。</p><p><a href="https://dilbertblog.typepad.com/the_dilbert_blog/2007/06/the_day_you_bec.html" target="_blank" rel="noopener">The Day You Became A Better Writer</a></p><p>最关键的技巧是保持简洁。简洁的表达是有说服力的。一个五句话就能讲出来的不错的观点，比一个高明的一百句话的长篇大论，能说服更多的人。</p><p>简洁意味着去掉多余的词。如果你可以只写“他高兴”就不要写“他很高兴”。你觉得这个“很”字增加了一些效果。它没有。删减你的句子。</p><p>（以）幽默（为目的的）写作和商业写作有诸多相似。它也需要简洁。最大的区别在于词汇的选择。为了风趣，当你可以用“牛饮”就别说“喝”。</p><p>你的第一句要抓住读者。回顾一下我这篇文章的第一句话。我重写了好多次。它让你好奇，这是关键。</p><p>写短的句子。别在一句话里放好几个想法。读者可不像你想得那么聪明。</p><p>去了解大脑是如何组织想法的。 比起“球被男孩击打了”， 读者能更快地理解“男孩击打了球”。这两句话意思一样，但是理解主语先于动作会更容易。所有大脑都这样工作。（注意，我没说“这就是所有大脑工作的方式”）。</p><p><a href="https://dev.to/techschoolguru/a-complete-overview-of-ssl-tls-and-its-cryptographic-system-36pd" target="_blank" rel="noopener">A complete overview of SSL/TLS and its cryptographic system</a></p><p>关于 SSL/TLS 的介绍，图文并茂。</p><p><a href="https://cloud.google.com/blog/topics/developers-practitioners/how-google-got-to-rolling-linux-releases-for-desktops" target="_blank" rel="noopener">How Google got to rolling Linux releases for Desktops</a></p><p>Google 如何从 Ubuntu LTS 切换到基于 Debian 的滚动升级发行版；</p><p>在维护 LTS版本时，每两年都要花费一年的大部分时间来处理升级冲突和测试；</p><p>切换到滚动升级后，为了避免上游不稳定而导致内部重复工作，通过尽早的介入上游工作(也可以更好的回馈社区)，来保证上游稳定性；</p><p><a href="https://matt-rickard.com/hotellings-law-differentiation/" target="_blank" rel="noopener">Hotelling’s Law and Differentiation</a></p><p><strong>竞争对手彼此靠近以最大化市场份额</strong></p><p><a href="https://shuxiao.wang/posts/housing-load-is-a-bully/" target="_blank" rel="noopener">房贷是对普通人的欺负</a></p><ul><li><p>普通人对超过自己日常生活的数字是没有概念的。</p><p>  所以我觉得房贷就是肉食者、银行和房地产商联手对普通人的欺负，欺负他们无法理解太大的数，造下全天下都要买房的大势，利用他们的贪婪和无知，诓骗他们背上沉重而漫长的房贷，拿走这群普通到略显傻逼的人一生所能积攒的全部财富，唯独给他们留下一个很食之无味弃之可惜的旧房子。</p><p>  那普通人就一点错也没有了吗，也是有的，无知和贪婪都是其罪，不过这就是另一个话题了。</p></li></ul><p><a href="https://ieftimov.com/posts/how-to-make-reviewers-love-your-big-pull-requests/" target="_blank" rel="noopener">How to Make Reviewers Love Your Big Pull Requests</a></p><p>保证提交的代码质量；</p><p>清晰的 commit msg；</p><p><a href="https://www.pauline-vos.nl/atomic-commits/" target="_blank" rel="noopener">Atomic commits will help you git legit.</a></p><p>保证每个 commit 都是原子的，包含完整上下文的。</p><p><a href="https://www.docker.com/blog/image-rebase-and-improved-remote-cache-support-in-new-buildkit/" target="_blank" rel="noopener">Image rebase and improved remote cache support in new BuildKit</a></p><p>关于 BUILDKIT 中的 <code>--link</code> 使用及示例，可以大大缩短构建时间。</p><p><a href="https://slack.engineering/remote-development-at-slack/" target="_blank" rel="noopener">Remote Development at Slack</a></p><p>[[Slack]] 远程开发环境介绍</p><ul><li>痛点：拉取代码耗时，环境不统一，无法及时构建</li><li>改进：采用 AWS ASG 自动扩展实例，开发人员采用 VSCode 进行远程开发。</li><li>现状：开发环境成本翻倍；90% 切换到远程开发模式；内部效率提高明显。</li></ul><p><a href="https://github.com/choria-io/appbuilder" target="_blank" rel="noopener">CHORIA APP Builder</a></p><p>在产品运维工作中，会包含大量的命令行、Shell 脚本、命令行拼接，比如 <code>kubectl blablabla | jq balblabla</code> ，通常我们会通过文档或者 Wiki 来提供使用说明，但是会面临一些问题：</p><ul><li>暴露的命令又臭又长</li><li>变量参数传递不统一，部分支持环境变量，部分不支持，是否补全支持全靠命令行自身</li></ul><p>这个工具提供了一种通用的方式来统一暴露入口</p><p>可能问题：</p><ul><li>交互式命令处理？</li><li>命令边界模糊，什么应该是命令行内实现，什么应该放到 appbuilder 配置中？</li><li>在 YAML 中写 Shell 好像没好到哪里去？</li></ul><p><a href="https://blog.symops.com/2022/07/07/prevent-ransomware-s3-object-lock/" target="_blank" rel="noopener">PROTECT YOUR DATA FROM RANSOMWARE WITH S3 OBJECT LOCK</a></p><p>可以使用 S3 版本控制和对象锁来避免勒索病毒。</p><p><a href="https://raesene.github.io/blog/2022/07/03/lets-talk-about-kubernetes-on-the-internet/" target="_blank" rel="noopener">Let’s talk about Kubernetes on the Internet</a></p><p>扫描互联网上暴露的 Kubernetes，大部分是 EKS，AKS，GKE 暴露的。</p><p>有相当一部分 K8s 集群运行的版本是不再维护版本。</p><p><a href="https://architecturenotes.co/fallacies-of-distributed-systems/#the-network-is-reliable" target="_blank" rel="noopener">Fallacies of Distributed Systems</a></p><p>描述了在进行系统设计时常见的错误假设：</p><ul><li>网络是可靠的</li><li>延迟为零</li><li>带宽无限</li><li>网络是安全的</li><li>网络拓扑不会改变</li><li>你可以控制一切</li><li>传输成本为零</li><li>网络(消息)是同质的</li></ul><p><a href="https://www.seekret.io/blog/a-practical-guide-to-capturing-production-traffic-with-ebpf/" target="_blank" rel="noopener">A Practical Guide to Capturing Production Traffic with eBPF</a></p><p>使用 Golang 来演示 eBPF 如何抓取所需要的信息。</p><p><a href="https://github.com/seek-ret/ebpf-training" target="_blank" rel="noopener">https://github.com/seek-ret/ebpf-training</a></p><p><a href="https://unix.stackexchange.com/questions/5260/is-there-truth-to-the-philosophy-that-you-should-sync-sync-sync-sync" target="_blank" rel="noopener">Is there truth to the philosophy that you should sync; sync; sync; sync?</a></p><p>现在还真的需要 <code>sync;sync;sync;</code> 么？</p><p>也许这只是一个都市传说。</p><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《点球成金》，针对魔球理论的讲述，体育带给人的感动总是很直接。</p><p>《从零开始的女性主义》，起因是最近针对相关话题讨论真的多，而自己对相关背景了解太少，没有自己的想法和理解，果然还是读书带来的历史背景介绍比零散的文章/播客好不少。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Pocket 数据分析和总结</title>
    <link href="https://zdyxry.github.io/2022/07/05/Pocket-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E6%80%BB%E7%BB%93/"/>
    <id>https://zdyxry.github.io/2022/07/05/Pocket-数据分析和总结/</id>
    <published>2022-07-05T19:50:44.000Z</published>
    <updated>2022-08-28T04:18:55.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>自己一直使用 pocket 作为稍后阅读收藏夹，最近觉得 Pocket 的搜索结果不能满足我的需求，于是寻找替代品，最终打算用 Notion Web Clipper 配合 Notion 来作为替代，自己虽然是 Notion 的 Team Plan 但是一直没找到合适的场景使用 Notion ，主要是觉得 Notion 的数据不可控，所以无法作为一个笔记软件来用，但是如果作为只信息管理工具应该是足够的，试用了几天觉得也满足需求，于是开始把 Pocket 数据迁移到 Notion 中。在迁移过程中，发现 Pocket API 中的数据比较多，于是打算简单分析下自己这么多年使用的数据，看看能否发现什么。数据是我自己的 Pocket 数据，通过官方 API 获取的，时间跨度从 2017年12月29日持续到 2022年6月28日。</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><ul><li>已读比例：63%  <ul><li>未读 774  </li><li>已读 1370  </li></ul></li></ul><hr><ul><li>收藏链接 404 比例  <ul><li>未读 774，其中链接无法访问数量 35，4.5%  </li><li>已读 1370，其中链接无法访问数量 88，6.4%  </li></ul></li></ul><hr><ul><li>条目添加标签（tag）比例  <ul><li>未读 774， 其中添加标签数量 247，31.9%  </li><li>已读 1370， 其中添加标签数量 686，50%  </li></ul></li></ul><hr><ul><li>平均每天添加稍后阅读条目：1.3 篇  </li><li>平均每天阅读条目：0.9 篇</li></ul><hr><ul><li>阅读时间  <ul><li>最长阅读耗时：999 天  </li><li>最短阅读耗时：9s  </li><li>平均阅读耗时：109天  </li><li>最长未读间隔：1649 天  </li></ul></li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>已读比例符合我的预期，最开始使用 Pocket 的时候，通常会将其作为一个“收藏夹”，而不是一个“阅读列表”，所以会导致添加的条目并不是一篇文章，哪怕“稍后” 也不会轻易的读完，后期已经将收藏类的需求放到了笔记中，这种症状缓解了很多。  </li><li>404 比例，之前在Twitter 上单独说过，如果一篇文章没有及时阅读，在现在的网络时代，要随时做好它消失不见的准备，虽然现在已经有很多 WebArchive 的方式，但终归是不方便。这也是我对 Pocket 不满意的一点，我用了这么久都没有搞清楚什么页面它会保存文字，什么页面会只保存一个链接。还是要及时阅读，即使不能阅读，也最好保存完整页面便于后续整理。  </li><li>平时使用过程经常面临一个困扰：我记忆中看过一篇文章，但是我找不到它。此时我会尝试各种我认为的关键词去找，但是往往是搜索不到，看这个 tag 比例 也能看出一些端倪，现在我会针对每一个阅读条目都添加标签（一个或者多个），来尽量减少这种情况出现。</li><li>平均每天添加 1.3 篇，但是平均下来每天阅读没有达到 1 篇，最终导致 Pocket 列表越来越长，哪怕自己在 Todo List 中添加了一个周期性任务来提醒自己每周清理，也没有办法。  </li><li>阅读时间很有迷惑性，在第一点已经提到我的 Pocket 很多时候作为一个“收藏夹”的作用，导致很多条目注定不会被阅读，持续几年没读的情况很多。最长阅读耗时999 天，这是因为我前段时间发现了 Pocket 有一个 random URL，访问该 URL 会自动跳转到自己 Pocket 列表中随机一个条目，借着这个机制清理了不少陈年条目。  </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;自己一直使用 pocket 作为稍后阅读收藏夹，最近觉得 Pocket 的搜索结果不能满足我的需求，于是寻找替代品，最终打算用 Notion
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MacOS 使用 Hammerspoon 进行窗口管理</title>
    <link href="https://zdyxry.github.io/2022/06/18/MacOS-%E4%BD%BF%E7%94%A8-Hammerspoon-%E8%BF%9B%E8%A1%8C%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86/"/>
    <id>https://zdyxry.github.io/2022/06/18/MacOS-使用-Hammerspoon-进行窗口管理/</id>
    <published>2022-06-18T10:47:07.000Z</published>
    <updated>2022-08-28T04:18:55.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近把公司电脑从 Windows 换到了 MacOS， 在重新配置 OS 阶段，发现在 MacOS 上进行窗口管理比较痛苦，自己之前的个人 MaCOS 一直使用的是Moom 来进行管理，但是使用功能很有限，加上现在 MacOS 自身的窗口提示会与 Moom 冲突，所以决定更换一个。我个人对于窗口管理的需求就是方便的在不同显示器切换，焦点窗口全屏、半屏、1/3 屏转换快速。对于平铺式窗口管理觉得学习成本和适应成本可能有些高，不打算折腾，之前看到 disksing 使用 Hammerspoon 进行窗口管理的文章： <a href="https://disksing.com/desktop-layout/" target="_blank" rel="noopener">适合程序员的桌面窗口管理方案</a> ，打算尝试一下。</p><h2 id="Hammerspoon"><a href="#Hammerspoon" class="headerlink" title="Hammerspoon"></a>Hammerspoon</h2><p>Hammerspoon 是一个开源的自动化工具，可以实现很多功能，包含不限于：窗口管理、桌面管理、Wifi 触发器、时钟管理等等，所有功能都是通过 Lua 语言来实现的。用户可以自己编写 Lua，或者使用 Spoons 中提供的一些 Lua 模块来简化配置。</p><p>官网包含了一个简单的 Window resize 示例，还是比较好理解的，先找到当前focuse 窗口，然后找到当前窗口大小，调整大小为目标值，重新设置窗口：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hs.hotkey.bind(&#123;<span class="string">"cmd"</span>, <span class="string">"alt"</span>, <span class="string">"ctrl"</span>&#125;, <span class="string">"Left"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> win = hs.window.focusedWindow()</span><br><span class="line">  <span class="keyword">local</span> f = win:frame()</span><br><span class="line">  <span class="keyword">local</span> screen = win:screen()</span><br><span class="line">  <span class="keyword">local</span> <span class="built_in">max</span> = screen:frame()</span><br><span class="line"></span><br><span class="line">  f.x = <span class="built_in">max</span>.x</span><br><span class="line">  f.y = <span class="built_in">max</span>.y</span><br><span class="line">  f.w = <span class="built_in">max</span>.w / <span class="number">2</span></span><br><span class="line">  f.h = <span class="built_in">max</span>.h</span><br><span class="line">  win:setFrame(f)</span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><h2 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h2><p>在 Github 上可以看到很多 Hammerspoon 的示例，目前写的比较完善的有以下几个：</p><ul><li><a href="https://github.com/ashfinal/awesome-hammerspoon" target="_blank" rel="noopener">https://github.com/ashfinal/awesome-hammerspoon</a></li><li><a href="https://github.com/wangshub/hammerspoon-config" target="_blank" rel="noopener">https://github.com/wangshub/hammerspoon-config</a></li><li><a href="https://github.com/S1ngS1ng/HammerSpoon" target="_blank" rel="noopener">https://github.com/S1ngS1ng/HammerSpoon</a></li></ul><p>虽然 Hammerspoon 提供了很多功能，但是我不想用它来实现很多功能，毕竟 AllinOne 我（没）不（什）是（么）很（好）喜（下）欢（场）。目前还没有使用 MacOS 存在一个常用的布局，所以先实现一些快捷键来满足需求就好。这里使用的 Spoon 包含两个：WinWin 和 ModalMgr。也不打算进行配置拆分，所有配置都在 init.lua 中写明，具体配置如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">hs.hotkey.alertDuration = <span class="number">0</span></span><br><span class="line">hs.hints.showTitleThresh = <span class="number">0</span></span><br><span class="line">hs.window.animationDuration = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">hsreload_keys = hsreload_keys <span class="keyword">or</span> &#123;&#123;<span class="string">"cmd"</span>, <span class="string">"shift"</span>, <span class="string">"ctrl"</span>&#125;, <span class="string">"R"</span>&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">string</span>.<span class="built_in">len</span>(hsreload_keys[<span class="number">2</span>]) &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    hs.hotkey.bind(hsreload_keys[<span class="number">1</span>], hsreload_keys[<span class="number">2</span>], <span class="string">"重新加载配置!"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.reload() <span class="keyword">end</span>)</span><br><span class="line">    hs.alert.show(<span class="string">"配置文件已经重新加载！ "</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">hs.loadSpoon(<span class="string">"ModalMgr"</span>)</span><br><span class="line">hs.loadSpoon(<span class="string">"WinWin"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> spoon.WinWin <span class="keyword">then</span></span><br><span class="line">    spoon.ModalMgr:new(<span class="string">"resizeM"</span>)</span><br><span class="line">    <span class="keyword">local</span> cmodal = spoon.ModalMgr.modal_list[<span class="string">"resizeM"</span>]</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'escape'</span>, <span class="string">'退出 '</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.ModalMgr:deactivate(&#123;<span class="string">"resizeM"</span>&#125;) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'Q'</span>, <span class="string">'退出'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.ModalMgr:deactivate(&#123;<span class="string">"resizeM"</span>&#125;) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'tab'</span>, <span class="string">'键位提示'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.ModalMgr:toggleCheatsheet() <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'A'</span>, <span class="string">'向左移动'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepMove(<span class="string">"left"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepMove(<span class="string">"left"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'D'</span>, <span class="string">'向右移动'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepMove(<span class="string">"right"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepMove(<span class="string">"right"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'W'</span>, <span class="string">'向上移动'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepMove(<span class="string">"up"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepMove(<span class="string">"up"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'S'</span>, <span class="string">'向下移动'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepMove(<span class="string">"down"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepMove(<span class="string">"down"</span>) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'H'</span>, <span class="string">'左半屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"halfleft"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'L'</span>, <span class="string">'右半屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"halfright"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'K'</span>, <span class="string">'上半屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"halfup"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'J'</span>, <span class="string">'下半屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"halfdown"</span>) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'Y'</span>, <span class="string">'屏幕左上角'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"cornerNW"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'O'</span>, <span class="string">'屏幕右上角'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"cornerNE"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'U'</span>, <span class="string">'屏幕左下角'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"cornerSW"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'I'</span>, <span class="string">'屏幕右下角'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"cornerSE"</span>) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'F'</span>, <span class="string">'全屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"fullscreen"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'C'</span>, <span class="string">'居中'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"center"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'G'</span>, <span class="string">'左三分之二屏居中分屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"centermost"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'Z'</span>, <span class="string">'展示显示'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"show"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'V'</span>, <span class="string">'编辑显示'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"shows"</span>) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'X'</span>, <span class="string">'二分之一居中分屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"center-2"</span>) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'='</span>, <span class="string">'窗口放大'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:moveAndResize(<span class="string">"expand"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:moveAndResize(<span class="string">"expand"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'-'</span>, <span class="string">'窗口缩小'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:moveAndResize(<span class="string">"shrink"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:moveAndResize(<span class="string">"shrink"</span>) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">'ctrl'</span>, <span class="string">'H'</span>, <span class="string">'向左收缩窗口'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepResize(<span class="string">"left"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepResize(<span class="string">"left"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">'ctrl'</span>, <span class="string">'L'</span>, <span class="string">'向右扩展窗口'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepResize(<span class="string">"right"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepResize(<span class="string">"right"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">'ctrl'</span>, <span class="string">'K'</span>, <span class="string">'向上收缩窗口'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepResize(<span class="string">"up"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepResize(<span class="string">"up"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">'ctrl'</span>, <span class="string">'J'</span>, <span class="string">'向下扩镇窗口'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepResize(<span class="string">"down"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepResize(<span class="string">"down"</span>) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'left'</span>, <span class="string">'窗口移至左边屏幕'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveToScreen(<span class="string">"left"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'right'</span>, <span class="string">'窗口移至右边屏幕'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveToScreen(<span class="string">"right"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'up'</span>, <span class="string">'窗口移至上边屏幕'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveToScreen(<span class="string">"up"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'down'</span>, <span class="string">'窗口移动下边屏幕'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveToScreen(<span class="string">"down"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'space'</span>, <span class="string">'窗口移至下一个屏幕'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveToScreen(<span class="string">"next"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'B'</span>, <span class="string">'撤销最后一个窗口操作'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:undo() <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'R'</span>, <span class="string">'重做最后一个窗口操作'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:redo() <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'['</span>, <span class="string">'左三分之二屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"mostleft"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">']'</span>, <span class="string">'右三分之二屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"mostright"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">','</span>, <span class="string">'左三分之一屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"lesshalfleft"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'.'</span>, <span class="string">'中分之一屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"onethird"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'/'</span>, <span class="string">'右三分之一屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"lesshalfright"</span>) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'t'</span>, <span class="string">'将光标移至所在窗口中心位置'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:centerCursor() <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    hsresizeM_keys = hsresizeM_keys <span class="keyword">or</span> &#123;<span class="string">"alt"</span>, <span class="string">"R"</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">string</span>.<span class="built_in">len</span>(hsresizeM_keys[<span class="number">2</span>]) &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        spoon.ModalMgr.supervisor:bind(hsresizeM_keys[<span class="number">1</span>], hsresizeM_keys[<span class="number">2</span>], <span class="string">"进入窗口管理模式"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            spoon.ModalMgr:deactivateAll()</span><br><span class="line">            spoon.ModalMgr:activate(&#123;<span class="string">"resizeM"</span>&#125;, <span class="string">"#B22222"</span>)</span><br><span class="line">        <span class="keyword">end</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spoon.ModalMgr.supervisor:enter()</span><br></pre></td></tr></table></figure><p>目前尝试增加应用切换窗口自动处理，但是 M1 上的 Hammerspoon 模块会 hang，还没搞清楚怎么回事，后续有时间再看看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近把公司电脑从 Windows 换到了 MacOS， 在重新配置 OS 阶段，发现在 MacOS 上进行窗口管理比较痛苦，自己之前的个人 
      
    
    </summary>
    
    
      <category term="MacOS" scheme="https://zdyxry.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Celery/Kombu MongoDB 连接异常调查记录</title>
    <link href="https://zdyxry.github.io/2022/05/09/Celery-Kombu-MongoDB-%E8%BF%9E%E6%8E%A5%E5%BC%82%E5%B8%B8%E8%B0%83%E6%9F%A5%E8%AE%B0%E5%BD%95/"/>
    <id>https://zdyxry.github.io/2022/05/09/Celery-Kombu-MongoDB-连接异常调查记录/</id>
    <published>2022-05-09T14:44:42.000Z</published>
    <updated>2022-08-28T04:18:55.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>产品组件 JobCenter 使用 Celery 实现异步任务中心，同时会运行 job-center-worker （celery worker） 和 job-center-scheduler(celery beat) 两个进程，使用 MongoDB 作为 Backend 存储 message 等信息（Celery 官方已说明不再维护对 MongoDB 的支持）。其中 MongoDB 配置了 ReplicaSet 保证高可用。</p><p>近期 Celery/Kombu 中遇到了 <a href="https://github.com/celery/kombu/issues/1504#event-6304977800" target="_blank" rel="noopener"><code>No free channel ids</code> 问题</a>，经过排查在这个 <a href="https://github.com/celery/kombu/commit/1c2b9723851db3caa913b8da19d6ccad447f3568" target="_blank" rel="noopener">PR</a> 中解决了该问题，在考虑 cherry-pick 的工作量和可维护性考虑，最终将产品中的 celery 和 kombu 组件从 3.x 统一升级到了 4.x 版本。</p><p>测试同学反馈近期在进行可靠性测试时，发现将 MongoDB 节点的存储网络 <code>ifdown</code> 会导致 JobCenter hang. 针对该问题进行调查。</p><h2 id="调查"><a href="#调查" class="headerlink" title="调查"></a>调查</h2><h3 id="Celery"><a href="#Celery" class="headerlink" title="Celery"></a>Celery</h3><p>先尝试复现该问题，首先尝试 ifdown Primary 节点存储网络，现象复现；尝试 ifdown Secondary 节点存储网络，无法复现；<br>尝试 stop MongoDB service 替代 ifdown，Primary 或 Secondary 均无法复现。推测与 MongoDB 连接处理有关。</p><p>观察现象复现的日志，在存储网络异常时，日志无任何输出，在存储网络恢复正常后，可以看到 Celery 记录在尝试连接 Broker （MongoDB）时发生了异常，尝试重连。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[2022-05-07 10:13:01,362: WARNING/MainProcess] consumer: Connection to broker lost. Trying to re-establish the connection...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/celery/worker/consumer/consumer.py"</span>, line 318, <span class="keyword">in</span> start</span><br><span class="line">    blueprint.start(self)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/celery/bootsteps.py"</span>, line 119, <span class="keyword">in</span> start</span><br><span class="line">    step.start(parent)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/celery/worker/consumer/consumer.py"</span>, line 596, <span class="keyword">in</span> start</span><br><span class="line">    c.loop(*c.loop_args())</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/celery/worker/loops.py"</span>, line 121, <span class="keyword">in</span> synloop</span><br><span class="line">    connection.drain_events(timeout=2.0)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/connection.py"</span>, line 315, <span class="keyword">in</span> drain_events</span><br><span class="line">    <span class="built_in">return</span> self.transport.drain_events(self.connection, **kwargs)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/transport/virtual/base.py"</span>, line 963, <span class="keyword">in</span> drain_events</span><br><span class="line">    get(self._deliver, timeout=timeout)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/utils/scheduling.py"</span>, line 56, <span class="keyword">in</span> get</span><br><span class="line">    <span class="built_in">return</span> self.fun(resource, callback, **kwargs)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/transport/virtual/base.py"</span>, line 1001, <span class="keyword">in</span> _drain_channel</span><br><span class="line">    <span class="built_in">return</span> channel.drain_events(callback=callback, timeout=timeout)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/transport/virtual/base.py"</span>, line 745, <span class="keyword">in</span> drain_events</span><br><span class="line">    <span class="built_in">return</span> self._poll(self.cycle, callback, timeout=timeout)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/transport/virtual/base.py"</span>, line 402, <span class="keyword">in</span> _poll</span><br><span class="line">    <span class="built_in">return</span> cycle.get(callback)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/utils/scheduling.py"</span>, line 56, <span class="keyword">in</span> get</span><br><span class="line">    <span class="built_in">return</span> self.fun(resource, callback, **kwargs)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/transport/virtual/base.py"</span>, line 405, <span class="keyword">in</span> _get_and_deliver</span><br><span class="line">    message = self._get(queue)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/transport/mongodb.py"</span>, line 141, <span class="keyword">in</span> _get</span><br><span class="line">    remove=True,</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/site-packages/pymongo/collection.py"</span>, line 2315, <span class="keyword">in</span> find_and_modify</span><br><span class="line">    allowable_errors=[_NO_OBJ_ERROR])</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/site-packages/pymongo/collection.py"</span>, line 205, <span class="keyword">in</span> _command</span><br><span class="line">    read_concern=read_concern)</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/site-packages/pymongo/pool.py"</span>, line 218, <span class="keyword">in</span> <span class="built_in">command</span></span><br><span class="line">    self._raise_connection_failure(error)</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/site-packages/pymongo/pool.py"</span>, line 346, <span class="keyword">in</span> _raise_connection_failure</span><br><span class="line">    raise error</span><br><span class="line">AutoReconnect: connection closed</span><br><span class="line">[2022-05-07 10:13:01,363: WARNING/MainProcess] Restoring 1 unacknowledged message(s)</span><br></pre></td></tr></table></figure><p>对应 Celery 代码在 worker/consumer/consumer.py，Blueprint 是 Celery 启动入口，可以看到在 <code>blueprint.start(self)</code> 阶段进行了异常处理，针对 <code>self.connection_errors</code> 来触发重连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">CONNECTION_RETRY = <span class="string">"""\</span></span><br><span class="line"><span class="string">consumer: Connection to broker lost. \</span></span><br><span class="line"><span class="string">Trying to re-establish the connection...\</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">    blueprint = self.blueprint</span><br><span class="line">    <span class="keyword">while</span> blueprint.state != CLOSE:</span><br><span class="line">        maybe_shutdown()</span><br><span class="line">        <span class="keyword">if</span> self.restart_count:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self._restart_state.step()</span><br><span class="line">            <span class="keyword">except</span> RestartFreqExceeded <span class="keyword">as</span> exc:</span><br><span class="line">                crit(<span class="string">'Frequent restarts detected: %r'</span>, exc, exc_info=<span class="number">1</span>)</span><br><span class="line">                sleep(<span class="number">1</span>)</span><br><span class="line">        self.restart_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            blueprint.start(self)</span><br><span class="line">        <span class="keyword">except</span> self.connection_errors <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="comment"># If we're not retrying connections, no need to catch</span></span><br><span class="line">            <span class="comment"># connection errors</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.app.conf.broker_connection_retry:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="keyword">if</span> isinstance(exc, OSError) <span class="keyword">and</span> exc.errno == errno.EMFILE:</span><br><span class="line">                <span class="keyword">raise</span>  <span class="comment"># Too many open files</span></span><br><span class="line">            maybe_shutdown()</span><br><span class="line">            <span class="keyword">if</span> blueprint.state != CLOSE:</span><br><span class="line">                <span class="keyword">if</span> self.connection:</span><br><span class="line">                    self.on_connection_error_after_connected(exc)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.on_connection_error_before_connected(exc)</span><br><span class="line">                self.on_close()</span><br><span class="line">                blueprint.restart(self)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_connection_error_before_connected</span><span class="params">(self, exc)</span>:</span></span><br><span class="line">    error(CONNECTION_ERROR, self.conninfo.as_uri(), exc,</span><br><span class="line">          <span class="string">'Trying to reconnect...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_connection_error_after_connected</span><span class="params">(self, exc)</span>:</span></span><br><span class="line">    warn(CONNECTION_RETRY, exc_info=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.connection.collect()</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>self.connection_errors</code> 对应的其实是 Kombu 中 Transport 定义的 ，可以在 <code>kombu/kombu/transport/mongodb.py</code> 中查看，在当前版本中，定义为 <code>pymongo.errors.ConnectionFailure</code> ，pymongo 中常见的网络连接异常 <code>AutoReconnect</code> 或 <code>NetworkTimeout</code> 均继承自 <code>ConnectionFailure</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transport</span><span class="params">(virtual.Transport)</span>:</span></span><br><span class="line">    Channel = Channel</span><br><span class="line"></span><br><span class="line">    can_parse_url = <span class="keyword">True</span></span><br><span class="line">    polling_interval = <span class="number">1</span></span><br><span class="line">    default_port = DEFAULT_PORT</span><br><span class="line">    connection_errors = (</span><br><span class="line">        virtual.Transport.connection_errors + (errors.ConnectionFailure, )</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>从目前来看，Celery 可以正确处理 kombu 上报的异常，但是在存储网络异常时，Kombu 没有抛出异常，于是问题调查从 Celery 转到 Kombu。</p><h3 id="Kombu"><a href="#Kombu" class="headerlink" title="Kombu"></a>Kombu</h3><p>主要看 MongoDB Transport 关于建立连接部分的处理，代码执行路径依次是： <code>client</code> -&gt; <code>_create_client</code> -&gt; <code>_open</code> -&gt; <code>_parse_uri</code> ，其中 <code>_open</code> 是真正建立连接的处理，连接所采用的参数是在 <code>_parse_uri</code> 返回的，<code>_parse_uri</code> 最终调用的是 <code>pymongo.uri_parser.parse_uri</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_open</span><span class="params">(self, scheme=<span class="string">'mongodb://'</span>)</span>:</span></span><br><span class="line">    hostname, dbname, options = self._parse_uri(scheme=scheme)</span><br><span class="line"></span><br><span class="line">    conf = self._prepare_client_options(options)</span><br><span class="line">    conf[<span class="string">'host'</span>] = hostname</span><br><span class="line"></span><br><span class="line">    env = _detect_environment()</span><br><span class="line">    <span class="keyword">if</span> env == <span class="string">'gevent'</span>:</span><br><span class="line">        <span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">        monkey.patch_all()</span><br><span class="line">    <span class="keyword">elif</span> env == <span class="string">'eventlet'</span>:</span><br><span class="line">        <span class="keyword">from</span> eventlet <span class="keyword">import</span> monkey_patch</span><br><span class="line">        monkey_patch()</span><br><span class="line"></span><br><span class="line">    mongoconn = MongoClient(**conf)</span><br><span class="line">    database = mongoconn[dbname]</span><br><span class="line"></span><br><span class="line">    version_str = mongoconn.server_info()[<span class="string">'version'</span>]</span><br><span class="line">    version = tuple(map(int, version_str.split(<span class="string">'.'</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> version &lt; (<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">raise</span> VersionMismatch(E_SERVER_VERSION.format(version_str))</span><br><span class="line">    <span class="keyword">elif</span> self.ttl <span class="keyword">and</span> version &lt; (<span class="number">2</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">raise</span> VersionMismatch(E_NO_TTL_INDEXES.format(version_str))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> database</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_parse_uri</span><span class="params">(self, scheme=<span class="string">'mongodb://'</span>)</span>:</span></span><br><span class="line">    <span class="comment"># See mongodb uri documentation:</span></span><br><span class="line">    <span class="comment"># http://docs.mongodb.org/manual/reference/connection-string/</span></span><br><span class="line">    client = self.connection.client</span><br><span class="line">    hostname = client.hostname</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hostname.startswith(scheme):</span><br><span class="line">        hostname = scheme + hostname</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hostname[len(scheme):]:</span><br><span class="line">        hostname += self.default_hostname</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> client.userid <span class="keyword">and</span> <span class="string">'@'</span> <span class="keyword">not</span> <span class="keyword">in</span> hostname:</span><br><span class="line">        head, tail = hostname.split(<span class="string">'://'</span>)</span><br><span class="line">        credentials = client.userid</span><br><span class="line">        <span class="keyword">if</span> client.password:</span><br><span class="line">            credentials += <span class="string">':'</span> + client.password</span><br><span class="line">        hostname = head + <span class="string">'://'</span> + credentials + <span class="string">'@'</span> + tail</span><br><span class="line"></span><br><span class="line">    port = client.port <span class="keyword">if</span> client.port <span class="keyword">else</span> self.default_port</span><br><span class="line">    parsed = uri_parser.parse_uri(hostname, port)</span><br><span class="line">    dbname = parsed[<span class="string">'database'</span>] <span class="keyword">or</span> client.virtual_host</span><br><span class="line">    <span class="keyword">if</span> dbname <span class="keyword">in</span> (<span class="string">'/'</span>, <span class="keyword">None</span>):</span><br><span class="line">        dbname = self.default_database</span><br><span class="line">    options = &#123;</span><br><span class="line">        <span class="string">'auto_start_request'</span>: <span class="keyword">True</span>,</span><br><span class="line">        <span class="string">'ssl'</span>: self.ssl,</span><br><span class="line">        <span class="string">'connectTimeoutMS'</span>: (int(self.connect_timeout * <span class="number">1000</span>)</span><br><span class="line">                             <span class="keyword">if</span> self.connect_timeout <span class="keyword">else</span> <span class="keyword">None</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    options.update(parsed[<span class="string">'options'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hostname, dbname, options</span><br></pre></td></tr></table></figure><p>假设我们连接参数是 <code>mongodb://192.168.1.1:27017,192.168.1.2:27017/yiran</code> ，那么 <code>pymongo.uri_parser.parse_uri</code> 解析的结果会是： <code>{&#39;username&#39;: None, &#39;nodelist&#39;: [(&#39;192.168.1.1&#39;, 27017), (&#39;192.168.1.2&#39;, 27017)], &#39;database&#39;: &#39;yiran&#39;, &#39;collection&#39;: None, &#39;password&#39;: None, &#39;options&#39;: {}}</code> 。</p><p>socketTimeoutMS在我们的环境中，MongoDB 的 URI 中并没有指定 options，所以 <code>pymongo.uri_parser.parse_uri</code> 结果的 <code>options</code> 为空。最终连接所使用的 <code>options</code> 就是在 <code>_parse_uri</code> 中定义的 options ，其中类变量 <code>connect_timeout</code> 在 Channel 定义为 None，所以最终 Kombu 建立 MongoDB 连接并没有设置 <code>socketTimeoutMS</code>，如果不设置 <code>socketTimeoutMS</code> ，默认是 None，永久等待。当网络出现异常时，直观看到的现象会是 hang 住。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Channel</span><span class="params">(virtual.Channel)</span>:</span></span><br><span class="line">    <span class="string">"""MongoDB Channel."""</span></span><br><span class="line"></span><br><span class="line">    supports_fanout = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Mutable container. Shared by all class instances</span></span><br><span class="line">    _fanout_queues = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Options</span></span><br><span class="line">    ssl = <span class="keyword">False</span></span><br><span class="line">    ttl = <span class="keyword">False</span></span><br><span class="line">    connect_timeout = <span class="keyword">None</span></span><br><span class="line">    capped_queue_size = <span class="number">100000</span></span><br><span class="line">    calc_queue_size = <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="Celery-与-Kombu-参数传递"><a href="#Celery-与-Kombu-参数传递" class="headerlink" title="Celery 与 Kombu 参数传递"></a>Celery 与 Kombu 参数传递</h3><p>现在观察到连接参数不符合预期，为什么之前的 3.x 版本没有问题？切换到 3.x 分支查看对应的代码，可以看到大体逻辑都是类似的，关于 options 的处理，3.x 存在一行 ： <code>options.update(client.transport_options)</code> ，这里的 client 在函数最开始赋值，对应的是 <code>self.connection.client</code> ，<code>self.connection</code> 是 Transport 构造传入的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_parse_uri</span><span class="params">(self, scheme=<span class="string">'mongodb://'</span>)</span>:</span></span><br><span class="line">    <span class="comment"># See mongodb uri documentation:</span></span><br><span class="line">    <span class="comment"># http://docs.mongodb.org/manual/reference/connection-string/</span></span><br><span class="line">    client = self.connection.client</span><br><span class="line">    hostname = client.hostname</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hostname.startswith(scheme):</span><br><span class="line">        hostname = scheme + hostname</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hostname[len(scheme):]:</span><br><span class="line">        hostname += DEFAULT_HOST</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> client.userid <span class="keyword">and</span> <span class="string">'@'</span> <span class="keyword">not</span> <span class="keyword">in</span> hostname:</span><br><span class="line">        head, tail = hostname.split(<span class="string">'://'</span>)</span><br><span class="line"></span><br><span class="line">        credentials = client.userid</span><br><span class="line">        <span class="keyword">if</span> client.password:</span><br><span class="line">            credentials += <span class="string">':'</span> + client.password</span><br><span class="line"></span><br><span class="line">        hostname = head + <span class="string">'://'</span> + credentials + <span class="string">'@'</span> + tail</span><br><span class="line"></span><br><span class="line">    port = client.port <span class="keyword">if</span> client.port <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> DEFAULT_PORT</span><br><span class="line"></span><br><span class="line">    parsed = uri_parser.parse_uri(hostname, port)</span><br><span class="line"></span><br><span class="line">    dbname = parsed[<span class="string">'database'</span>] <span class="keyword">or</span> client.virtual_host</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> dbname <span class="keyword">in</span> (<span class="string">'/'</span>, <span class="keyword">None</span>):</span><br><span class="line">        dbname = <span class="string">'kombu_default'</span></span><br><span class="line"></span><br><span class="line">    options = &#123;</span><br><span class="line">        <span class="string">'auto_start_request'</span>: <span class="keyword">True</span>,</span><br><span class="line">        <span class="string">'ssl'</span>: client.ssl,</span><br><span class="line">        <span class="string">'connectTimeoutMS'</span>: (int(client.connect_timeout * <span class="number">1000</span>)</span><br><span class="line">                             <span class="keyword">if</span> client.connect_timeout <span class="keyword">else</span> <span class="keyword">None</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    options.update(client.transport_options)</span><br><span class="line">    options.update(parsed[<span class="string">'options'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hostname, dbname, options</span><br></pre></td></tr></table></figure><p><code>connection</code> 对应的就是 Kombu 中的 <code>Connection</code> ，Kombu 对外隐藏了 Transport ，Celery 在初始化阶段，会建立连接，调用路径是 <code>celery/app/base.py:Celery._connection</code> -&gt; <code>celery/app/amqp.py:AMQP.Connection</code> -&gt; <code>kombu/connection.py:Connection</code> 。传递参数 <code>transport_options</code> 就是在 Celery app 声明时配置的参数，具体可配置参数可以参考文档： <a href="https://docs.celeryq.dev/en/stable/userguide/configuration.html。" target="_blank" rel="noopener">https://docs.celeryq.dev/en/stable/userguide/configuration.html。</a></p><p>在我们的场景中，声明了以下参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BROKER_TRANSPORT_OPTIONS = &#123;</span><br><span class="line">    &quot;connect&quot;: False,</span><br><span class="line">    &quot;maxPoolSize&quot;: 5 if &quot;worker&quot; in process_cmdline else 2,</span><br><span class="line">    &quot;socketTimeoutMS&quot;: 5000,</span><br><span class="line">    &quot;connectTimeoutMS&quot;: 5000,</span><br><span class="line">    &quot;serverSelectionTimeoutMS&quot;: 5000,</span><br><span class="line">    &quot;w&quot;: 0,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Kombu 使用 MongoDB Transport 时，最终会带有这些参数创建 MongoDB 连接，所以不会出现此问题说描述的现象。</p><h2 id="Celery-改动背景"><a href="#Celery-改动背景" class="headerlink" title="Celery 改动背景"></a>Celery 改动背景</h2><p>@rmihael 上报了一个问题： <a href="https://github.com/celery/celery/issues/1047" target="_blank" rel="noopener">Celery events are not removed from MongoDB broker #1047</a> ，表示在使用 Celery Flower（Celery 监控组件）后，<code>messages</code> 中的事件不会清除，导致占用了大量的 MongoDB 存储空间。该 Issue 中讨论最终决定使用 MongoDB TTL 来解决此问题。</p><p>在 Kombu 4.x 开发周期中，@daevaorn 提交了 <a href="https://github.com/celery/kombu/pull/537" target="_blank" rel="noopener">MongoDB TTL support and refactorings #537</a> 用来支持 MongoDB TTL，在该 PR 中包含了大量与 TTL 无关的 commit，并且包含了一定的重构，commit 如下：</p><ul><li>Complete unit tests suit for MongoDB transport</li><li>Optional TTL support for MongoDB transport. AMQP TTL headers: x-messa… </li><li>Rearrange methods at MongoDB channel class</li><li>Another MongoDB transport clean up and refactor. Use of transport opt… </li><li>Opt-out for queue size calculation</li><li>Use natural sort for more FIFO semantic</li><li>Fix docstrings</li></ul><p>其中 <code>Optional TTL support for MongoDB transport.</code> 是最关键的改动，忽略 TTL 的改动，主要看建立 MongoDB 连接的改动。在 <code>Channel</code> Class 中新增了一些类变量用于标识当前配置，在 <code>_parse_uri</code> 中，将 SSL,connectTImeoutMS 从 <code>client</code> 替换为了 <code>self</code> ，并删除了 <code>options.update(client.transport_options)</code> 。其中删除了 <code>options.update(client.transport_options)</code> 是导致这个问题的关键。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> class Channel(virtual.Channel):</span><br><span class="line">     _client = None</span><br><span class="line">     supports_fanout = True</span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+    # Mutable containers. Shared by all class instances</span></span><br><span class="line">     _fanout_queues = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+    # Options</span></span><br><span class="line"><span class="addition">+    connect_timeout = None</span></span><br><span class="line"><span class="addition">+    ssl = False</span></span><br><span class="line"><span class="addition">+    capped_queue_size = 100000</span></span><br><span class="line"><span class="addition">+    ttl = False</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+    from_transport_options = (</span></span><br><span class="line"><span class="addition">+        virtual.Channel.from_transport_options</span></span><br><span class="line"><span class="addition">+        + ('connect_timeout', 'ssl', 'ttl', 'capped_queue_size'))</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">     def __init__(self, *vargs, **kwargs):</span><br><span class="line">         super(Channel, self).__init__(*vargs, **kwargs)</span><br><span class="line">         ...</span><br><span class="line"></span><br><span class="line">         ...</span><br><span class="line"></span><br><span class="line">    def _parse_uri(self, scheme='mongodb://'):</span><br><span class="line">        ...</span><br><span class="line">         options = &#123;</span><br><span class="line">             'auto_start_request': True,</span><br><span class="line"><span class="deletion">-            'ssl': client.ssl,</span></span><br><span class="line"><span class="deletion">-            'connectTimeoutMS': (int(client.connect_timeout * 1000)</span></span><br><span class="line"><span class="deletion">-                                 if client.connect_timeout else None),</span></span><br><span class="line"><span class="addition">+            'ssl': self.ssl,</span></span><br><span class="line"><span class="addition">+            'connectTimeoutMS': (int(self.connect_timeout * 1000)</span></span><br><span class="line"><span class="addition">+                                 if self.connect_timeout else None),</span></span><br><span class="line">         &#125;</span><br><span class="line"><span class="deletion">-        options.update(client.transport_options)</span></span><br><span class="line">         options.update(parsed['options'])</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Celery Kombu 代码管理感觉有些不清晰，在多个分支上想要对比非常困难。必要组件升级大版本进行全集测试是必要的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;产品组件 JobCenter 使用 Celery 实现异步任务中心，同时会运行 job-center-worker （celery work
      
    
    </summary>
    
    
      <category term="Python" scheme="https://zdyxry.github.io/tags/Python/"/>
    
      <category term="Celery" scheme="https://zdyxry.github.io/tags/Celery/"/>
    
  </entry>
  
  <entry>
    <title>Yum 寻找 Best Package 评分机制</title>
    <link href="https://zdyxry.github.io/2022/04/29/Yum-%E5%AF%BB%E6%89%BE-Best-Package-%E8%AF%84%E5%88%86%E6%9C%BA%E5%88%B6/"/>
    <id>https://zdyxry.github.io/2022/04/29/Yum-寻找-Best-Package-评分机制/</id>
    <published>2022-04-29T23:04:16.000Z</published>
    <updated>2022-08-28T04:18:55.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司产品最终交付形态是 ISO，在涉及一个产品的多个 OEM 场景时，会选择在标准版本的基础上，删除某些软件包，新增某些软件包的形式来减少构建时间。产品的 BaseOS 是 CentOS，包管理器是 RPM 系，也就需要使用 <code>rpm</code> / <code>yum</code> 等命令来实现。<br>其中新增某些软件包是使用 <code>yumdownloader</code> 来完成的。在 Yum Repository 中会包含同一软件包的多个版本，预期 <code>yumdownloader</code> 会下载 Yum Repository 中某个软件最新版本的包，比如 <code>yumdownloader zbs-5.1.2*</code> ，则会下载 zbs-5.1.2 大版本的最新 release 版本。</p><p>但是最近发现，从某个版本开始 <code>yumdownloader</code> 没有下载最新的软件包，反而停在了一个两个月之前构建的版本，于是开始调查原因。</p><h2 id="Yumdownloader"><a href="#Yumdownloader" class="headerlink" title="Yumdownloader"></a>Yumdownloader</h2><p><code>yumdownloader</code> 工具集是由 <code>yum-utils</code> 提供，同时还提供了 <code>repotrack</code>，<code>repoquery</code>, <code>reposync</code> 等有用的工具。<code>yumdownloader</code> 使用方式是 <code>yumdownloader $pkg</code> 即可。在 <code>yum-utils</code> 中会大量引用 <code>yum</code> module，因此需要同时查找两个 Git repo。</p><p><code>yum-utils</code> 代码仓库地址： <a href="https://github.com/rpm-software-management/yum-utils/blob/master/yumdownloader.py" target="_blank" rel="noopener">https://github.com/rpm-software-management/yum-utils/blob/master/yumdownloader.py</a><br><code>yum</code> 代码仓库地址：<a href="https://github.com/rpm-software-management/yum" target="_blank" rel="noopener">https://github.com/rpm-software-management/yum</a></p><h3 id="下载逻辑"><a href="#下载逻辑" class="headerlink" title="下载逻辑"></a>下载逻辑</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def main(self):</span><br><span class="line">    # Add command line option specific to yumdownloader</span><br><span class="line">    self.addCmdOptions()</span><br><span class="line">    ...</span><br><span class="line">    # make yumdownloader work as non root user.</span><br><span class="line">    if not self.setCacheDir():</span><br><span class="line">        self.logger.error(&quot;Error: Could not make cachedir, exiting&quot;)</span><br><span class="line">        sys.exit(50)</span><br><span class="line">    ...</span><br><span class="line">    # Setup yum (Ts, RPM db, Repo &amp; Sack)</span><br><span class="line">    self.doUtilYumSetup()</span><br><span class="line">    # Do the real action</span><br><span class="line">    self.exit_code = self.downloadPackages(opts)</span><br></pre></td></tr></table></figure><ul><li>解析命令行参数</li><li>检查执行用户权限</li><li>配置 Yum Repo 正确性</li><li>下载 RPM</li></ul><p>其中前几项不是很重要，直接看 <code>self.downloadPackages(opts)</code> 逻辑。主要做了以下几件事情：  </p><ol><li>根据 PKG 列表进行 Repo 中的查询，查询出所有的软件包；  </li><li>根据查询结果，进行解析匹配，其中精确匹配和模糊匹配会进行后续处理；</li><li>根据 RPM <code>name+arch</code> 作为 key 来将所有的 Pkg 列表转换为 Dict；</li><li>遍历 Dict，从列表中找到 Best Package ，并将其添加到下载列表中；</li><li>根据下载列表信息进行下载。</li></ol><p>Github: <a href="https://github.com/rpm-software-management/yum-utils/blob/master/yumdownloader.py#L136" target="_blank" rel="noopener">https://github.com/rpm-software-management/yum-utils/blob/master/yumdownloader.py#L136</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downloadPackages</span><span class="params">(self,opts)</span>:</span></span><br><span class="line">    </span><br><span class="line">    toDownload = [] <span class="comment"># 最终要下载的 RPM</span></span><br><span class="line"></span><br><span class="line">    packages = self.cmds</span><br><span class="line">    <span class="keyword">for</span> pkg <span class="keyword">in</span> packages:</span><br><span class="line">        toActOn = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pkg <span class="keyword">or</span> pkg[<span class="number">0</span>] != <span class="string">'@'</span>:</span><br><span class="line">            pkgnames = [pkg] <span class="comment"># 如果 PKG 名称不以 `@` 开头，那么就是单个软件包；如果以 `@` 开头，那么表示是一个 Group；</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># Group 处理逻辑，忽略</span></span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">        pos = self.pkgSack.returnPackages(patterns=pkgnames) <span class="comment"># 在 Yum repo 中根据 pkgnames 来获取查询到的包列表</span></span><br><span class="line">        exactmatch, matched, unmatched = parsePackages(pos, pkgnames) <span class="comment"># 根据 pkgnames 名称 从 pos 中解析具体的匹配结果，其中如果精确匹配则添加到 exactmatch，如果模糊匹配则添加到 matched。在本文场景下所有匹配为模糊匹配，所以在 matched 列表中</span></span><br><span class="line">        installable = (exactmatch + matched) <span class="comment"># 最终可安装的是精确匹配和模糊匹配的集合</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> installable:</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> newpkg <span class="keyword">in</span> installable:</span><br><span class="line">            toActOn.extend(_best_convert_pkg2srcpkgs(self, opts, newpkg)) <span class="comment"># 根据解析结果，将所有处于 installable 中的包都找到具体来源</span></span><br><span class="line">        <span class="keyword">if</span> toActOn:</span><br><span class="line">            pkgGroups = self._groupPackages(toActOn) <span class="comment"># 使用 RPM `name` 和 `arch` 针对 toActOn 列表进行初步分组，转换为 dict</span></span><br><span class="line">            <span class="keyword">for</span> group <span class="keyword">in</span> pkgGroups:</span><br><span class="line">                pkgs = pkgGroups[group]</span><br><span class="line">                <span class="keyword">if</span> opts.source:</span><br><span class="line">                    ...     <span class="comment"># 根据 yumdownloader 命令参数进行额外的处理，忽略</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    toDownload.extend(self.bestPackagesFromList(pkgs)) <span class="comment"># 从 pkgs 列表中选择 best Package，然后添加到 toDownload 列表中</span></span><br><span class="line">                        </span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># set localpaths</span></span><br><span class="line">    <span class="keyword">for</span> pkg <span class="keyword">in</span> toDownload:</span><br><span class="line">        pkg.repo.copy_local = <span class="keyword">True</span></span><br><span class="line">        pkg.repo.cache = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># use downloader from YumBase</span></span><br><span class="line">    exit_code = <span class="number">0</span></span><br><span class="line">    probs = self.downloadPkgs(toDownload) <span class="comment"># 下载具体 RPM </span></span><br><span class="line">    <span class="keyword">if</span> probs:</span><br><span class="line">        exit_code = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> probs:</span><br><span class="line">            <span class="keyword">for</span> error <span class="keyword">in</span> probs[key]:</span><br><span class="line">                self.logger.error(<span class="string">'%s: %s'</span>, key, error)</span><br><span class="line">    <span class="keyword">return</span> exit_code</span><br></pre></td></tr></table></figure></p><p>在我的场景中，问题出在查找 Best Package 步骤中，相关日志如下，可以观察到在 Yum repo 中查询到了 zbs-5.1.2 所有的 release RPM，分别为 rc1 ,rc2 一直到 rc14 ，排序方式是字母序。 parsePackages 解析出所有的 PKG 均在 matched 中，因为都是模糊匹配，最终传入 bestPackagesFromList 方法中的参数是所有到的 release RPM，预期是返回最新的 release RPM ，即 zbs-5.1.2-rc14，但是返回的是 rc7 。接下来需要调查 bestPackagesFromList 是如何判断的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'zbs-5.1.2*'</span>]</span><br><span class="line">pos: [&lt;YumAvailablePackageSqlite : zbs-5.1.2-rc1.0.release.git.g0cb56434e.el7.SMTX.HCI.x86_64 (0x2bf6e50)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc10.0.release.git.g228f49070.el7.SMTX.HCI.x86_64 (0x2bf6dd0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc11.0.release.git.g6d5d763ee.el7.SMTX.HCI.x86_64 (0x2bf6d90)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc12.0.release.git.g9a6400652.el7.SMTX.HCI.x86_64 (0x2bf6bd0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc13.0.release.git.g339708733.el7.SMTX.HCI.x86_64 (0x2bf6f90)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc14.0.release.git.g42733ba17.el7.SMTX.HCI.x86_64 (0x2bf6fd0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc2.0.release.git.gfa5212d39.el7.SMTX.HCI.x86_64 (0x2c03050)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc3.0.release.git.ge4ecabe7b.el7.SMTX.HCI.x86_64 (0x2c03090)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc4.0.release.git.g6e9ed979b.el7.SMTX.HCI.x86_64 (0x2c030d0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc5.0.release.git.gfa8bab6ad.el7.SMTX.HCI.x86_64 (0x2c03110)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc6.0.release.git.g51f0f1277.el7.SMTX.HCI.x86_64 (0x2c03150)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc7.0.release.git.gccd6dbf2a.el7.SMTX.HCI.x86_64 (0x2c03190)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc8.0.release.git.g763bb9046.el7.SMTX.HCI.x86_64 (0x2c031d0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc9.0.release.git.g238ab2320.el7.SMTX.HCI.x86_64 (0x2c03210)&gt;]</span><br><span class="line">exactmatch: []</span><br><span class="line">matched: [&lt;YumAvailablePackageSqlite : zbs-5.1.2-rc14.0.release.git.g42733ba17.el7.SMTX.HCI.x86_64 (0x2bf6fd0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc13.0.release.git.g339708733.el7.SMTX.HCI.x86_64 (0x2bf6f90)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc2.0.release.git.gfa5212d39.el7.SMTX.HCI.x86_64 (0x2c03050)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc7.0.release.git.gccd6dbf2a.el7.SMTX.HCI.x86_64 (0x2c03190)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc3.0.release.git.ge4ecabe7b.el7.SMTX.HCI.x86_64 (0x2c03090)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc9.0.release.git.g238ab2320.el7.SMTX.HCI.x86_64 (0x2c03210)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc6.0.release.git.g51f0f1277.el7.SMTX.HCI.x86_64 (0x2c03150)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc4.0.release.git.g6e9ed979b.el7.SMTX.HCI.x86_64 (0x2c030d0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc10.0.release.git.g228f49070.el7.SMTX.HCI.x86_64 (0x2bf6dd0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc8.0.release.git.g763bb9046.el7.SMTX.HCI.x86_64 (0x2c031d0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc12.0.release.git.g9a6400652.el7.SMTX.HCI.x86_64 (0x2bf6bd0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc11.0.release.git.g6d5d763ee.el7.SMTX.HCI.x86_64 (0x2bf6d90)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc1.0.release.git.g0cb56434e.el7.SMTX.HCI.x86_64 (0x2bf6e50)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc5.0.release.git.gfa8bab6ad.el7.SMTX.HCI.x86_64 (0x2c03110)&gt;]</span><br><span class="line">unmatched: []</span><br><span class="line">pkgGroups: &#123;<span class="string">'zbs.x86_64'</span>: [&lt;YumAvailablePackageSqlite : zbs-5.1.2-rc14.0.release.git.g42733ba17.el7.SMTX.HCI.x86_64 (0x2bf6fd0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc13.0.release.git.g339708733.el7.SMTX.HCI.x86_64 (0x2bf6f90)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc2.0.release.git.gfa5212d39.el7.SMTX.HCI.x86_64 (0x2c03050)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc7.0.release.git.gccd6dbf2a.el7.SMTX.HCI.x86_64 (0x2c03190)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc3.0.release.git.ge4ecabe7b.el7.SMTX.HCI.x86_64 (0x2c03090)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc9.0.release.git.g238ab2320.el7.SMTX.HCI.x86_64 (0x2c03210)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc6.0.release.git.g51f0f1277.el7.SMTX.HCI.x86_64 (0x2c03150)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc4.0.release.git.g6e9ed979b.el7.SMTX.HCI.x86_64 (0x2c030d0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc10.0.release.git.g228f49070.el7.SMTX.HCI.x86_64 (0x2bf6dd0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc8.0.release.git.g763bb9046.el7.SMTX.HCI.x86_64 (0x2c031d0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc12.0.release.git.g9a6400652.el7.SMTX.HCI.x86_64 (0x2bf6bd0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc11.0.release.git.g6d5d763ee.el7.SMTX.HCI.x86_64 (0x2bf6d90)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc1.0.release.git.g0cb56434e.el7.SMTX.HCI.x86_64 (0x2bf6e50)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc5.0.release.git.gfa8bab6ad.el7.SMTX.HCI.x86_64 (0x2c03110)&gt;]&#125;</span><br><span class="line">pkgs: [&lt;YumAvailablePackageSqlite : zbs-5.1.2-rc14.0.release.git.g42733ba17.el7.SMTX.HCI.x86_64 (0x2bf6fd0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc13.0.release.git.g339708733.el7.SMTX.HCI.x86_64 (0x2bf6f90)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc2.0.release.git.gfa5212d39.el7.SMTX.HCI.x86_64 (0x2c03050)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc7.0.release.git.gccd6dbf2a.el7.SMTX.HCI.x86_64 (0x2c03190)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc3.0.release.git.ge4ecabe7b.el7.SMTX.HCI.x86_64 (0x2c03090)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc9.0.release.git.g238ab2320.el7.SMTX.HCI.x86_64 (0x2c03210)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc6.0.release.git.g51f0f1277.el7.SMTX.HCI.x86_64 (0x2c03150)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc4.0.release.git.g6e9ed979b.el7.SMTX.HCI.x86_64 (0x2c030d0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc10.0.release.git.g228f49070.el7.SMTX.HCI.x86_64 (0x2bf6dd0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc8.0.release.git.g763bb9046.el7.SMTX.HCI.x86_64 (0x2c031d0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc12.0.release.git.g9a6400652.el7.SMTX.HCI.x86_64 (0x2bf6bd0)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc11.0.release.git.g6d5d763ee.el7.SMTX.HCI.x86_64 (0x2bf6d90)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc1.0.release.git.g0cb56434e.el7.SMTX.HCI.x86_64 (0x2bf6e50)&gt;, &lt;YumAvailablePackageSqlite : zbs-5.1.2-rc5.0.release.git.gfa8bab6ad.el7.SMTX.HCI.x86_64 (0x2c03110)&gt;]</span><br><span class="line">toDownload: [&lt;YumAvailablePackageSqlite : zbs-5.1.2-rc7.0.release.git.gccd6dbf2a.el7.SMTX.HCI.x86_64 (0x2c03190)&gt;]</span><br></pre></td></tr></table></figure><h2 id="Yum"><a href="#Yum" class="headerlink" title="Yum"></a>Yum</h2><p><code>yumdownloader</code> 是 <code>yum</code> module 的功能分装，具体的 <code>bestPackagesFromList</code> 是在 <code>yum</code> module 中实现的。<code>bestPackagesFromList</code> 自身先根据 pkg arch 来进行分类，其中判断依据为：</p><p>Github： <a href="https://github.com/rpm-software-management/yum/blob/master/rpmUtils/arch.py#L153:5" target="_blank" rel="noopener">https://github.com/rpm-software-management/yum/blob/master/rpmUtils/arch.py#L153:5</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># dict mapping arch -&gt; ( multicompat, best personality, biarch personality )</span><br><span class="line">multilibArches = &#123; &quot;x86_64&quot;:  ( &quot;athlon&quot;, &quot;x86_64&quot;, &quot;athlon&quot; ),</span><br><span class="line">                   &quot;sparc64v&quot;: ( &quot;sparcv9v&quot;, &quot;sparcv9v&quot;, &quot;sparc64v&quot; ),</span><br><span class="line">                   &quot;sparc64&quot;: ( &quot;sparcv9&quot;, &quot;sparcv9&quot;, &quot;sparc64&quot; ),</span><br><span class="line">                   &quot;ppc64&quot;:   ( &quot;ppc&quot;, &quot;ppc&quot;, &quot;ppc64&quot; ),</span><br><span class="line">                   &quot;s390x&quot;:   ( &quot;s390&quot;, &quot;s390x&quot;, &quot;s390&quot; ),</span><br><span class="line">                   &#125;</span><br></pre></td></tr></table></figure></p><p>Github: <a href="https://github.com/rpm-software-management/yum/blob/master/yum/__init__.py#L4432" target="_blank" rel="noopener">https://github.com/rpm-software-management/yum/blob/master/yum/__init__.py#L4432</a>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bestPackagesFromList</span><span class="params">(self, pkglist, arch=None, single_name=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                            req=None)</span>:</span></span><br><span class="line">    <span class="string">"""Return the best packages from a list of packages.  This</span></span><br><span class="line"><span class="string">    function is multilib aware, so that it will not compare</span></span><br><span class="line"><span class="string">    multilib to singlelib packages.</span></span><br><span class="line"><span class="string">    :param pkglist: the list of packages to return the best</span></span><br><span class="line"><span class="string">        packages from</span></span><br><span class="line"><span class="string">    :param arch: packages will be selected that are compatible</span></span><br><span class="line"><span class="string">        with the architecture specified by *arch*</span></span><br><span class="line"><span class="string">    :param single_name: whether to return a single package name</span></span><br><span class="line"><span class="string">    :param req: the requirement from the user</span></span><br><span class="line"><span class="string">    :return: a list of the best packages from *pkglist*</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    returnlist = []</span><br><span class="line">    compatArchList = self.arch.get_arch_list(arch)</span><br><span class="line">    multiLib = []</span><br><span class="line">    singleLib = []</span><br><span class="line">    noarch = []</span><br><span class="line">    <span class="keyword">for</span> po <span class="keyword">in</span> pkglist: <span class="comment"># 根据架构来进行筛选，x86_64 是 multiLibArch</span></span><br><span class="line">        <span class="keyword">if</span> po.arch <span class="keyword">not</span> <span class="keyword">in</span> compatArchList:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">elif</span> po.arch <span class="keyword">in</span> (<span class="string">"noarch"</span>):</span><br><span class="line">            noarch.append(po)</span><br><span class="line">        <span class="keyword">elif</span> isMultiLibArch(arch=po.arch):</span><br><span class="line">            multiLib.append(po) <span class="comment"># 最终所有 pkg 添加到 multiLib 中</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            singleLib.append(po)</span><br><span class="line">            </span><br><span class="line">    <span class="comment"># we now have three lists.  find the best package(s) of each</span></span><br><span class="line">    multi = self._bestPackageFromList(multiLib, req=req) <span class="comment"># 根据不同架构找到 best package</span></span><br><span class="line">    single = self._bestPackageFromList(singleLib, req=req)</span><br><span class="line">    no = self._bestPackageFromList(noarch, req=req)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> returnlist</span><br></pre></td></tr></table></figure><p>继续追踪 <code>_bestPackageFromList</code> 的实现，可以看到</p><p>Github: <a href="https://github.com/rpm-software-management/yum/blob/master/yum/__init__.py#L4409" target="_blank" rel="noopener">https://github.com/rpm-software-management/yum/blob/master/yum/__init__.py#L4409</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_bestPackageFromList</span><span class="params">(self, pkglist, req=None)</span>:</span></span><br><span class="line">    <span class="string">"""take list of package objects and return the best package object.</span></span><br><span class="line"><span class="string">        If the list is empty, return None. </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Note: this is not aware of multilib so make sure you're only</span></span><br><span class="line"><span class="string">        passing it packages of a single arch group.</span></span><br><span class="line"><span class="string">        :param pkglist: the list of packages to return the best</span></span><br><span class="line"><span class="string">            packages from</span></span><br><span class="line"><span class="string">        :param req: the requirement from the user</span></span><br><span class="line"><span class="string">        :return: a list of the best packages from *pkglist*</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ...</span><br><span class="line">    bestlist = self._compare_providers(pkglist, reqpo=<span class="keyword">None</span>, req=req)</span><br><span class="line">    <span class="keyword">return</span> bestlist[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>终于找到最关键的部分： <code>_compare_providers</code> ，这是一个巨大的函数，300行，根据注释可以看到主要用户给 pkg 打分：</p><p>Github: <a href="https://github.com/rpm-software-management/yum/blob/master/yum/depsolve.py#L1465" target="_blank" rel="noopener">https://github.com/rpm-software-management/yum/blob/master/yum/depsolve.py#L1465</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_compare_providers</span><span class="params">(self, pkgs, reqpo, req=None)</span>:</span></span><br><span class="line">    <span class="string">"""take the list of pkgs and score them based on the requesting package</span></span><br><span class="line"><span class="string">        return a dictionary of po=score"""</span></span><br><span class="line">    self.verbose_logger.log(logginglevels.DEBUG_4,</span><br><span class="line">            _(<span class="string">"Running compare_providers() for %s"</span>) %(str(pkgs)))</span><br></pre></td></tr></table></figure></p><p>接下来是具体的打分流程，先根据 repo id 的字母序进行过滤，如果多个 repo 均提供了同一版本的 PKG，那么会根据 repo 字母序进行选取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Do a NameArch filtering, based on repo. __cmp__</span></span><br><span class="line">unique_nevra_pkgs = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> pkg <span class="keyword">in</span> pkgs:</span><br><span class="line">    <span class="keyword">if</span> (pkg.pkgtup <span class="keyword">in</span> unique_nevra_pkgs <span class="keyword">and</span></span><br><span class="line">        unique_nevra_pkgs[pkg.pkgtup].repo &lt;= pkg.repo):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    unique_nevra_pkgs[pkg.pkgtup] = pkg</span><br><span class="line">pkgs = unique_nevra_pkgs.values()</span><br></pre></td></tr></table></figure><p>其中 pkg.repo 的实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Repository</span>:</span></span><br><span class="line">    <span class="string">"""this is an actual repository object"""</span>       </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, repoid)</span>:</span></span><br><span class="line">        self.id = repoid</span><br><span class="line">        self.quick_enable_disable = &#123;&#125;</span><br><span class="line">        self.disable()</span><br><span class="line">        self._xml2sqlite_local = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__cmp__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="string">""" Sort base class repos. by alphanumeric on their id, also</span></span><br><span class="line"><span class="string">            see __cmp__ in YumRepository(). """</span></span><br><span class="line">        <span class="keyword">if</span> self.id &gt; other.id:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> self.id &lt; other.id:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>初始化 pkgresults ，其中 value 是对应的分数，第一步打分是检查目标 pkg 是否已经存在于当前主机上，会通过查询 rpmdb 来获取信息，如果已经存在了，那么这种情况是升级情况，需要与当前主机上 newest 的 pkg 进行比较，如果当前主机上最新的包版本小于 pkg，则 +5 分，如果等于则 +1000 分，如果小于则 -1024 分。如果当前主机上没有，则跳过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pkgresults = &#123;&#125;</span><br><span class="line">penalize = set()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pkg <span class="keyword">in</span> pkgs:</span><br><span class="line">    pkgresults[pkg] = <span class="number">0</span> <span class="comment"># 初始化各个 pkg 的分数为 0 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hand this off to our plugins</span></span><br><span class="line">self.plugins.run(<span class="string">"compare_providers"</span>, providers_dict=pkgresults, </span><br><span class="line">                              reqpo=reqpo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> pkg <span class="keyword">in</span> pkgresults.keys():</span><br><span class="line">    rpmdbpkgs = self.rpmdb.searchNevra(name=pkg.name)</span><br><span class="line">    <span class="keyword">if</span> rpmdbpkgs:</span><br><span class="line">        <span class="comment">#  We only want to count things as "installed" if they are</span></span><br><span class="line">        <span class="comment"># older than what we are comparing, because this then an update</span></span><br><span class="line">        <span class="comment"># so we give preference. If they are newer then obsoletes/etc.</span></span><br><span class="line">        <span class="comment"># could play a part ... this probably needs a better fix.</span></span><br><span class="line">        newest = sorted(rpmdbpkgs)[<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> newest.verLT(pkg):</span><br><span class="line">            <span class="comment"># give pkgs which are updates just a SLIGHT edge</span></span><br><span class="line">            <span class="comment"># we should also make sure that any pkg</span></span><br><span class="line">            <span class="comment"># we are giving an edge to is not obsoleted by</span></span><br><span class="line">            <span class="comment"># something else in the transaction. :(</span></span><br><span class="line">            <span class="comment"># there are many ways I hate this - this is but one</span></span><br><span class="line">            pkgresults[pkg] += <span class="number">5</span></span><br><span class="line">        <span class="keyword">elif</span> newest.verEQ(pkg):</span><br><span class="line">            <span class="comment">#  We get here from bestPackagesFromList(), give a giant</span></span><br><span class="line">            <span class="comment"># bump to stuff that is already installed.</span></span><br><span class="line">            pkgresults[pkg] += <span class="number">1000</span></span><br><span class="line">        <span class="keyword">elif</span> newest.verGT(pkg):</span><br><span class="line">            <span class="comment"># if the version we're looking at is older than what we have installed</span></span><br><span class="line">            <span class="comment"># score it down like we would an obsoleted pkg</span></span><br><span class="line">            pkgresults[pkg] -= <span class="number">1024</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># just b/c they're not installed pkgs doesn't mean they should</span></span><br><span class="line">        <span class="comment"># be ignored entirely. Just not preferred</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>O(n^2)遍历 pkgs，先获取 Yum repo 中 newest version，然后保存下来，进行比对，如果当前 pkg 不等于 newest version，则 -1024 分。当前 repo 中匹配的 pkgs 列表一共 14 个， 遍历结束后每个 pkg 的分数应该是 13 * (-1024) = -13312。如果 pkg 被 nextpkg 所废除，那么 pkg 分数继续 -1024。如果传递了 arch 相关参数，那么会根据 arch 进行比较，如果哪个 pkg 提供了当前 arch 的包，那么会 +5 分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">lpos = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> po <span class="keyword">in</span> pkgs:</span><br><span class="line">    <span class="keyword">for</span> nextpo <span class="keyword">in</span> pkgs:</span><br><span class="line">        <span class="keyword">if</span> po == nextpo:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#  If this package isn't the latest version of said package,</span></span><br><span class="line">        <span class="comment"># treat it like it's obsoleted. The problem here is X-1</span></span><br><span class="line">        <span class="comment"># accidentally provides FOO, so you release X-2 without the</span></span><br><span class="line">        <span class="comment"># provide, but X-1 is still picked over a real provider.</span></span><br><span class="line">        <span class="keyword">if</span> po.name <span class="keyword">not</span> <span class="keyword">in</span> lpos:</span><br><span class="line">            lpos[po.name] = self.pkgSack.returnNewestByName(po.name)[:<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lpos[po.name] <span class="keyword">or</span> <span class="keyword">not</span> po.verEQ(lpos[po.name][<span class="number">0</span>]):</span><br><span class="line">            pkgresults[po] -= <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">        obsoleted = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> po.obsoletedBy([nextpo]):</span><br><span class="line">            obsoleted = <span class="keyword">True</span></span><br><span class="line">            pkgresults[po] -= <span class="number">1024</span></span><br><span class="line">                        </span><br><span class="line">            self.verbose_logger.log(logginglevels.DEBUG_4,</span><br><span class="line">                _(<span class="string">"%s obsoletes %s"</span>) % (nextpo, po))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> reqpo:</span><br><span class="line">            arches = (reqpo.arch, self.arch.bestarch)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            arches = (self.arch.bestarch,)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> thisarch <span class="keyword">in</span> arches:</span><br><span class="line">            res = _compare_arch_distance(po, nextpo, thisarch)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> res:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.verbose_logger.log(logginglevels.DEBUG_4,                   </span><br><span class="line">               _(<span class="string">'archdist compared %s to %s on %s\n  Winner: %s'</span> % (po, nextpo, thisarch, res)))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> res == po:</span><br><span class="line">                pkgresults[po] += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># End of O(N*N): for nextpo in pkgs:</span></span><br></pre></td></tr></table></figure><p>接下来会根据 pkg 是否存在 source rpm，是否是弱引用，是否是直接引用，是否存在冲突等进行分数的增减。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># End of O(N*N): for nextpo in pkgs:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Respect the repository priority for each provider, the default is 80</span></span><br><span class="line">pkgresults[po] += (<span class="number">100</span> - po.repo.compare_providers_priority) * <span class="number">10</span></span><br><span class="line">self.verbose_logger.log(logginglevels.DEBUG_4,</span><br><span class="line">    _(<span class="string">'compare_providers_priority for %s is %s'</span> % (po, po.repo.compare_providers_priority)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _common_sourcerpm(po, reqpo):</span><br><span class="line">    self.verbose_logger.log(logginglevels.DEBUG_4,</span><br><span class="line">        _(<span class="string">'common sourcerpm %s and %s'</span> % (po, reqpo)))</span><br><span class="line">    pkgresults[po] += <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> _weak_req(po, reqpo):</span><br><span class="line">    self.verbose_logger.log(logginglevels.DEBUG_4,</span><br><span class="line">        _(<span class="string">'weak req %s and %s'</span> % (po, reqpo)))</span><br><span class="line">    pkgresults[po] += <span class="number">666</span></span><br><span class="line"><span class="keyword">if</span> _info_req(po, reqpo):</span><br><span class="line">    self.verbose_logger.log(logginglevels.DEBUG_4,</span><br><span class="line">        _(<span class="string">'informational req %s and %s'</span> % (po, reqpo)))</span><br><span class="line">    pkgresults[po] += <span class="number">333</span></span><br><span class="line"><span class="keyword">if</span> _conflict_req(po, reqpo):</span><br><span class="line">    self.verbose_logger.log(logginglevels.DEBUG_4,</span><br><span class="line">        _(<span class="string">'conflict req %s and %s'</span> % (po, reqpo)))</span><br><span class="line">    penalize.add(po)</span><br><span class="line"><span class="keyword">if</span> self.isPackageInstalled(po.base_package_name):</span><br><span class="line">    self.verbose_logger.log(logginglevels.DEBUG_4,</span><br><span class="line">        _(<span class="string">'base package %s is installed for %s'</span> % (po.base_package_name, po)))</span><br><span class="line">    pkgresults[po] += <span class="number">5</span> <span class="comment"># Same as before - - but off of base package name</span></span><br><span class="line"><span class="keyword">if</span> reqpo:</span><br><span class="line">    cpl = _common_prefix_len(po.name, reqpo.name)</span><br><span class="line">    <span class="keyword">if</span> cpl &gt; <span class="number">2</span>:</span><br><span class="line">        self.verbose_logger.log(logginglevels.DEBUG_4,</span><br><span class="line">            _(<span class="string">'common prefix of %s between %s and %s'</span> % (cpl, po, reqpo)))</span><br><span class="line">    </span><br><span class="line">        pkgresults[po] += cpl*<span class="number">2</span></span><br></pre></td></tr></table></figure><p>当基本分数进行打分完成后， 还存在多个 best pkg，那么会根据当前 OS 安装 pkg 所需依赖数量进行判定，依赖数量越少，则分数越高，最终依赖数量少的 pkg 分数 +1。此时部分 pkg 分数从 -13112 变为 -13111。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  If we have more than one "best", see what would happen if we picked</span></span><br><span class="line"><span class="comment"># each package ... ie. what things do they require that _aren't_ already</span></span><br><span class="line"><span class="comment"># installed/to-be-installed. In theory this can screw up due to:</span></span><br><span class="line"><span class="comment">#   pkgA =&gt; requires pkgX</span></span><br><span class="line"><span class="comment">#   pkgB =&gt; requires pkgY, requires pkgZ</span></span><br><span class="line"><span class="comment"># ...but pkgX requires 666 other things. Going recursive is</span></span><br><span class="line"><span class="comment"># "non-trivial" though, python != prolog. This seems to do "better"</span></span><br><span class="line"><span class="comment"># from simple testing though.</span></span><br><span class="line">bestnum = max(pkgresults.values()) <span class="comment"># 将当前 pkg 分数最大的置为 bestnum</span></span><br><span class="line">rec_depsolve = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> po <span class="keyword">in</span> pkgs:</span><br><span class="line">    <span class="keyword">if</span> pkgresults[po] != bestnum: <span class="comment"># 如果当前 pkg 分数不等于最高分，跳过</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    rec_depsolve[po] = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> len(rec_depsolve) &gt; <span class="number">1</span>: <span class="comment"># 如果仍有多个 pkg，则进行依赖判定</span></span><br><span class="line">    <span class="keyword">for</span> po <span class="keyword">in</span> rec_depsolve:</span><br><span class="line">        fake_txmbr = TransactionMember(po)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#  Note that this is just requirements, so you could also have</span></span><br><span class="line">        <span class="comment"># 4 requires for a single package. This might be fixable, if</span></span><br><span class="line">        <span class="comment"># needed, but given the above it's probably better to leave it</span></span><br><span class="line">        <span class="comment"># like this.</span></span><br><span class="line">        reqs = self._checkInstall(fake_txmbr) <span class="comment"># 检查安装 pkg 所需依赖</span></span><br><span class="line">        rec_depsolve[po] = len(reqs) <span class="comment"># 将依赖数量置为当前 pkg 的分数</span></span><br><span class="line"></span><br><span class="line">    bestnum = min(rec_depsolve.values()) <span class="comment"># 找到依赖数量最少的分数作为 bestnum </span></span><br><span class="line">    self.verbose_logger.log(logginglevels.DEBUG_4,</span><br><span class="line">                            _(<span class="string">'requires minimal: %d'</span>) % bestnum)</span><br><span class="line">    <span class="keyword">for</span> po <span class="keyword">in</span> rec_depsolve:</span><br><span class="line">        <span class="keyword">if</span> rec_depsolve[po] == bestnum: </span><br><span class="line">            self.verbose_logger.log(logginglevels.DEBUG_4,</span><br><span class="line">                    _(<span class="string">' Winner: %s'</span>) % po)</span><br><span class="line">            pkgresults[po] += <span class="number">1</span> <span class="comment"># 将依赖数量结果填充会 pkgresults 中，依赖数量最少的分数 +1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num = rec_depsolve[po]</span><br><span class="line">            self.verbose_logger.log(logginglevels.DEBUG_4,</span><br><span class="line">                    _(<span class="string">' Loser(with %d): %s'</span>) % (num, po))</span><br></pre></td></tr></table></figure><p>将当前分数最高的置为 bestnum，遍历 pkgs，如果当前 pkg 分数等于 bestnum，则将其分数 +1000，并将其分数 +(pkg.name)*-1 。如果 -13111 + 1000 +(-3) = -12114。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  We don't want to decide to use a "shortest first", if something else</span></span><br><span class="line"><span class="comment"># has told us to pick something else. But we want to pick between</span></span><br><span class="line"><span class="comment"># multiple "best" packages. So we spike all the best packages (so</span></span><br><span class="line"><span class="comment"># only those can win) and then bump them down by package name length.</span></span><br><span class="line">bestnum = max(pkgresults.values())</span><br><span class="line"><span class="keyword">for</span> po <span class="keyword">in</span> pkgs:</span><br><span class="line">    <span class="keyword">if</span> pkgresults[po] != bestnum:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    pkgresults[po] += <span class="number">1000</span></span><br><span class="line">    pkgresults[po] += (len(po.name)*<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bump down any packages that we identified as "last-resort" in such a</span></span><br><span class="line"><span class="comment"># way that they all score below the worst overall score whilst keeping</span></span><br><span class="line"><span class="comment"># their relative differences.</span></span><br><span class="line">shift = max(pkgresults.values()) - min(pkgresults.values()) + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> po <span class="keyword">in</span> penalize:</span><br><span class="line">    pkgresults[po] -= shift</span><br><span class="line"></span><br><span class="line">bestorder = sorted(pkgresults.items(),</span><br><span class="line">                   key=<span class="keyword">lambda</span> x: (x[<span class="number">1</span>], x[<span class="number">0</span>]), reverse=<span class="keyword">True</span>)</span><br><span class="line">self.verbose_logger.log(logginglevels.DEBUG_4,</span><br><span class="line">        _(<span class="string">'Best Order: %s'</span> % str(bestorder)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> bestorder</span><br></pre></td></tr></table></figure><p>最终根据 pkg 分数进行重新排序，返回第一个结果。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>发现这个问题最初是猜测是 Yum Repository 配置问题，阅读代码之后判定是 RPM 在某个版本依赖发生了改变，增加了某些依赖项，导致了 Yum 打分认为其分数较低，从而无法通过 yumdownloader 下载最新的 RPM。与相关同事确认，rc8 版本开始增加了部分依赖，调查结束。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;公司产品最终交付形态是 ISO，在涉及一个产品的多个 OEM 场景时，会选择在标准版本的基础上，删除某些软件包，新增某些软件包的形式来减少构
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://zdyxry.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>使用 init 进程运行 Container</title>
    <link href="https://zdyxry.github.io/2022/03/05/%E4%BD%BF%E7%94%A8-init-%E8%BF%9B%E7%A8%8B%E8%BF%90%E8%A1%8C-Container/"/>
    <id>https://zdyxry.github.io/2022/03/05/使用-init-进程运行-Container/</id>
    <published>2022-03-05T15:10:39.000Z</published>
    <updated>2022-08-28T04:18:55.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>关注过 Bare Metal 相关项目的同学应该都了解过系统的启动流程、如何快速的置备一台物理服务器等之类的实现方式，通常都需要运行一个 LiveOS 来实现某些动作。<br>在 Tinkerbell 项目中，使用 Linuxkit 来作为 LiveOS，Plunder 项目中使用 BOOTy 来作为 LiveOS。前几天 @thebsdbox 将 BOOTy 中的一部分抽离了出来，作为 ginit 展示主要的实现方式，可以更好的让我们理解安装环节中的具体细节。 今天来看一下这个项目。</p><p>如果安装一个 CentOS，那么通常是会通过 kernel + initramfs.img 启动，initramfs.img 中会包含 systemd 、anaconda、dracut 等一些列组件，然后通过 systemd 指定不同的 Target 所属/依赖/顺序来完成最终 Anaconda 调用。Anaconda 通过解析 <code>/proc/cmdline</code> 中的 KickStart 参数来决定自己的安装方式。</p><p>ginit 项目展示了以下内容：</p><ul><li>制作 initramfs.img </li><li>通过 Container image 制作一个 RAW image</li><li>通过 QEMU 使用 RAW image 和 Linux Kernel 来运行一个虚拟机</li><li>ginit 自动运行 Container 中 entrypoint 指令</li></ul><h2 id="流程演示"><a href="#流程演示" class="headerlink" title="流程演示"></a>流程演示</h2><h3 id="通过-Container-image-制作一个-RAW-image"><a href="#通过-Container-image-制作一个-RAW-image" class="headerlink" title="通过 Container image 制作一个 RAW image"></a>通过 Container image 制作一个 RAW image</h3><p>RAW image 中最终不会包含 Kernel 部分，以 Nginx Container 为例。提取 nginx:latest image 中的 <code>Entrypoint</code> ，通过 <code>dd</code> 置备一个 RAW image，并格式化为 ext4 ，raw image 作为 loop 设备挂载到本地，通过 <code>docker export</code> 将 Nginx Image 拷贝到挂载点下，卸载挂载点，最终 RAW image 包含了 Nginx Container 的所有内容。这里的 RAW image 因为不包含 kernel，所以无法直接启动，只是作为后续动作的依赖。</p><p>Nginx Container 默认的 <code>Entrypoint</code> 是 <code>docker-entrypoint.sh</code> ，通过这个脚本来做一些参数检查动作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo &quot;Lets build you a disk image!&quot;</span><br><span class="line">docker pull $1</span><br><span class="line">ENTRYPOINT=$(docker inspect -f &apos;&#123;&#123;.Config.Entrypoint&#125;&#125;&apos; $1 | sed &apos;s/[][]//g&apos;)</span><br><span class="line">echo &quot;Creating a 200MB Disk&quot;</span><br><span class="line">dd if=/dev/zero of=disk.img bs=1024k count=200</span><br><span class="line">mkfs.ext4 -F disk.img</span><br><span class="line">mkdir -p /tmp/disk</span><br><span class="line">mount -t ext4 -o loop disk.img /tmp/disk/</span><br><span class="line">echo &quot;Converting $1 to disk image&quot;</span><br><span class="line">docker create --name exporter $1 null</span><br><span class="line">docker export exporter | tar xv -C /tmp/disk</span><br><span class="line">docker rm exporter</span><br><span class="line">umount /tmp/disk</span><br><span class="line">echo The command $ENTRYPOINT will start this container</span><br></pre></td></tr></table></figure><h3 id="使用-ginit-制作-initramfs-img"><a href="#使用-ginit-制作-initramfs-img" class="headerlink" title="使用 ginit 制作 initramfs.img"></a>使用 ginit 制作 initramfs.img</h3><p>静态编译 ginit；下载并编译 busybox ，将 ginit 编译结果 init 放置到 <code>/</code> 路径下，通过 cpio 将 busybox 归档，使用 gzip 进行压缩。所有流程完成后，将最终得到的 initramfs.cpio.gz 拷贝到项目路径下。 initramfs 最终包含的是 busybox + ginit 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># syntax=docker/dockerfile:experimental</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Build ginit as an init</span><br><span class="line">FROM golang:1.17-alpine as dev</span><br><span class="line">RUN apk add --no-cache git ca-certificates gcc linux-headers musl-dev</span><br><span class="line">COPY . /go/src/github.com/thebsdbox/ginit/</span><br><span class="line">WORKDIR /go/src/github.com/thebsdbox/ginit</span><br><span class="line">ENV GO111MODULE=on</span><br><span class="line">RUN --mount=type=cache,sharing=locked,id=gomod,target=/go/pkg/mod/cache \</span><br><span class="line">    --mount=type=cache,sharing=locked,id=goroot,target=/root/.cache/go-build \</span><br><span class="line">    CGO_ENABLED=1 GOOS=linux go build -a -ldflags &quot;-linkmode external -extldflags &apos;-static&apos; -s -w&quot; -o init</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"># Build Busybox</span><br><span class="line">FROM gcc:10.1.0 as Busybox</span><br><span class="line">RUN apt-get update; apt-get install -y cpio</span><br><span class="line">RUN curl -O https://busybox.net/downloads/busybox-1.31.1.tar.bz2</span><br><span class="line">RUN tar -xf busybox*bz2</span><br><span class="line">WORKDIR busybox-1.31.1</span><br><span class="line">RUN make defconfig; make LDFLAGS=-static CONFIG_PREFIX=./initramfs install</span><br><span class="line"></span><br><span class="line">WORKDIR initramfs </span><br><span class="line">COPY --from=dev /go/src/github.com/thebsdbox/ginit/init .</span><br><span class="line"></span><br><span class="line"># Package initramfs</span><br><span class="line">RUN find . -print0 | cpio --null -ov --format=newc &gt; ../initramfs.cpio </span><br><span class="line">RUN gzip ../initramfs.cpio</span><br><span class="line">RUN mv ../initramfs.cpio.gz /</span><br><span class="line"></span><br><span class="line">FROM scratch</span><br><span class="line">COPY --from=Busybox /initramfs.cpio.gz .</span><br></pre></td></tr></table></figure><h3 id="通过-QEMU-运行-Container-中的-EntryPoint-指令"><a href="#通过-QEMU-运行-Container-中的-EntryPoint-指令" class="headerlink" title="通过 QEMU 运行 Container 中的 EntryPoint 指令"></a>通过 QEMU 运行 Container 中的 EntryPoint 指令</h3><p>到目前状态，我们得到了 initramfs.img ，得到了 raw image，但是还缺少 Linux Kernel 。可以直接从 Ubuntu 提供的 <a href="http://archive.ubuntu.com/ubuntu/dists/focal-updates/main/installer-amd64/current/legacy-images/netboot/ubuntu-installer/amd64/" target="_blank" rel="noopener">netboot</a> 下载 <code>boot executable bzImage</code> 文件。</p><p>现在所有的准备工作都进行完成了，我们可以直接通过 QEMU 来运行虚拟机，其中 Nginx 所需运行环境在 RAW Image 中，ginit 所需运行环境在 initramfs 中。</p><p>前面有提到，Nginx Container 默认的 <code>Entrypoint</code> 是 <code>docker-entrypoint.sh</code>，用来做一些参数包装，所以这里我将参数改为了 <code>/usr/sbin/nginx</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-x86_64 -nographic \</span><br><span class="line">  -kernel ./linux \</span><br><span class="line">  -append &quot;entrypoint=/usr/sbin/nginx root=/dev/sda console=ttyS0&quot; \</span><br><span class="line">  -initrd ./initramfs.cpio.gz \</span><br><span class="line">  -hda ./disk.img \</span><br><span class="line">  -m 1G</span><br></pre></td></tr></table></figure><p>虚拟机 console 是 <code>ttyS0</code> ，通过终端运行可以直接查看启动日志：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[    1.469920] rtc_cmos 00:00: setting system clock to 2022-03-05T06:36:19 UTC (1646462179)</span><br><span class="line">[    1.525397] ata1.00: ATA-7: QEMU HARDDISK, 2.5+, max UDMA/100</span><br><span class="line">[    1.525579] ata1.00: 409600 sectors, multi 16: LBA48 </span><br><span class="line">[    1.532980] ata2.00: ATAPI: QEMU DVD-ROM, 2.5+, max UDMA/100</span><br><span class="line">[    1.540741] scsi 0:0:0:0: Direct-Access     ATA      QEMU HARDDISK    2.5+ PQ: 0 ANSI: 5</span><br><span class="line">[    1.545673] sd 0:0:0:0: [sda] 409600 512-byte logical blocks: (210 MB/200 MiB)</span><br><span class="line">[    1.547063] sd 0:0:0:0: [sda] Write Protect is off</span><br><span class="line">[    1.547515] sd 0:0:0:0: Attached scsi generic sg0 type 0</span><br><span class="line">[    1.548188] sd 0:0:0:0: [sda] Write cache: enabled, read cache: enabled, doesn&apos;t support DPO or FUA</span><br><span class="line">[    1.550227] scsi 1:0:0:0: CD-ROM            QEMU     QEMU DVD-ROM     2.5+ PQ: 0 ANSI: 5</span><br><span class="line">[    1.568178] sd 0:0:0:0: [sda] Attached SCSI disk</span><br><span class="line">[    1.578345] sr 1:0:0:0: [sr0] scsi3-mmc drive: 4x/4x cd/rw xa/form2 tray</span><br><span class="line">[    1.578736] cdrom: Uniform CD-ROM driver Revision: 3.20</span><br><span class="line">[    1.582611] sr 1:0:0:0: Attached scsi generic sg1 type 5</span><br><span class="line">[    1.595655] Freeing unused decrypted memory: 2040K</span><br><span class="line">[    1.666044] Freeing unused kernel image memory: 2712K</span><br><span class="line">[    1.666482] Write protecting the kernel read-only data: 22528k</span><br><span class="line">[    1.669246] Freeing unused kernel image memory: 2008K</span><br><span class="line">[    1.670507] Freeing unused kernel image memory: 1192K</span><br><span class="line">[    1.742691] x86/mm: Checked W+X mappings: passed, no W+X pages found.</span><br><span class="line">[    1.743002] Run /init as init process</span><br><span class="line">INFO[0000] Folder created [dev] -&gt; [/dev]          </span><br><span class="line">INFO[0000] Folder created [proc] -&gt; [/proc]        </span><br><span class="line">INFO[0000] Folder created [sys] -&gt; [/sys]          </span><br><span class="line">INFO[0000] Folder created [tmp] -&gt; [/tmp]          </span><br><span class="line">INFO[0000] Mounted [dev] -&gt; [/dev]                 </span><br><span class="line">INFO[0000] Mounted [proc] -&gt; [/proc]               </span><br><span class="line">INFO[0000] Mounted [sys] -&gt; [/sys]                 </span><br><span class="line">INFO[0000] Mounted [tmp] -&gt; [/tmp]                 </span><br><span class="line">INFO[0000] Starting DHCP client                    </span><br><span class="line">INFO[0000] Starting ginit                          </span><br><span class="line">ERRO[0000] Error finding adapter [Link not found]  </span><br><span class="line">[    2.209227] tsc: Refined TSC clocksource calibration: 2893.182 MHz</span><br><span class="line">[    2.209573] clocksource: tsc: mask: 0xffffffffffffffff max_cycles: 0x29b41aa25d4, max_idle_ns: 440795325238 ns</span><br><span class="line">[    2.209984] clocksource: Switched to clocksource tsc</span><br><span class="line">INFO[0002] Beginning provisioning process          </span><br><span class="line">ERRO[0002] route ip+net: no such network interface </span><br><span class="line">INFO[0002] Folder created [root] -&gt; [/mnt]         </span><br><span class="line">[    3.902861] random: fast init done</span><br><span class="line">[    3.912319] EXT4-fs (sda): recovery complete</span><br><span class="line">[    3.913757] EXT4-fs (sda): mounted filesystem with ordered data mode. Opts: (null)</span><br><span class="line">[    3.914463] ext4 filesystem being mounted at /mnt supports timestamps until 2038 (0x7fffffff)</span><br><span class="line">INFO[0002] Mounted [root] -&gt; [/mnt]                </span><br><span class="line">INFO[0002] Mounted [dev] -&gt; [/mnt/dev]             </span><br><span class="line">INFO[0002] Mounted [proc] -&gt; [/mnt/proc]           </span><br><span class="line">INFO[0002] Starting Shell                          </span><br><span class="line">INFO[0002] Waiting for command to finish...        </span><br><span class="line">/ #</span><br></pre></td></tr></table></figure><p>其中 <code>[    1.743002] Run /init as init process</code> 中的 <code>/init</code> 已经是我们上面编译的 <code>ginit</code> ，<code>ginit</code> 运行的日志输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">INFO[0000] Folder created [dev] -&gt; [/dev]          </span><br><span class="line">INFO[0000] Folder created [proc] -&gt; [/proc]        </span><br><span class="line">INFO[0000] Folder created [sys] -&gt; [/sys]          </span><br><span class="line">INFO[0000] Folder created [tmp] -&gt; [/tmp]          </span><br><span class="line">INFO[0000] Mounted [dev] -&gt; [/dev]                 </span><br><span class="line">INFO[0000] Mounted [proc] -&gt; [/proc]               </span><br><span class="line">INFO[0000] Mounted [sys] -&gt; [/sys]                 </span><br><span class="line">INFO[0000] Mounted [tmp] -&gt; [/tmp]                 </span><br><span class="line">INFO[0000] Starting DHCP client                    </span><br><span class="line">INFO[0000] Starting ginit                          </span><br><span class="line">ERRO[0000] Error finding adapter [Link not found]  </span><br><span class="line">[    2.209227] tsc: Refined TSC clocksource calibration: 2893.182 MHz</span><br><span class="line">[    2.209573] clocksource: tsc: mask: 0xffffffffffffffff max_cycles: 0x29b41aa25d4, max_idle_ns: 440795325238 ns</span><br><span class="line">[    2.209984] clocksource: Switched to clocksource tsc</span><br><span class="line">INFO[0002] Beginning provisioning process          </span><br><span class="line">ERRO[0002] route ip+net: no such network interface </span><br><span class="line">INFO[0002] Folder created [root] -&gt; [/mnt]         </span><br><span class="line">[    3.902861] random: fast init done</span><br><span class="line">[    3.912319] EXT4-fs (sda): recovery complete</span><br><span class="line">[    3.913757] EXT4-fs (sda): mounted filesystem with ordered data mode. Opts: (null)</span><br><span class="line">[    3.914463] ext4 filesystem being mounted at /mnt supports timestamps until 2038 (0x7fffffff)</span><br><span class="line">INFO[0002] Mounted [root] -&gt; [/mnt]                </span><br><span class="line">INFO[0002] Mounted [dev] -&gt; [/mnt/dev]             </span><br><span class="line">INFO[0002] Mounted [proc] -&gt; [/mnt/proc]           </span><br><span class="line">INFO[0002] Starting Shell                          </span><br><span class="line">INFO[0002] Waiting for command to finish...</span><br></pre></td></tr></table></figure><p>主要做了几件事情：创建必要的路径，创建对应的设备，启动一个 DHCP Client 来获取 IP 地址，挂载 RAW Image 到 /mnt 下，通过 <code>chroot</code> 运行 <code>entrypoint</code> 参数中指定的程序，在这里是 <code>/usr/sbin/nginx</code> ，最终提供一个 Shell 环境给用户。我们可以通过 <code>ps</code> 命令查看当前所运行的进程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/ # ps -ef |grep -v &apos;\[&apos;</span><br><span class="line">PID   USER     TIME  COMMAND</span><br><span class="line">    1 0         0:01 /init</span><br><span class="line">  178 0         0:00 nginx: master process /usr/sbin/nginx</span><br><span class="line">  179 0         0:00 /bin/sh</span><br><span class="line">  180 101       0:00 nginx: worker process</span><br><span class="line">  193 0         0:00 ps -ef</span><br><span class="line">/ # df </span><br><span class="line">Filesystem           1K-blocks      Used Available Use% Mounted on</span><br><span class="line">devtmpfs                497020         4    497016   0% /dev</span><br><span class="line">tmpfs                   502392         0    502392   0% /tmp</span><br><span class="line">/dev/sda                181984    150940     16708  90% /mnt</span><br><span class="line">devtmpfs                497020         4    497016   0% /mnt/dev</span><br><span class="line">/ # ls /mnt/docker-entrypoint.sh </span><br><span class="line">/mnt/docker-entrypoint.sh</span><br><span class="line">/ # ls /mnt/usr/sbin/nginx</span><br><span class="line">/mnt/usr/sbin/nginx</span><br><span class="line">/ # ls -hl /init</span><br><span class="line">-rwxr-xr-x    1 0        0           3.4M Mar  5 04:20 /init</span><br></pre></td></tr></table></figure><p>现在我们已经将一个 Container Image 中要运行的指令，通过 Linux kernel 配合 initramfs 来运行了起来，在 Bare Metal 场景下，我们可以将 Nginx 内置到 initramfs 中，将 Nginx 替换为 Docker 或者 Container 然后暴露出去，物理服务器作为 Docker Server，置备服务器作为 Docker Client 连接物理服务器进行指定容器的运行，最终完成物理服务器 OS 的安装，这也是目前 TinkerBell 的实现方式。</p><h2 id="ginit-具体实现"><a href="#ginit-具体实现" class="headerlink" title="ginit 具体实现"></a>ginit 具体实现</h2><h3 id="创建系统设备并挂载"><a href="#创建系统设备并挂载" class="headerlink" title="创建系统设备并挂载"></a>创建系统设备并挂载</h3><p>在 <code>DefaultMounts</code> 和 <code>DefaultDevices</code> 中定义了一些必须的设备如 <code>/dev/null</code>, <code>/dev/random</code>, <code>/dev/urandom</code> ，和挂载点，如 <code>/dev</code>,<code>/proc</code>, <code>/tmp</code>, <code>/sys</code> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">urandom := Device&#123;</span><br><span class="line">CreateDevice: false,</span><br><span class="line"></span><br><span class="line">Name:  &quot;urandom&quot;,</span><br><span class="line">Path:  &quot;/dev/urandom&quot;,</span><br><span class="line">Mode:  syscall.S_IFCHR,</span><br><span class="line">Major: 1,</span><br><span class="line">Minor: 9,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dev := Mount&#123;</span><br><span class="line">CreateMount: false,</span><br><span class="line">EnableMount: false,</span><br><span class="line">Name:        &quot;dev&quot;,</span><br><span class="line">Source:      &quot;devtmpfs&quot;,</span><br><span class="line">Path:        &quot;/dev&quot;,</span><br><span class="line">FSType:      &quot;devtmpfs&quot;,</span><br><span class="line">Flags:       syscall.MS_MGC_VAL,</span><br><span class="line">Mode:        0777,</span><br><span class="line">&#125;</span><br><span class="line">m.Mount = append(m.Mount, dev)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//cmd.Execute()</span><br><span class="line">m := realm.DefaultMounts()</span><br><span class="line">d := realm.DefaultDevices()</span><br><span class="line">dev := m.GetMount(&quot;dev&quot;)</span><br><span class="line">dev.CreateMount = true</span><br><span class="line">dev.EnableMount = true</span><br><span class="line"></span><br><span class="line">proc := m.GetMount(&quot;proc&quot;)</span><br><span class="line">proc.CreateMount = true</span><br><span class="line">proc.EnableMount = true</span><br><span class="line"></span><br><span class="line">tmp := m.GetMount(&quot;tmp&quot;)</span><br><span class="line">tmp.CreateMount = true</span><br><span class="line">tmp.EnableMount = true</span><br><span class="line"></span><br><span class="line">sys := m.GetMount(&quot;sys&quot;)</span><br><span class="line">sys.CreateMount = true</span><br><span class="line">sys.EnableMount = true</span><br><span class="line"></span><br><span class="line">// Create all folders</span><br><span class="line">m.CreateFolder()</span><br><span class="line">// Ensure that /dev is mounted (first)</span><br><span class="line">m.MountNamed(&quot;dev&quot;, true)</span><br><span class="line"></span><br><span class="line">// Create all devices</span><br><span class="line">d.CreateDevice()</span><br><span class="line"></span><br><span class="line">// Mount any additional mounts</span><br><span class="line">m.MountAll()</span><br></pre></td></tr></table></figure><p>在基本环境准备完成后，启动 DHCP Client，获取 IP 地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">log.Println(&quot;Starting DHCP client&quot;)</span><br><span class="line">go realm.DHCPClient()</span><br><span class="line"></span><br><span class="line">// HERE IS WHERE THE MAIN CODE GOES</span><br><span class="line">log.Infoln(&quot;Starting ginit&quot;)</span><br><span class="line">time.Sleep(time.Second * 2)</span><br><span class="line"></span><br><span class="line">log.Infoln(&quot;Beginning provisioning process&quot;)</span><br><span class="line"></span><br><span class="line">mac, err := realm.GetMAC()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Errorln(err)</span><br><span class="line">//realm.Shell()</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(mac)</span><br></pre></td></tr></table></figure><p>现在系统环境准备好了，网络也准备好了，那么可以运行具体的指令了，获取指令的方式是通过解析 <code>/proc/cmdline</code> ，<code>/proc/cmdline</code> 是通过我们在创建 VM 的时候通过 <code>--append</code> 传递的：</p><p>在解析到 <code>root</code> 和 <code>entrypoint</code> 参数值后，通过 <code>Mount</code> 将 <code>root</code> 挂载到对应的挂载点，通过 <code>chroot</code> 运行 <code>entrypoint</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">   stuffs, err := ParseCmdLine(CmdlinePath)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Errorln(err)</span><br><span class="line">&#125;</span><br><span class="line">_, err = realm.MountRootVolume(stuffs[&quot;root&quot;])</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Errorf(&quot;Disk Error: [%v]&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cmd := exec.Command(&quot;/usr/sbin/chroot&quot;, []string&#123;&quot;/mnt&quot;, stuffs[&quot;entrypoint&quot;]&#125;...)</span><br><span class="line">cmd.Stdin, cmd.Stdout, cmd.Stderr = os.Stdin, os.Stdout, os.Stderr</span><br><span class="line"></span><br><span class="line">err = cmd.Start()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Errorf(&quot;command error [%v]&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">err = cmd.Wait()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Errorf(&quot;error [%v]&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">realm.Shell()</span><br></pre></td></tr></table></figure><p>所有程序运行完成后，提供一个Shell 环境给用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// Shell will Start a userland shell</span><br><span class="line">func Shell() &#123;</span><br><span class="line">// Shell stuff</span><br><span class="line">log.Println(&quot;Starting Shell&quot;)</span><br><span class="line"></span><br><span class="line">// TTY hack to support ctrl+c</span><br><span class="line">cmd := exec.Command(&quot;/usr/bin/setsid&quot;, &quot;cttyhack&quot;, &quot;/bin/sh&quot;)</span><br><span class="line">cmd.Stdin, cmd.Stdout, cmd.Stderr = os.Stdin, os.Stdout, os.Stderr</span><br><span class="line"></span><br><span class="line">err := cmd.Start()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Errorf(&quot;Shell error [%v]&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(&quot;Waiting for command to finish...&quot;)</span><br><span class="line">err = cmd.Wait()</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Errorf(&quot;Shell error [%v]&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ginit 作为一个最小实现方便我们快速了解 init 具体做了什么，将 ginit 替换为 systemd 同理，但是直接看 systemd bootup 容易迷失在成堆的 Target 依赖中。在查找资料的过程中还看到了 <a href="https://github.com/QuentinPerez/busygox" target="_blank" rel="noopener">https://github.com/QuentinPerez/busygox</a> 做了类似的事情，可以作为参考。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/thebsdbox/ginit" target="_blank" rel="noopener">https://github.com/thebsdbox/ginit</a></li><li><a href="https://unix.stackexchange.com/questions/146284/minimal-linux-with-kernel-and-busybox-etc-inittab-is-ignored-only-init-is-ex/147688#147688" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/146284/minimal-linux-with-kernel-and-busybox-etc-inittab-is-ignored-only-init-is-ex/147688#147688</a></li><li><a href="https://github.com/QuentinPerez/busygox" target="_blank" rel="noopener">https://github.com/QuentinPerez/busygox</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;关注过 Bare Metal 相关项目的同学应该都了解过系统的启动流程、如何快速的置备一台物理服务器等之类的实现方式，通常都需要运行一个 L
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://zdyxry.github.io/tags/Linux/"/>
    
      <category term="Container" scheme="https://zdyxry.github.io/tags/Container/"/>
    
  </entry>
  
  <entry>
    <title>编写一个友好的命令行工具</title>
    <link href="https://zdyxry.github.io/2022/02/26/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E5%8F%8B%E5%A5%BD%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/"/>
    <id>https://zdyxry.github.io/2022/02/26/编写一个友好的命令行工具/</id>
    <published>2022-02-26T19:50:44.000Z</published>
    <updated>2022-08-28T04:18:55.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>关于命令行设计的一点总结。</p><h3 id="有用的帮助信息"><a href="#有用的帮助信息" class="headerlink" title="有用的帮助信息"></a>有用的帮助信息</h3><p>提供的命令行中所有的命令、子命令、选项都有明确的帮助信息，便于用户在使用过程中查看。帮助信息查看方式最好统一，比如统一使用 <code>-h</code> 格式、 <code>COMMAND help</code> 或者 <code>COMMAND --help</code> 。</p><h3 id="尽量使用-Flags-而不是-Args"><a href="#尽量使用-Flags-而不是-Args" class="headerlink" title="尽量使用 Flags 而不是 Args"></a>尽量使用 Flags 而不是 Args</h3><p>命令行可以接受 2 种类型的参数输入：Flags 和 Args。Flags 需要更多的输入，但会使命令行更清晰。我在实现一个命令行时，通常会将必选项设置为 Args ，将可选项设置为 Flags，但是有时候会导致用户在使用过程中觉得传递参数方式不统一，而且当 Args 有多个时（是的，我之前设计的一个命令行输入的 Args 多达 5 个）用户敲着敲着就不知道自己该输入什么了。如果在后续对命令行进行重构时，为了保证接口的兼容性，Args 通常是需要保证不变的，而 Flags 没有这个困扰。</p><h3 id="明确显示当前版本"><a href="#明确显示当前版本" class="headerlink" title="明确显示当前版本"></a>明确显示当前版本</h3><p>在使用过程中，如果遇到了问题，那么通常需要上报命令行版本反馈，需要明确给出当前命令行所指定的版本。通常会有 <code>-v</code>, <code>-V</code>, <code>--version</code>, <code>version</code> 等子命令，其中 <code>-v</code> 和 <code>-V</code> 有可能会跟 <code>verbose</code> 混淆，建议将版本作为一个独立的子命令 <code>version</code> 来实现。</p><h3 id="针对-stdint-stdout-stderr-正确处理"><a href="#针对-stdint-stdout-stderr-正确处理" class="headerlink" title="针对 stdint, stdout, stderr 正确处理"></a>针对 stdint, stdout, stderr 正确处理</h3><p>如果已知一个命令行的执行耗时较长，那么用户通常执行命令时会选择将 stdout 重定向到指定文件中，便于后续查看执行过程输出，留存。但是如果在执行过程中出现异常，那么尽量将异常信息通过 stderr 输出，及时暴露给用户。默认情况下 stdout 被重定向之后，stderr 仍会打印在终端中。</p><h3 id="明确的错误信息"><a href="#明确的错误信息" class="headerlink" title="明确的错误信息"></a>明确的错误信息</h3><p>当用户在执行命令过程中遇到错误，需要尽可能的显示多的、有用的信息出来：错误码、错误描述、错误信息。给出的信息是人类友好的，毕竟针对错误进行调试的是我们自己。尽量保证自己的命令行提供调试模式（类似于 Shell 中的 <code>set -x</code> ），便于 debug。</p><h3 id="不要过分花里胡哨"><a href="#不要过分花里胡哨" class="headerlink" title="不要过分花里胡哨"></a>不要过分花里胡哨</h3><p>现在许多命令行会在执行过程中，为了保证自己的输出尽可能的“好看”，可能会做各种丧心病狂的事情（比如塞入 emoji），我建议尽量不要做这种事情，会带来很多心智负担。</p><h3 id="（如果可能的话）不要输出表格"><a href="#（如果可能的话）不要输出表格" class="headerlink" title="（如果可能的话）不要输出表格"></a>（如果可能的话）不要输出表格</h3><p>有时候命令执行结果返回中，包含的信息量很大，那么通常会使用各种 table lib 来“友好”的展示信息。这类信息可能会导致在后续进行二次处理（sed, awk）过程中增加工作量，需要额外的过滤表格中的字符。如果一定需要展，那么尽可能提供可选项，给出一个其他的输出格式，比如 json，比如 yaml 等等。</p><h3 id="保证执行速度"><a href="#保证执行速度" class="headerlink" title="保证执行速度"></a>保证执行速度</h3><p>尽量保证命令行执行耗时较短，如果耗时较长，那么可能遇到的网络问题导致命令执行中断的概率增加。在执行过程中，尽量让用户感受到命令是在执行的，给出明确的交互状态，不要让用户感觉命令 hang 住。</p><h3 id="处理好信号"><a href="#处理好信号" class="headerlink" title="处理好信号"></a>处理好信号</h3><p>当用户在执行一个命令的时候，保证用户可以最终停止它。在处理信号的过程中，可以合理的输出一些有用的提示告知用户当前正在进行什么动作。</p><h3 id="幂等"><a href="#幂等" class="headerlink" title="幂等"></a>幂等</h3><p>尽量保证命令行幂等，当命令执行失败之后，可以让用户再次执行该命令以完成最终目的，否则会相当痛苦。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://clig.dev/?utm_source=pocket_mylist" target="_blank" rel="noopener">https://clig.dev/?utm_source=pocket_mylist</a></li><li><a href="https://medium.com/@jdxcode/12-factor-cli-apps-dd3c227a0e46" target="_blank" rel="noopener">https://medium.com/@jdxcode/12-factor-cli-apps-dd3c227a0e46</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;关于命令行设计的一点总结。&lt;/p&gt;
&lt;h3 id=&quot;有用的帮助信息&quot;&gt;&lt;a href=&quot;#有用的帮助信息&quot; class=&quot;headerlin
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于 Yamux 的内网穿透简易实现</title>
    <link href="https://zdyxry.github.io/2022/02/09/%E5%9F%BA%E4%BA%8E-Yamux-%E7%9A%84%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0/"/>
    <id>https://zdyxry.github.io/2022/02/09/基于-Yamux-的内网穿透简易实现/</id>
    <published>2022-02-09T11:57:51.000Z</published>
    <updated>2022-08-28T04:18:55.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基于-Yamux-的内网穿透简易实现"><a href="#基于-Yamux-的内网穿透简易实现" class="headerlink" title="基于 Yamux 的内网穿透简易实现"></a>基于 Yamux 的内网穿透简易实现</h2><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>模拟真实服务器，假设运行在内网环境，端口 8881。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">    &quot;fmt&quot;</span><br><span class="line">    &quot;log&quot;</span><br><span class="line">    &quot;net/http&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line"></span><br><span class="line">    http.HandleFunc(&quot;/hello&quot;, HelloHandler)</span><br><span class="line">    fmt.Println(&quot;Server started at port 8881&quot;)</span><br><span class="line">    log.Fatal(http.ListenAndServe(&quot;:8881&quot;, nil))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func HelloHandler(w http.ResponseWriter, r *http.Request) &#123;</span><br><span class="line">    fmt.Fprintf(w, &quot;Hello, there\n&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hub"><a href="#Hub" class="headerlink" title="Hub"></a>Hub</h3><p>运行在公网环境的 Hub，用于 Agent 连接，并保持会话。端口 8882。</p><p>提供 session 管理机制，主要用来保存 Yamux session 和 Agent 对应关系。<br>每个内网可以运行多个 Agent，每次新建连接会从已有的 Agent session 列表中随机选择一个 session，并通过创建一个新的 Yamux Stream 机制复用连接。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SessionManager <span class="keyword">interface</span> &#123;</span><br><span class="line">AddSession(key <span class="keyword">string</span>, sess *yamux.Session)</span><br><span class="line">DialTarget(key <span class="keyword">string</span>) (net.Conn, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSessionManager</span><span class="params">()</span> <span class="title">SessionManager</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;sessionManager&#123;</span><br><span class="line">sessions: <span class="keyword">map</span>[<span class="keyword">string</span>][]*yamux.Session&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> sessionManager <span class="keyword">struct</span> &#123;</span><br><span class="line">sessions <span class="keyword">map</span>[<span class="keyword">string</span>][]*yamux.Session</span><br><span class="line">mutex    sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *sessionManager)</span> <span class="title">AddSession</span><span class="params">(key <span class="keyword">string</span>, sess *yamux.Session)</span></span> &#123;</span><br><span class="line">m.mutex.Lock()</span><br><span class="line"><span class="keyword">defer</span> m.mutex.Unlock()</span><br><span class="line"></span><br><span class="line">curr := m.sessions[key]</span><br><span class="line"><span class="keyword">if</span> curr == <span class="literal">nil</span> &#123;</span><br><span class="line">curr = []*yamux.Session&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">curr = <span class="built_in">append</span>(curr, sess)</span><br><span class="line">m.sessions[key] = curr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m *sessionManager)</span> <span class="title">DialTarget</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="params">(net.Conn, error)</span></span> &#123;</span><br><span class="line">m.mutex.Lock()</span><br><span class="line"><span class="keyword">defer</span> m.mutex.Unlock()</span><br><span class="line"></span><br><span class="line">ss := m.sessions[key]</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ss) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"no session found in '%s'"</span>, key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">idx := rand.Intn(<span class="built_in">len</span>(ss))</span><br><span class="line">conn, err := ss[idx].Open()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"removing session #%d of '%s' due to dial error: %s"</span>, idx, key, err)</span><br><span class="line">ss[idx].Close()</span><br><span class="line">ss = <span class="built_in">append</span>(ss[:idx], ss[idx+<span class="number">1</span>:]...)</span><br><span class="line">m.sessions[key] = ss</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">"find session with key '%s'"</span>, key)</span><br><span class="line"><span class="keyword">return</span> conn, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hub 自身暴露两个 API 接口，其中 <code>/api/v1/hubs/:id</code> 用于 Agent 建立 WebSocket 连接，<code>api/v1/proxy/:id/*proxyPath</code> 用于后续 Client 通过 Hub 访问 Server 。当用户访问 <code>/api/v1/proxy/</code> 并指定 Agent ID 时，通过<code>NewSingleHostReverseProxy</code> 创建反向代理，并指定 Transport 中的 conn 为 Yamux Stream。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetupHandlers</span><span class="params">(r *gin.RouterGroup)</span></span> &#123;</span><br><span class="line">m := NewSessionManager()</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">"/hubs/:id"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">upgrader := websocket.Upgrader&#123;</span><br><span class="line">ReadBufferSize:  <span class="number">1024</span>,</span><br><span class="line">WriteBufferSize: <span class="number">1024</span>,</span><br><span class="line">&#125;</span><br><span class="line">conn, err := upgrader.Upgrade(c.Writer, c.Request, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">"msg"</span>: fmt.Sprintf(<span class="string">"failed to upgrade to WebSocket: %s"</span>, err)&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">session, err := yamux.Server(conn.UnderlyingConn(), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">"msg"</span>: fmt.Sprintf(<span class="string">"failed to multiplex channel: %s"</span>, err)&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m.AddSession(c.Param(<span class="string">"id"</span>), session)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.Any(<span class="string">"/proxy/:id/*proxyPath"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">u, err := url.Parse(<span class="string">"http://127.0.0.1"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">"msg"</span>: err.Error()&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rp := httputil.NewSingleHostReverseProxy(u)</span><br><span class="line">key := c.Param(<span class="string">"id"</span>)</span><br><span class="line">rp.Transport = &amp;http.Transport&#123;</span><br><span class="line">DialContext: <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, network <span class="keyword">string</span>, addr <span class="keyword">string</span>)</span> <span class="params">(net.Conn, error)</span></span> &#123;</span><br><span class="line">conn, err := m.DialTarget(key)</span><br><span class="line"><span class="keyword">return</span> conn, err</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">rp.ErrorHandler = <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request, err error)</span></span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">"msg"</span>: err.Error()&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hostInQuery, exist := c.GetQuery(<span class="string">"x-proxy-host"</span>)</span><br><span class="line"><span class="keyword">if</span> exist == <span class="literal">true</span> &#123;</span><br><span class="line">c.Request.Header.Add(<span class="string">"X-Proxy-Host"</span>, hostInQuery)</span><br><span class="line">&#125;</span><br><span class="line">c.Request.Header.Add(<span class="string">"X-Proxy-Path"</span>, c.Param(<span class="string">"proxyPath"</span>))</span><br><span class="line">rp.ServeHTTP(c.Writer, c.Request)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">setupRouter</span><span class="params">()</span> <span class="params">(*gin.Engine, error)</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">v1 := r.Group(<span class="string">"/api/v1"</span>)</span><br><span class="line">SetupHandlers(v1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> r, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h3><p>内网可以运行多个 Agent 用于连接 Hub，Agent 会通过 WebSocket 连接 Hub，后续所有通信均通过该连接进行传输。在连接建立后，创建 ReverseProxy，配置 Direcotr 修改 Request 参数，指定 host,path。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Setup</span><span class="params">(connectURL <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">dialer := websocket.DefaultDialer</span><br><span class="line">dialer.TLSClientConfig = &amp;tls.Config&#123;</span><br><span class="line">InsecureSkipVerify: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line">wsConn, _, err := dialer.Dial(connectURL, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(fmt.Sprintf(<span class="string">"failed to dial hub %q: %s"</span>, connectURL, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sess, err := yamux.Client(wsConn.UnderlyingConn(), <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(fmt.Sprintf(<span class="string">"failed to create multiplex channel: %s"</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">"connected to hub"</span>)</span><br><span class="line"></span><br><span class="line">director := <span class="function"><span class="keyword">func</span><span class="params">(req *http.Request)</span></span> &#123;</span><br><span class="line">log.Println(req)</span><br><span class="line">host := req.Header.Get(<span class="string">"X-Proxy-Host"</span>)</span><br><span class="line">path := req.Header.Get(<span class="string">"X-Proxy-Path"</span>)</span><br><span class="line">req.Header.Add(<span class="string">"X-Forwarded-Host"</span>, req.Host)</span><br><span class="line">req.Header.Add(<span class="string">"X-Origin-Host"</span>, host)</span><br><span class="line">req.URL.Scheme = <span class="string">"http"</span></span><br><span class="line">req.URL.Host = host</span><br><span class="line">req.URL.Path = path</span><br><span class="line">req.Host = <span class="string">""</span></span><br><span class="line">log.Println(req)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxy := &amp;httputil.ReverseProxy&#123;Director: director&#125;</span><br><span class="line">server := &amp;http.Server&#123;</span><br><span class="line">Handler: proxy,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">idleConnsClosed := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">sigint := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(sigint, os.Interrupt)</span><br><span class="line">signal.Notify(sigint, syscall.SIGTERM)</span><br><span class="line">&lt;-sigint</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := server.Shutdown(context.Background()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Printf(<span class="string">"failed to shutdown server: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(idleConnsClosed)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">"starting proxy"</span>)</span><br><span class="line"><span class="keyword">if</span> err := server.Serve(sess); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(fmt.Sprintf(<span class="string">"error running proxy: %s"</span>, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;-idleConnsClosed</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>Client 可以通过访问 Hub 的 proxy API，将真实请求转发至 Agent ，再由 Agent 请求 Server。</p><h3 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h3><ol><li>运行 Hub 对外提供服务</li><li>运行 Agent 通过 WebSocket 连接至 Hub，并创建 ReverseProxy</li><li>Client 请求 Hub proxy API</li><li>Hub 在已有 Session（WebSocket）上 Yamux Stream 将请求转发至 Agent</li><li>Agent 解析 Request，并将请求转发至 Server，返回</li></ol><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://github.com/hashicorp/yamux" target="_blank" rel="noopener">https://github.com/hashicorp/yamux</a></li><li><a href="https://github.com/smartxworks/kopilot" target="_blank" rel="noopener">https://github.com/smartxworks/kopilot</a></li><li><a href="https://gist.github.com/fengye87/76791723511f6867b02723ba0c437315" target="_blank" rel="noopener">https://gist.github.com/fengye87/76791723511f6867b02723ba0c437315</a></li><li><a href="https://stackoverflow.com/questions/60657906/websocket-over-yamux-over-websocket-not-working" target="_blank" rel="noopener">https://stackoverflow.com/questions/60657906/websocket-over-yamux-over-websocket-not-working</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基于-Yamux-的内网穿透简易实现&quot;&gt;&lt;a href=&quot;#基于-Yamux-的内网穿透简易实现&quot; class=&quot;headerlink&quot; title=&quot;基于 Yamux 的内网穿透简易实现&quot;&gt;&lt;/a&gt;基于 Yamux 的内网穿透简易实现&lt;/h2&gt;&lt;h3 id=&quot;S
      
    
    </summary>
    
    
      <category term="Golang" scheme="https://zdyxry.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>2021 年读书记录</title>
    <link href="https://zdyxry.github.io/2021/12/31/2021-%E5%B9%B4%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/"/>
    <id>https://zdyxry.github.io/2021/12/31/2021-年读书记录/</id>
    <published>2021-12-31T09:01:41.000Z</published>
    <updated>2022-08-28T04:18:55.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="年终总结"><a href="#年终总结" class="headerlink" title="年终总结"></a>年终总结</h2><ul><li><a href="https://zdyxry.github.io/2016/12/31/2016%E5%B9%B4%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/">2016</a><ul><li>计划读 5 本，实际读 13 本。</li></ul></li><li><a href="https://zdyxry.github.io/2017/12/31/2017%E5%B9%B4%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/">2017</a><ul><li>计划 32 本，实际读完 23 本。</li></ul></li><li><a href="https://zdyxry.github.io/2018/12/30/2018%E5%B9%B4%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/">2018</a><ul><li>计划 30 本，实际25本。</li></ul></li><li><a href="https://zdyxry.github.io/2019/12/09/2019%E5%B9%B4%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/">2019</a><ul><li>计划 30 本，实际 43 本。</li></ul></li><li><a href="https://zdyxry.github.io/2020/12/28/2020%E5%B9%B4%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/">2020</a><ul><li>计划 30 本，实际 40 本。</li></ul></li><li>2021<ul><li>计划 50 本，实际 47 本。</li></ul></li></ul><h2 id="已读"><a href="#已读" class="headerlink" title="已读"></a>已读</h2><ol><li>《Linux C编程一站式学习》</li><li>《现代操作系统：原理与实现》</li><li>《封锁》</li><li>《指数基金投资》</li><li>《指数基金投资指南》</li><li>《小狗钱钱》</li><li>《富爸爸穷爸爸》</li><li>《The Almanack of Naval Ravikant》</li><li>《让时间陪你慢慢变富》</li><li>《韭菜的自我修养》</li><li>《labuladong的算法小抄》</li><li>《人人都能用英语》</li><li>《仿制药的真相》</li><li>《Kubernetes源码剖析》</li><li>《如何高效学习》</li><li>《你的第一本保险指南》</li><li>《跑步圣经》</li><li>《当我谈跑步时我谈些什么》</li><li>《柴犬绅士》</li><li>《咖啡新规则》</li><li>《深度休息》</li><li>《爱上跑步的13周》</li><li>《金阁寺》</li><li>《UNIX传奇》</li><li>《间客》</li><li>《工薪族财务自由说明书》</li><li>《分布式缓存》</li><li>《剑指Offer》</li><li>《商业的本质和互联网》</li><li>《哈利·波特》</li><li>《Go语言编程》</li><li>《卡片笔记写作法》</li><li>《图解网络硬件》</li><li>《喜剧这回事》</li><li>《gRPC与云原生应用开发》</li><li>《HTTP/2 in Action 中文版》</li><li>《代码整洁之道》</li><li>《李诞脱口秀工作手册》</li><li>《娱乐至死》</li><li>《深入浅出 HTTPS：从原理到实战》</li><li>《骆驼祥子》</li><li>《沉默的大多数》</li><li>《智能时代》</li><li>《被看见的力量》</li><li>《拒看新聞的生活藝術》</li><li>《JavaScript DOM编程艺术 （第2版）》</li><li>《非暴力沟通》</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;年终总结&quot;&gt;&lt;a href=&quot;#年终总结&quot; class=&quot;headerlink&quot; title=&quot;年终总结&quot;&gt;&lt;/a&gt;年终总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zdyxry.github.io/2016/12/31/2016%E5%B9%
      
    
    </summary>
    
    
      <category term="Book" scheme="https://zdyxry.github.io/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>DHCP lease 生命周期</title>
    <link href="https://zdyxry.github.io/2021/12/18/DHCP-lease-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://zdyxry.github.io/2021/12/18/DHCP-lease-生命周期/</id>
    <published>2021-12-18T18:42:08.000Z</published>
    <updated>2022-08-28T04:18:55.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>昨天配合一个同事排查虚拟机 IP 发生了变化的问题，正好整理一下 DHCP lease 生命周期以及变化流程。</p><h2 id="DHCP-lease-生命周期"><a href="#DHCP-lease-生命周期" class="headerlink" title="DHCP lease 生命周期"></a>DHCP lease 生命周期</h2><ul><li>Allocation：一个客户端开始时没有有效的租约，因此也没有 DHCP 分配的地址。它通过一个分配过程获得一个租约。</li><li>Reallocation：如果一个客户端已经有了一个来自现有租约的地址，那么当它重启或关闭后启动时，它将与授予它租约的 DHCP 服务器联系，以确认租约并获得操作参数。这有时被称为重新分配；它与完全分配过程相似，但时间更短。</li><li>Normal Operation：一旦租约被激活，客户端就会正常工作，在租约周期内使用其分配的IP地址和其他参数。客户端被称为与租约和地址绑定。</li><li>Renewal：在租约时间的某一部分过期后，客户端将试图联系最初授予租约的服务器，以更新租约，这样它就可以继续使用其 IP 地址。</li><li>Rebinding：如果与最初的租约服务器续约失败（例如，因为该服务器已经下线），那么客户端将尝试重新绑定到任何活跃的 DHCP 服务器，试图在任何允许它这样做的服务器上延长其当前租约。</li><li>Release：客户端可以在任何时候决定它不再希望使用它被分配的IP地址，并可以终止租约，释放 IP 地址。</li></ul><h2 id="Allocation-流程"><a href="#Allocation-流程" class="headerlink" title="Allocation 流程"></a>Allocation 流程</h2><pre><code>- 1.客户端创建 DHCPDISCOVER 消息  客户端开始处于INIT（初始化）状态。它没有IP地址，甚至不知道网络上是否有 DHCP 服务器或在哪里。为了找到一个，它创建了一个 DHCPDISCOVER 消息，包括以下信息。    - 在消息的 CHAddr 字段中包含自己的硬件地址，用来识别自身。    - 一个随机的交易标识符，放在 XID 字段中，这被用来识别以后的消息是同一事务的一部分。    - 另外，客户可以使用 `Requested IP Address` DHCP 选项请求一个特定的IP地址，使用IP地址 `Lease Time` 选项请求一个特定的租约长度，或通过在报文中加入`Parameter Request List`选项请求特定的配置参数。- 2.客户端发送 DHCPDISCOVER 消息  客户端在本地网络上广播 DHCPDISCOVER 消息。客户端过渡到 SELECTING 状态，在那里等待对其消息的回复。- 3.服务器接收并处理 DHCPDISCOVER 消息  本地网络上的每个 DHCP 服务器都会收到客户的 DHCPDISCOVER 消息并进行检查。服务器在其数据库中查找客户的硬件地址，并确定它是否能够为客户提供租约，以及租约的条款是什么。如果客户对一个特定的IP地址、租约长度或其他参数提出了要求，服务器将试图满足这些要求，但并不要求这样做。如果一个服务器没有被设定为为某一特定客户提供服务，它没有剩余的IP地址，或出于其他原因，它可以决定不向该客户提供租约。- 4.服务器创建 DHCPOFFER 消息  每个选择响应客户端的服务器都会创建一个包括以下信息的DHCPOFFER消息。    - 在 YIAddr 字段中包含要分配给客户的IP地址，如果服务器以前曾为该客户租用过，它将尝试重新使用上次使用的 IP 地址。如果没有，它将尝试使用客户要求的地址（如果存在）；否则，它将选择任何可用的地址。    - 所提供的租约长度。    - 客户端要求的任何特定于客户端的配置参数，或者在服务器返回给客户端的参数。    - 任何要返回给所有客户端或该客户端类别中的一般配置参数。    - DHCP 服务器标识符选项中的服务器标识符。    - 与 DHCPDISCOVER 消息中使用的交易ID（XID）相同。- 5. 服务器探测，保留提供的地址（可选）  DHCP标准规定，在向客户发送DHCPOFFER之前，服务器 &quot;应该 &quot;通过向该地址发送一个 ICMP Echo 消息来检查该IP地址是否已经被使用。如果探测到该地址正在使用，服务器当然不会将其提供给客户。这可以由管理员禁用。它被认为是DHCP服务器冲突检测功能的一个关键部分。  无论它是否探测所提供的地址，服务器也可以保留该地址，以便如果客户决定使用它，它将是可用的。这不是强制性的，因为正如我们将在下面看到的，协议会处理提供的租约被收回的情况。如果服务器保留地址，效率会更高，但如果IP地址非常短缺，这种保留可能并不实际。- 6. 服务器发送 DHCPOFFER 消息  每个服务器都会发送其 DHCPOFFER 消息。当然，它们不一定都是在完全相同的时间发送。如前所述，这些消息可以是单播的，也可以是广播的。- 7. 客户端收集和处理 DHCPOFFER 消息  客户端等待 DHCPOFFER 消息的到来，作为对其 DHCPDISCOVER 的回应。客户端在这里的确切行为是与实现有关的。为了方便起见，客户可能决定简单地接受它收到的第一个提议。或者它也可以选择通过等待一段时间来进行比较。然后它可以处理每一个 DHCPOFFER，并选择具有最有利条件的 DHCPOFFER--例如，具有最长租期的那一个。  如果没有收到 DHCPOFFER 消息，客户端将进入重传模式，并尝试在一段时间内再次发送DHCPDISCOVER。- 8. 客户端创建 DHCPREQUEST 消息  客户端为其选择的服务器 DHCPOFFER 创建一个 DHCPREQUEST 消息。这个消息有两个作用：它告诉客户接受其提议的服务器 &quot;是的，我接受你的提议，假设它仍然可用&quot;，同时也告诉其他服务器 &quot;对不起，你的提议被拒绝&quot;。在这个消息中，客户端包括以下信息。    - 在 DHCP 服务器标识符选项中，被选中的服务器的标识符。    - DHCP 服务器在 DHCPOFFER 消息中分配给客户的 IP 地址，客户在 `Requested IP Address` DHCP选项中把它作为确认地址    - 它在消息中的参数请求列表选项中想要的任何其他配置参数。- 9. 客户端发送 DHCPREQUEST 消息  客户端发送 DHCPREQUEST 消息。由于它不只是针对选定的 DHCP 服务器，而是针对所有的DHCP 服务器，所以它是广播的。这样做之后，客户端过渡到 REQUESTING 状态，在那里它等待来自所选服务器的回复。- 10. 服务器接收和处理 DHCPREQUEST 消息  每个服务器都接收并处理客户的请求信息。未被选中的服务器将把该消息视为拒绝。然而，请注意，客户可能会选择一个OFFER ，试图请求租约单没有成功完成。然后，客户可以通过发送包含不同服务器标识符的 DHCPREQUEST 来尝试其 &quot;第二选择 &quot;的 OFFER。这意味着，如果服务器A收到一个服务器标识符为服务器B的单一DHCPREQUEST，这并不一定意味着服务器A已经完成了。由于这个原因，&quot;被拒绝 &quot;的服务器在向另一个客户提供先前提供的租约之前会等待一段时间。- 11. 服务器发送 DHCPACK 或 DHCPNAK 消息  被选中的服务器将看到它的租约已被选中。如果它以前没有保留提供给客户的 IP 地址，它必须检查以确保它仍然可用。如果不是，服务器会发回一个 DHCPNAK（否定确认）消息。通常情况下，服务器仍然拥有该租约。它将为该客户创建一个绑定，并发回一个 DHCPACK（确认）消息，确认该租约并包含该客户端的所有相关配置参数。- 12. 客户端接收并处理 DHCPACK 或 DHCPNAK 消息  客户端收到对其请求的肯定或否定的确认。如果该消息是DHCPNAK，客户端过渡到 INIT 状态并重新开始：回到原点（步骤#1）。如果是DHCPACK，客户端从 YIAddr 字段中读取 IP 地址，并从各种消息字段和 DHCP 选项中记录租约长度和其他参数。  如果客户端没有收到任何消息，它可以将 DHCPREQUEST 消息重传一次或多次。如果它继续什么也没听到，那么它必须得出结论，服务器已经失效，并回到步骤#1。- 13. 客户端检查地址是否正在使用  客户端设备应该进行最后的检查，以确保新地址在结束租约过程之前没有被使用。这通常是通过在本地网络上生成一个 ARP 请求来完成的，看看是否有其他设备认为它已经拥有该客户端刚刚租赁的IP地址。如果有其他设备响应，客户端就向服务器发送一个 DHCPDECLINE 消息，然后，客户端回到步骤1，重新开始。- 14. 客户端最终完成租约分配  假设该地址还没有被使用，客户端最终确定租约并过渡到 BOUND 状态。它还设置了它的两个租赁计时器，T1 和T2。现在它已经准备好进行正常操作了。</code></pre><h2 id="Reallocation-流程"><a href="#Reallocation-流程" class="headerlink" title="Reallocation 流程"></a>Reallocation 流程</h2><pre><code>- 1. 客户端创建 DHCPREQUEST 消息  客户端以 INIT-REBOOT 状态而不是 INIT 状态开始。它创建了一个 DHCPREQUEST 消息，试图找到一个具有其当前租约信息的服务器。注意，这可能不是最初授予租约的服务器；理论上，负责租约的服务器可能在客户端获得租约后发生变化。因此，与分配过程中第8步的 DHCPREQUEST 消息不同，客户端不包括DHCP 服务器标识符选项。它确实包括以下信息。    - 在消息的 CHAddr 字段中包含它自己的硬件地址，以识别自己。    - 在 `Requested IP Address` DHCP选项中包含其现有租约的IP地址，这个地址没有被放到CIAddr 字段中。    - 一个随机的交易标识符，放在XID字段中。这被用来识别以后的信息是同一事务的一部分。    - 任何它想要的额外配置参数，放在消息中的参数请求列表选项中。- 2. 客户端发送DHCPREQUEST消息  客户端广播了 DHCPREQUEST 消息。然后，它过渡到 REBOOTING 状态，等待来自服务器的回复。- 3. 服务器接收和处理 DHCPREQUEST 消息并生成回复  网络上的每个 DHCP 服务器都接收并处理客户端的请求。服务器在其数据库中查找客户端，试图找到有关租约的信息。然后每个 DHCP 服务器决定如何回复客户端。    - 服务器拥有有效的客户租约信息。服务器拥有客户的租约信息。它发送一个 DHCPACK 消息来确认租约。它还将重申客户应该使用的任何参数。    - 服务器确定客户端租约无效。服务器确定客户的租约不再有效。发生这种情况的常见原因是客户在搬到一个不同的网络后试图确认租约，或者在事实上至少已经过期后。在这种情况下，服务器会发送一个 DHCPNAK 消息来否定租赁请求。    - 服务器没有关于客户租约的明确信息。没有租约信息的服务器不作回应。除非一个服务器的信息被保证是准确的，否则它也被要求不做回应。例如，如果一个服务器知道一个过期的租约，它不能假定该租约不再有效并发送 DHCPNAK，除非它也知道没有其他服务器为该客户提供更新的、有效的租约。- 4. 服务器发送回复  将要对客户的 DHCPREQUEST 做出响应的服务器会发送他们的DHCPACK或DHCPNAK消息。- 5. 客户端接收并处理 DHCPACK 或 DHCPNAK 消息  客户端等待一段时间以获得对其请求的回复。同样，有三种可能性，与上一步中的三种可能性相匹配。    - 正面确认。客户端收到一个 DHCPACK 消息；这确认了租赁的有效性。客户端将准备再次开始使用该租约，并继续进行下面的步骤。    - 否定的确认。该消息是一个 DHCPNAK ，它告诉客户端，它的租约不再有效。客户端过渡到 INIT 状态，以获得一个新的租约--分配过程中的第1步。    - 没有回复。如果客户端根本没有收到回复，它可以重新发送 DHCPREQUEST 消息。如果在一段时间后没有收到回复，它将得出结论，没有服务器拥有它的租约信息，并将返回 INIT 状态，尝试获得新的租约。- 6. 客户端检查地址是否正在使用  在恢复使用其租约之前，客户端设备应该执行最后的检查，以确保新地址没有被使用。尽管在租约已经存在的情况下不应该这样做，但作为一种安全措施，还是要这样做。该检查与分配过程的第13步所述相同：在本地网络上发出一个 ARP 请求，看看是否有其他设备认为它已经拥有该客户端刚刚租赁的 IP 地址。如果有其他设备响应，客户端就向服务器发送一个 DHCPDECLINE 消息，告诉它租约无效，因为有其他设备正在使用这个地址。然后，客户端回到INIT状态，获得一个新的租约。- 7. 客户端最终完成租约的分配  假设该地址还没有被使用，客户端最终完成租约并过渡到 BOUND 状态。现在它已经准备好进行正常操作了。</code></pre><h2 id="Renewal-amp-Rebinding-流程"><a href="#Renewal-amp-Rebinding-流程" class="headerlink" title="Renewal &amp; Rebinding 流程"></a>Renewal &amp; Rebinding 流程</h2><pre><code>- 1. 续约定时器（T1）过期  续约定时器，T1，默认设置为租赁长度的50%。当定时器关闭时，客户端从 BOUND 状态过渡到RENEWING状态。  客户端可以在 T1 定时器到期前启动租约更新。- 2. 客户端发送 DHCPREQUEST 更新消息  客户端创建一个 DHCPREQUEST 消息，标识自己和它的租约。然后，它将消息直接传送给最初授予租约的服务器，单播。这与分配/再分配过程中使用的 DHCPREQUEST 消息不同，后者的DHCPREQUEST是广播的。客户端可以请求一个特定的新租约长度，就像它在分配过程中请求租约长度一样，服务器对租约长度做最后的决定。- 3. 服务器接收和处理 DHCPREQUEST 消息并创建回复  假设服务器可以到达，它将接收并处理客户的更新请求。有两种可能的回应。    - 服务器同意更新客户租约。服务器决定客户的租约可以被续约。它准备向客户发送一个DHCPACK消息，以确认租约的更新，指出新的租约长度以及自租约创建或最后一次更新以来可能发生变化的任何参数。    - 服务器拒绝更新客户租约。服务器出于任何原因决定不更新客户的租约。它将创建一个DHCPNAK消息。- 4. 服务器发送回复  服务器将DHCPACK或DHCPNAK消息发回给客户。- 5. 客户端接收并处理服务器回复  客户端对服务器的回复采取适当的行动。    - 正面确认。客户端收到一个DHCPACK消息，更新租约。客户端注意到新的租约到期时间和服务器发送的任何变化的参数，重置T1和T2定时器，并过渡到BOUND状态。注意，客户端在更新时不需要做ARP IP地址检查。    - 否定确认。该消息是一个DHCPNAK，它告诉客户端它的续租请求被拒绝了。客户端将立即过渡到INIT状态，以获得一个新的租约--分配过程中的第1步。- 6. 重新绑定定时器（T2）过期  如果客户端没有收到服务器的回复，它将保持在 RENEWING 状态，并定期向服务器重传单播DHCPREQUEST。在这段时间内，从用户的角度来看，客户端仍在正常运行。如果没有收到来自服务器的响应，最终重新绑定计时器（T2）会过期。这将导致客户端过渡到REBINDING状态。回顾一下，默认情况下，T2定时器被设置为租赁长度的87.5%（8分之7）。- 7. 客户端发送DHCPREQUEST重新绑定消息  由于没有收到最初授予租约的服务器的回应，客户端 放弃该服务器，并试图联系任何可能能够延长其现有租约的服务器。它创建了一个DHCPREQUEST消息，并把它的IP地址放在CIAddr字段中，明确表示它目前拥有该地址。然后，它在本地网络上广播该请求。- 8. 服务器接收和处理DHCPREQUEST消息并发送回复  每台 DHCP 服务器都会收到请求，并根据它所掌握的客户信息作出回应。    - 服务器同意重新绑定客户租约。服务器拥有客户的租约信息并同意延长租约。它为客户准备了一个DHCPACK消息，以确认租约的更新，并指出自租约创建或最后一次更新以来可能发生的任何参数。    - 服务器决定客户不能延长其当前租约。服务器决定，无论出于什么原因，这个客户的租约不应该被延长。它准备向客户发送一个DHCPNAK消息。- 9. 服务器发送回复  每个响应客户的服务器都会发送其DHCPACK或DHCPNAK消息。- 10. 客户端收到服务器回复  客户端对上一步中的两种可能性采取适当的行动。    - 正面确认。客户端收到一个DHCPACK消息，重新绑定租约。客户端注意到现在负责这个租约的服务器，新的租约到期时间，以及服务器发送的任何改变的参数。它重置了T1和T2计时器，并过渡到BOUND状态。(它也可以像在常规租约分配期间那样探测新地址)。    - 否定确认。该消息是一个DHCPNAK，它告诉客户端，一些服务器已经确定租约不应该被延长。客户端立即过渡到INIT状态，以获得一个新的租约--分配过程中的第1步。- 11. 租约过期      如果客户端没有收到对其广播重新绑定请求的响应，它将像在RENEWING状态下一样，定期重发该请求。如果在租约到期时没有收到任何响应，它将过渡到INIT状态以获得新的租约。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;昨天配合一个同事排查虚拟机 IP 发生了变化的问题，正好整理一下 DHCP lease 生命周期以及变化流程。&lt;/p&gt;
&lt;h2 id=&quot;DH
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://zdyxry.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 执行 grub2-mkconfig 导致磁盘只读</title>
    <link href="https://zdyxry.github.io/2021/10/02/CentOS-%E6%89%A7%E8%A1%8C-grub2-mkconfig-%E5%AF%BC%E8%87%B4%E7%A3%81%E7%9B%98%E5%8F%AA%E8%AF%BB/"/>
    <id>https://zdyxry.github.io/2021/10/02/CentOS-执行-grub2-mkconfig-导致磁盘只读/</id>
    <published>2021-10-02T07:30:09.000Z</published>
    <updated>2022-08-28T04:18:55.739Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近遇到了一个故障，在集群软件升级过程中，发现某一个磁盘分区变为只读，导致存储应用识别该磁盘不可用。调查发现集群升级过程中，会重新生成每个节点的 GRUB 配置文件，在执行 <code>grub2-mkconfig</code> 过程中导致的磁盘分区只读。记录下 <code>grub2-mkconfig</code> 命令执行到真正磁盘只读指令下发的流程。</p><h2 id="调查"><a href="#调查" class="headerlink" title="调查"></a>调查</h2><h3 id="grub2-mkconfig"><a href="#grub2-mkconfig" class="headerlink" title="grub2-mkconfig"></a><code>grub2-mkconfig</code></h3><p>在执行 <code>grub2-mkconfig</code> 命令时，如果没有指定配置 <code>GRUB_DISABLE_OS_PROBER=true</code> 时，则 GRUB 会调用 os-prober （/etc/grub.d/30_os-prober）用于扫描其他操作系统进行后续配置。</p><h3 id="os-prober"><a href="#os-prober" class="headerlink" title="os-prober"></a>os-prober</h3><p>os-prober 是用来探测其他磁盘中存在操作系统的情况。通常由各个发行版本提供，源码地址：<a href="https://salsa.debian.org/installer-team/os-prober" target="_blank" rel="noopener">https://salsa.debian.org/installer-team/os-prober</a> 。</p><p>CentOS 默认包含的 os-prober 与源码版本并不相同，包含了一些额外的配置，通过 RPM changelog 可以查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Name        : os-prober</span><br><span class="line">Version     : 1.58</span><br><span class="line">Release     : 9.el7</span><br><span class="line">Architecture: x86_64</span><br><span class="line">Install Date: Wed 18 Aug 2021 03:44:43 PM CST</span><br><span class="line">Group       : System Environment/Base</span><br><span class="line">Size        : 97946</span><br><span class="line">License     : GPLv2+ and GPL+</span><br><span class="line">Signature   : RSA/SHA256, Mon 21 Nov 2016 03:50:19 AM CST, Key ID 24c6a8a7f4a80eb5</span><br><span class="line">Source RPM  : os-prober-1.58-9.el7.src.rpm</span><br><span class="line">Build Date  : Sun 06 Nov 2016 11:30:02 AM CST</span><br><span class="line">Build Host  : worker1.bsys.centos.org</span><br><span class="line">Relocations : (not relocatable)</span><br><span class="line">Packager    : CentOS BuildSystem &lt;http://bugs.centos.org&gt;</span><br><span class="line">Vendor      : CentOS</span><br><span class="line">URL         : http://kitenet.net/~joey/code/os-prober/</span><br><span class="line">Summary     : Probes disks on the system for installed operating systems</span><br><span class="line">Description :</span><br><span class="line">This package detects other OSes available on a system and outputs the results</span><br><span class="line">in a generic machine-readable format. Support for new OSes and Linux</span><br><span class="line">distributions can be added easily.</span><br><span class="line">* Wed Sep 14 2016 rmarshall@redhat.com - 1.58-9</span><br><span class="line">- Fix regular expression that missed a corner case when detecting</span><br><span class="line">extended dos partitions.</span><br><span class="line">Resolves: rhbz#1322957</span><br><span class="line">        </span><br><span class="line">* Wed Jul 06 2016 rmarshall@redhat.com - 1.58-8</span><br><span class="line">- Resolve some coverity concerns with how the previous patch detected</span><br><span class="line">whether or not a partition was a device mapper device.</span><br><span class="line">Related: rhbz#1300262</span><br><span class="line">        </span><br><span class="line">* Tue Jul 05 2016 rmarshall@redhat.com - 1.58-7</span><br><span class="line">- Do not resolve device mapper links when generating stanzas</span><br><span class="line">for bootloader.</span><br><span class="line">Resolves: rhbz#1300262</span><br><span class="line">        </span><br><span class="line">* Wed May 04 2016 rmarshall@redhat.com - 1.58-6</span><br><span class="line">- Adding handling to skip probing extended dos partitions</span><br><span class="line">Resolves: rhbz#1322957</span><br><span class="line">- Improve Windows detection for dual boot and support Windows 10</span><br><span class="line">Resolves: rhbz#1322956</span><br><span class="line">- Suppress non-blocking dmraid sector size warning message</span><br><span class="line">Resolves: rhbz#1198918</span><br><span class="line">        </span><br><span class="line">* Fri Jan 24 2014 Daniel Mach &lt;dmach@redhat.com&gt; - 1.58-5</span><br><span class="line">- Mass rebuild 2014-01-24</span><br><span class="line">        </span><br><span class="line">* Mon Jan 20 2014 Peter Jones &lt;pjones@redhat.com&gt; - 1.58-4</span><br><span class="line">- Add man pages.</span><br><span class="line">Resolves: rhbz#948848</span><br></pre></td></tr></table></figure><p>通过下载 os-prober 的 source RPM 可以查看具体改动内容，查看 os-prober.spec 文件，查看额外的 Patch 列表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Name:           os-prober</span><br><span class="line">Version:        1.58</span><br><span class="line">Release:        9%&#123;?dist&#125;</span><br><span class="line">Summary:        Probes disks on the system for installed operating systems</span><br><span class="line">            </span><br><span class="line">Group:          System Environment/Base</span><br><span class="line"># For more information about licensing, see copyright file.</span><br><span class="line">License:        GPLv2+ and GPL+</span><br><span class="line">URL:            http://kitenet.net/~joey/code/os-prober/</span><br><span class="line">Source0:        http://ftp.de.debian.org/debian/pool/main/o/os-prober/%&#123;name&#125;_%&#123;version&#125;.tar.gz</span><br><span class="line"># move newns binary outside of os-prober subdirectory, so that debuginfo</span><br><span class="line"># can be automatically generated for it</span><br><span class="line">Patch0001: 0001-Change-filepath-to-newns.patch</span><br><span class="line">Patch0002: 0002-Don-t-count-dummy-mach_kernel-as-MacOS-X-811412.patch</span><br><span class="line">Patch0003: 0003-Detect-OS-installed-to-mdraid-partition-752402.patch</span><br><span class="line">Patch0004: 0004-Yaboot-allows-spaces-in-append-825041.patch</span><br><span class="line">Patch0005: 0005-Detect-ld.so-after-usr-move-826754.patch</span><br><span class="line">Patch0006: 0006-Use-shell-processing-instead-of-basename-875356.patch</span><br><span class="line">Patch0007: 0007-Add-option-for-less-logging-893997.patch</span><br><span class="line">Patch0008: 0008-Improve-btrfs-detection-support-888341.patch</span><br><span class="line">Patch0009: 0009-Support-detection-on-btrfs-software-raid-906847.patch</span><br><span class="line">Patch0010: 0010-Name-lvm-boot-partitions-by-fstab-entry-893472.patch</span><br><span class="line">Patch0011: 0011-Set-correct-boot-partition-906886.patch</span><br><span class="line">Patch0012: 0012-Factor-out-unnecessary-logger-calls-875356.patch</span><br><span class="line">Patch0013: 0013-Issue-with-EFI-detection-in-logger-873207.patch</span><br><span class="line">Patch0014: 0014-Man-pages-missing-948848.patch</span><br><span class="line">Patch0015: 0015-Properly-handle-extended-dos-partitions-1322957.patch</span><br><span class="line">Patch0016: 0016-Windows-detection-requires-binary-grep-1322956.patch</span><br><span class="line">Patch0017: 0017-Add-Windows-10-detection-support-1322956.patch</span><br><span class="line">Patch0018: 0018-Suppress-non-blocking-dmraid-error-info-1198918.patch</span><br><span class="line">Patch0019: 0019-Do-not-resolve-device-mapper-symlinks-1300262.patch</span><br><span class="line">Patch0020: 0020-Use-POSIX-shell-syntax-1300262.patch</span><br><span class="line">Patch0021: 0021-Fix-extended-dos-partition-regex-1322957.patch</span><br></pre></td></tr></table></figure><p>单独查看每一个 Patch 很麻烦，直接看操作系统上已经安装的 os-prober 相关文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">$rpm -ql os-prober</span><br><span class="line">/usr/bin/linux-boot-prober</span><br><span class="line">/usr/bin/os-prober</span><br><span class="line">/usr/libexec/linux-boot-probes</span><br><span class="line">/usr/libexec/linux-boot-probes/50mounted-tests</span><br><span class="line">/usr/libexec/linux-boot-probes/mounted</span><br><span class="line">/usr/libexec/linux-boot-probes/mounted/40grub</span><br><span class="line">/usr/libexec/linux-boot-probes/mounted/40grub2</span><br><span class="line">/usr/libexec/linux-boot-probes/mounted/50lilo</span><br><span class="line">/usr/libexec/linux-boot-probes/mounted/90fallback</span><br><span class="line">/usr/libexec/newns</span><br><span class="line">/usr/libexec/os-probes</span><br><span class="line">/usr/libexec/os-probes/50mounted-tests</span><br><span class="line">/usr/libexec/os-probes/init</span><br><span class="line">/usr/libexec/os-probes/init/10filesystems</span><br><span class="line">/usr/libexec/os-probes/mounted</span><br><span class="line">/usr/libexec/os-probes/mounted/05efi</span><br><span class="line">/usr/libexec/os-probes/mounted/10freedos</span><br><span class="line">/usr/libexec/os-probes/mounted/10qnx</span><br><span class="line">/usr/libexec/os-probes/mounted/20macosx</span><br><span class="line">/usr/libexec/os-probes/mounted/20microsoft</span><br><span class="line">/usr/libexec/os-probes/mounted/30utility</span><br><span class="line">/usr/libexec/os-probes/mounted/40lsb</span><br><span class="line">/usr/libexec/os-probes/mounted/70hurd</span><br><span class="line">/usr/libexec/os-probes/mounted/80minix</span><br><span class="line">/usr/libexec/os-probes/mounted/83haiku</span><br><span class="line">/usr/libexec/os-probes/mounted/90linux-distro</span><br><span class="line">/usr/libexec/os-probes/mounted/90solaris</span><br><span class="line">/usr/libexec/os-probes/mounted/efi</span><br><span class="line">/usr/libexec/os-probes/mounted/efi/10elilo</span><br><span class="line">/usr/libexec/os-probes/mounted/efi/20microsoft</span><br><span class="line">/usr/share/doc/os-prober-1.58</span><br><span class="line">/usr/share/doc/os-prober-1.58/README</span><br><span class="line">/usr/share/doc/os-prober-1.58/TODO</span><br><span class="line">/usr/share/doc/os-prober-1.58/changelog</span><br><span class="line">/usr/share/doc/os-prober-1.58/copyright</span><br><span class="line">/usr/share/man/man1/linux-boot-prober.1.gz</span><br><span class="line">/usr/share/man/man1/os-prober.1.gz</span><br><span class="line">/usr/share/os-prober</span><br><span class="line">/usr/share/os-prober/common.sh</span><br><span class="line">/var/lib/os-prober</span><br></pre></td></tr></table></figure><h3 id="grub2-mkconfig-调用-os-prober-流程"><a href="#grub2-mkconfig-调用-os-prober-流程" class="headerlink" title="grub2-mkconfig 调用 os-prober 流程"></a>grub2-mkconfig 调用 os-prober 流程</h3><p><code>grub2-mkconfig</code> 最终目的是生成 grub.cfg ，在执行过程中，会通过调用 <code>/etc/grub.d/</code> 路径下的配置脚本来依次执行，在 CentOS 存在 <code>/etc/grub.d/30_os-prober</code> 配置脚本。</p><p>执行 <code>os-prober</code> 的具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OSPROBED=&quot;`os-prober | tr &apos; &apos; &apos;^&apos; | paste -s -d &apos; &apos;`&quot;</span><br><span class="line">if [ -z &quot;$&#123;OSPROBED&#125;&quot; ] ; then</span><br><span class="line">  # empty os-prober output, nothing doing</span><br><span class="line">  exit 0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><h3 id="CentOS-os-prober-执行流程"><a href="#CentOS-os-prober-执行流程" class="headerlink" title="CentOS os-prober 执行流程"></a>CentOS os-prober 执行流程</h3><ul><li>创建新的 namespace，在调试 os-prober 过程中建议注释掉该行为</li><li>确保所有的文件系统类型是支持的，执行 <code>/usr/libexec/os-prober/init/*</code></li><li>获取节点处于已挂载分区信息、swap 分区信息、RAID 设备分区信息</li><li><p>获取节点所有 partition 信息</p><ul><li>如果 partition 已经存在于swap 分区信息或 RAID 设备分区信息中，则跳过</li><li><p>通过 <code>blkid -o value -S type $path</code> 获取文件系统信息作为 type，比如：<br>  -</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$blkid -o value -s TYPE /dev/vdb1</span><br><span class="line">xfs_external_log</span><br></pre></td></tr></table></figure></code></pre><ul><li>如果 type == btrfs，则判断是否为 btrfs volume，如果是则过滤；如果不是，则使用 <code>/usr/libexec/os-probes/50mounted-tests</code> 针对该分区进行探测</li><li>如果分区不在已挂载分区信息中，则使用 <code>/usr/libexec/os-probes/50mounted-tests</code> 路径下的所有方式进行探测，遍历执行</li><li>如果分区处于已挂载分区信息中，则使用 <code>/usr/libexec/os-probes/50mounted-tests</code> 路径下的所有方式进行探测，遍历执行</li></ul></li></ul></li><li>探测结束</li></ul><h3 id="CentOS-usr-libexec-os-probes-50mounted-tests-探测流程"><a href="#CentOS-usr-libexec-os-probes-50mounted-tests-探测流程" class="headerlink" title="CentOS /usr/libexec/os-probes/50mounted-tests 探测流程"></a>CentOS <code>/usr/libexec/os-probes/50mounted-tests</code> 探测流程</h3><ul><li>参数校验，获取 partition 的 fs type 属性<ul><li>如果 type 处于未探测、空、LVM、swap、ctypto、ntfs则直接退出</li></ul></li><li>如果 type == btrfs ，则针对 subvolume 进行探测流程</li><li>如果节点存在 grub-mount ，存在 grub2-probe 则判断 partition 是否被GRUB 挂载</li><li>如果上述分支都没有进入，则将分区置为只读<ul><li>blockdev –setro $partition</li><li>并通过 trap 设置信号处理函数，当接收到 EXIT,HUP,INT,QUIT,TERM 信号时，则将partition 重新置为可读可写</li></ul></li><li>将分区根据当前 type 类型挂载到临时挂载点下，试用 <code>/usr/libexec/os-probes/mounted/</code> 路径下的探测方式进行探测，遍历执行</li><li>探测结束</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果你的节点上存在处于未被挂载，且文件系统类型不为空的情况，那么建议通过设置 GRUB 配置：<code>GRUB_DISABLE_OS_PROBER=true</code> 来禁用 os-prober 的执行，防止磁盘分区变为只读。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://tracker.ceph.com/issues/11298" target="_blank" rel="noopener">https://tracker.ceph.com/issues/11298</a></li><li><a href="https://www.thegeekdiary.com/how-to-disable-os-prober-in-centos-rhel-7/" target="_blank" rel="noopener">https://www.thegeekdiary.com/how-to-disable-os-prober-in-centos-rhel-7/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近遇到了一个故障，在集群软件升级过程中，发现某一个磁盘分区变为只读，导致存储应用识别该磁盘不可用。调查发现集群升级过程中，会重新生成每个节
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://zdyxry.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux audit buffer 配置</title>
    <link href="https://zdyxry.github.io/2021/08/15/Linux-audit-buffer-%E9%85%8D%E7%BD%AE/"/>
    <id>https://zdyxry.github.io/2021/08/15/Linux-audit-buffer-配置/</id>
    <published>2021-08-15T08:49:59.000Z</published>
    <updated>2022-08-28T04:18:55.755Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近遇到了一个 case，一台主机处于挂起状态，当时主机的 IPMI console 显示日志 ： <code>audit: backlog limit exceeded</code> ，由于一些原因，导致没有及时的发送 NMI 信号触发 kernel core dump，所以只能根据已有信息进行排查，记录下 audit buffer 相关配置的学习。</p><h2 id="Audit"><a href="#Audit" class="headerlink" title="Audit"></a>Audit</h2><p>Linux kernel 在 2.6 引入 audit，为了能够更好的记录系统中的各种安全事件，比如文件修改事件和系统调用事件。</p><h3 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h3><p><code>/etc/audit</code> 目录下</p><ul><li>控制规则：设置 audit 系统的一些行为以及修改其默认设置</li><li>文件系统规则：审计文件，记录特殊文件或目录的访问情况</li><li>系统调用规则：记录一些特殊应用程序的系统调用行为</li></ul><h3 id="buffer-配置"><a href="#buffer-配置" class="headerlink" title="buffer 配置"></a>buffer 配置</h3><ul><li><p>当事件无法被正确记录时，会打印一些异常日志：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">audit: audit_backlog=321 &gt; audit_backlog_limit=320</span><br><span class="line">audit: audit_lost=44395 audit_rate_limit=0 audit_backlog_limit=320</span><br><span class="line">audit: backlog limit exceeded</span><br></pre></td></tr></table></figure></code></pre></li><li><p>根据 audit 的flag 配置决定，当 flag ==1 时，打印提示日志；当 flag ==2 时，kernel panic。 默认flag = 1 。</p></li><li><p>在审计系统中，使用 socket buffer queue 来保存事件，每当接收到一条新的事件时，都会记录并准备添加到这个 queue 中，有以下几个参数来控制该行为：</p><ul><li>backlog_limit<ul><li>queue 最大长度，当记录了一个事件导致queue 长度超过限制，那么就会发生failure</li></ul></li><li>raid_limit<ul><li>速率，一秒钟内事件数量超过限定值时，则不会添加到 queue 中并会发生 failure</li></ul></li></ul></li></ul><h3 id="故障处理"><a href="#故障处理" class="headerlink" title="故障处理"></a>故障处理</h3><ul><li><p>如果无法记录事件，那么会发生故障，根据 flag 设置来决定处理行为</p><ul><li>0，silent，静默处理</li><li><p>1， printk(默认行为)，打印到系统日志中，具体打印限制根据 kernel 参数决定：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># sysctl -a | grep kernel.printk_rate</span><br><span class="line">kernel.printk_ratelimit = 5</span><br><span class="line">kernel.printk_ratelimit_burst = 10</span><br></pre></td></tr></table></figure></code></pre></li><li><p>2， panic，kernel panic</p></li></ul></li></ul><h3 id="buffer-资源计算"><a href="#buffer-资源计算" class="headerlink" title="buffer 资源计算"></a>buffer 资源计算</h3><ul><li>queue 在内存中，需要设置一个合理的 backlog_limit 数值来防止占用过多内存资源，每条事件在 9000 bytes 左右，如果设置为 320，那么占用内存资源为 320 * 9000 = 2.7 MiB 左右。</li></ul><h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><ul><li><p><code>audit: backlog limit exceeded</code></p><ul><li><p>IPMI console 打印以上日志，表示事件未被正确的记录，事件当前数量超过 backlog_limit 限制，可能会导致系统 hang 或者无响应</p><blockquote><p>An audit buffer queue at or exceeding capacity might also cause the instance to hang or remain in an unresponsive state.</p></blockquote></li><li><p>推荐根据实际情况调整 backlog_limit 大小，比如 8192.</p></li><li>可能产生的原因：<ul><li>审计系统设置参数设置不合理</li><li>冻结文件系统（通常由于系统快照）  </li></ul></li><li><p>audit 版本为 2.4.1-5 ，其中的配置为：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@dogfood-idc-elf-65 audit]# rpm -qa |grep audit</span><br><span class="line">audit-2.4.1-5.el7.x86_64</span><br><span class="line">audit-libs-2.4.1-5.el7.x86_64</span><br><span class="line">[root@dogfood-idc-elf-65 audit]# auditctl -s</span><br><span class="line">enabled 1</span><br><span class="line">flag 1</span><br><span class="line">pid 1093</span><br><span class="line">rate_limit 0</span><br><span class="line">backlog_limit 320</span><br><span class="line">lost 0</span><br><span class="line">backlog 0</span><br><span class="line">loginuid_immutable 0 unlocked</span><br></pre></td></tr></table></figure></code></pre></li><li><p>audit 版本为2.7.6-3，其中的配置为：</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@node90 14:16:09 ~]$rpm -q audit</span><br><span class="line">audit-2.7.6-3.el7.x86_64</span><br><span class="line">[root@node90 14:16:13 ~]$auditctl -s</span><br><span class="line">enabled 1</span><br><span class="line">failure 1</span><br><span class="line">pid 1133</span><br><span class="line">rate_limit 0</span><br><span class="line">backlog_limit 8192</span><br><span class="line">lost 0</span><br><span class="line">backlog 0</span><br><span class="line">loginuid_immutable 0 unlocked</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h3 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h3><ul><li>auditd 禁止 restart 操作（RefuseManualStop = yes），所以无法使用 [[systemctl]] 控制服务启停，可以使用 <code>service</code> 代替<ul><li><code>service auditd restart</code></li></ul></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Redhat 推荐在线上服务器上合理配置 audit 相关参数，避免因为参数不合理产生一些意外情况，CentOS7 系列的 audit 最新版本 backlog_limit 已经是 8192 。但是对于 audit 出现异常所产生的影响，不是很明确，在 AWS 的 KB 中是这么说的：</p><blockquote><p>An audit buffer queue at or exceeding capacity might also cause the instance to hang or remain in an unresponsive state.</p></blockquote><p>但是在 Redhat 的相关 KB 中关于具体可能产生怎样的影响并没有详细说明，还需要后续调查。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li>buffer 的单位是什么？ <a href="https://serverfault.com/questions/701335/auditctl-buffer-setting-how-large-is-this" target="_blank" rel="noopener">https://serverfault.com/questions/701335/auditctl-buffer-setting-how-large-is-this</a></li><li>关于 buffer 参数的解释： <a href="https://blog.siphos.be/2015/05/audit-buffering-and-rate-limiting" target="_blank" rel="noopener">https://blog.siphos.be/2015/05/audit-buffering-and-rate-limiting</a></li><li>AWS 关于 <code>audit: backlog limit exceeded</code> 的KB： <a href="https://aws.amazon.com/cn/premiumsupport/knowledge-center/troubleshoot-audit-backlog-errors-ec2/?nc1=h_ls" target="_blank" rel="noopener">https://aws.amazon.com/cn/premiumsupport/knowledge-center/troubleshoot-audit-backlog-errors-ec2/?nc1=h_ls</a></li><li>RedHat 关于 <code>audit: backlog limit exceeded</code> 的 KB，其中提到了部分可能的原因和根本原因： <a href="https://access.redhat.com/solutions/19327" target="_blank" rel="noopener">https://access.redhat.com/solutions/19327</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近遇到了一个 case，一台主机处于挂起状态，当时主机的 IPMI console 显示日志 ： &lt;code&gt;audit: backlog
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Container Optimized OS(COS) 简单对比</title>
    <link href="https://zdyxry.github.io/2021/07/30/Container-Optimized-OS-COS-%E7%AE%80%E5%8D%95%E5%AF%B9%E6%AF%94/"/>
    <id>https://zdyxry.github.io/2021/07/30/Container-Optimized-OS-COS-简单对比/</id>
    <published>2021-07-30T21:39:04.000Z</published>
    <updated>2022-08-28T04:18:55.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前简单调研过一些 Container Optimized OS，进行了一些简单的对比，最近又被同事问到了，整理一下发出来。</p><h2 id="COS"><a href="#COS" class="headerlink" title="COS"></a>COS</h2><img src="/2021/07/30/Container-Optimized-OS-COS-简单对比/cos.png" title="COS"><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>如果让我来选择一个 COS 作为 BaseOS 来进行定制，那我会根据以下几个条件来进行选择：</p><ul><li>是否支持 OSTree</li><li>是否有明星公司做背后支持，如 RedHat、VMware</li><li>社区活跃度</li></ul><p>根据以上几个条件，如果是我自己使用的话，我会选择 Fedora CoreOS，或者 VMware Photo（OSTree） 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;之前简单调研过一些 Container Optimized OS，进行了一些简单的对比，最近又被同事问到了，整理一下发出来。&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
    
      <category term="Container" scheme="https://zdyxry.github.io/tags/Container/"/>
    
  </entry>
  
</feed>
