<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yiran</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zdyxry.com/"/>
  <updated>2018-12-12T14:42:46.382Z</updated>
  <id>http://zdyxry.com/</id>
  
  <author>
    <name>yiran</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>戴尔服务器 iDrac 配置</title>
    <link href="http://zdyxry.com/2018/12/12/%E6%88%B4%E5%B0%94%E6%9C%8D%E5%8A%A1%E5%99%A8-iDrac-%E9%85%8D%E7%BD%AE/"/>
    <id>http://zdyxry.com/2018/12/12/戴尔服务器-iDrac-配置/</id>
    <published>2018-12-12T14:18:15.000Z</published>
    <updated>2018-12-12T14:42:46.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>之前介绍过超微的 IPMI 配置时提过，超微的 IPMI 是最简陋的，最近在用戴尔服务器的时候碰到了一个比较坑的事情，查了资料解决了，更加坚定之前的结论，IPMI 相应的配置尽量独立。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在戴尔服务器安装 CentOS 后，可见网卡比预期要多出一块，物理服务器安装了两块 PCIe 网卡，一块千兆，一块万兆，每块网卡有两个网口，那么理应在服务器看到的应该是 4个网口，即 <code>ip ad</code> 看到的应该是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@node11 22:24:49 ~]<span class="variable">$ip</span> ad |grep enp</div><div class="line">2: enp94s0f0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq master ovs-system state UP qlen 1000</div><div class="line">3: enp24s0f0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq portid 3cfdfe6c9e10 state DOWN qlen 1000</div><div class="line">4: enp24s0f1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq master ovs-system portid 3cfdfe6c9e12 state UP qlen 1000</div><div class="line">5: enp94s0f1: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc mq state DOWN qlen 1000</div></pre></td></tr></table></figure><p>但是安装完 OS，发现多出一块网口 <code>eno16</code> ，通过 <code>ethtool</code> 工具查看，发现该网口为千兆，且处于连接状态，最开始没多想，直接将该网口作为管理网络配置了，一切正常。</p><p>当我尝试通过该网口连接 IPMI 获取风扇信息时，发现无法获取，验证命令为：<br><code>ipmitool -I lanplus -H &lt;ipmi ip&gt; -U &lt;user name&gt; -P &lt;password&gt; lan print</code><br>最开始以为是密码不对，后来发现是在 OS 内部无法 ping 通 IPMI IP，这就很奇怪了。</p><p>当时网络情况如下：</p><table><thead><tr><th>连通情况</th><th>yiran’s PC</th><th>IPMI IP</th><th>OS IP</th></tr></thead><tbody><tr><td>yiran’s PC</td><td>1</td><td>1</td><td>1</td></tr><tr><td>IPMI IP</td><td>1</td><td>1</td><td>0</td></tr><tr><td>OS IP</td><td>1</td><td>0</td><td>1</td></tr></tbody></table><p>因为没遇到过这种情况，根据经验，先检查了下 iDRAC 网络配置，发现当时 iDRAC 网卡选择的是 LOM1，也就是板载网卡，且该网卡处于 pass-through 状态，官方解释如下：</p><blockquote><p>板载网卡 (LAN On Motherboards, LOM)，如果您选择 Network Settings（网络设置）下的 Auto Dedicated NIC（自动专用 NIC），则当 iDRAC 将其 NIC 选择作为共享 LOM（1、2、3 或 4）并且在 iDRAC 专用 NIC 上检测到链接时，iDRAC 会更改其 NIC 选择来使用专用 NIC。如果在专用 NIC 上检 测不到链接，则 iDRAC 使用共享 LOM。从共享 NIC 切换到专用 NIC 的超时为五秒，而从专用 NIC 切换到共享 NIC 的超时为 30 秒。可以使用 RACADM 或 WS-MAN 配置此超时值。<br>如果选择 LOM 作为直通配置，并且使用专用模式连接服务器，则输入操作系统的 IPv4 地址。 注: 如果在共享的 LOM 模式下连接了服务器，则操作系统 IP 地址字段将禁用。</p></blockquote><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>将 iDRAC 网络配置从 LOM 改为 Dedicated 后，重启 OS 即可，注意，改为 Dedicated 后，OS 将无法识别到 LOM，需要重新配置网络。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;之前介绍过超微的 IPMI 配置时提过，超微的 IPMI 是最简陋的，最近在用戴尔服务器的时候碰到了一个比较坑的事情，查了资料解决了，更加坚
      
    
    </summary>
    
    
      <category term="Server" scheme="http://zdyxry.com/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer（六）</title>
    <link href="http://zdyxry.com/2018/12/06/%E5%89%91%E6%8C%87-Offer%EF%BC%88%E5%85%AD%EF%BC%89/"/>
    <id>http://zdyxry.com/2018/12/06/剑指-Offer（六）/</id>
    <published>2018-12-06T14:34:54.000Z</published>
    <updated>2018-12-06T14:59:39.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表中倒数第k个结点"><a href="#链表中倒数第k个结点" class="headerlink" title="链表中倒数第k个结点"></a>链表中倒数第k个结点</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 使用两个指针，a 先遍历 k-1，之后一起遍历，直到a 指针到最后一个节点，则 b 为倒数 k 节点</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_k_to_tail</span><span class="params">(self, head, k)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">and</span> k &lt;= <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">        a_head = head</div><div class="line">        b_head = <span class="keyword">None</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k - <span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> a_head.next != <span class="keyword">None</span>:</div><div class="line">                a_head = a_head.next</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">        b_head = head</div><div class="line">        <span class="keyword">while</span> a_head.next != <span class="keyword">None</span>:</div><div class="line">            a_head = a_head.next</div><div class="line">            b_head = b_head.next</div><div class="line">        <span class="keyword">return</span> b_head.val</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_k_to_tail2</span><span class="params">(self, head, k)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">and</span> k &lt;= <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line">        a_head = head</div><div class="line"></div><div class="line">        <span class="keyword">while</span> a_head <span class="keyword">and</span> (k - <span class="number">1</span>) &gt;= <span class="number">0</span>:</div><div class="line">            a_head = a_head.next</div><div class="line">            k -= <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> a_head:</div><div class="line">            a_head = a_head.next</div><div class="line">            head = head.next</div><div class="line">        <span class="keyword">return</span> head.val</div><div class="line"></div><div class="line"></div><div class="line">a = ListNode(<span class="number">1</span>)</div><div class="line">a.next = ListNode(<span class="number">2</span>)</div><div class="line">a.next.next = ListNode(<span class="number">3</span>)</div><div class="line">a.next.next.next = ListNode(<span class="number">4</span>)</div><div class="line">a.next.next.next.next = ListNode(<span class="number">5</span>)</div><div class="line"></div><div class="line">s = Solution()</div><div class="line"><span class="keyword">print</span> s.find_k_to_tail2(a, <span class="number">3</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;链表中倒数第k个结点&quot;&gt;&lt;a href=&quot;#链表中倒数第k个结点&quot; class=&quot;headerlink&quot; title=&quot;链表中倒数第k个结点&quot;&gt;&lt;/a&gt;链表中倒数第k个结点&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
      <category term="alogrithms" scheme="http://zdyxry.com/tags/alogrithms/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer（五）</title>
    <link href="http://zdyxry.com/2018/12/05/%E5%89%91%E6%8C%87-Offer%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>http://zdyxry.com/2018/12/05/剑指-Offer（五）/</id>
    <published>2018-12-05T12:25:38.000Z</published>
    <updated>2018-12-05T12:33:30.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="调整数组顺序使奇数位于偶数前面"><a href="#调整数组顺序使奇数位于偶数前面" class="headerlink" title="调整数组顺序使奇数位于偶数前面"></a>调整数组顺序使奇数位于偶数前面</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reorder</span><span class="params">(nums, func)</span>:</span></div><div class="line">    left, right = <span class="number">0</span>, len(nums) - <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> left &lt; right:</div><div class="line">        <span class="keyword">while</span> <span class="keyword">not</span> func(nums[left]):</div><div class="line">            left += <span class="number">1</span></div><div class="line">        <span class="keyword">while</span> func(nums[right]):</div><div class="line">            right -= <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> left &lt; right:</div><div class="line">            nums[left], nums[right] = nums[right], nums[left]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_even</span><span class="params">(num)</span>:</span></div><div class="line">    <span class="keyword">return</span> (num &amp; <span class="number">1</span>) == <span class="number">0</span></div></pre></td></tr></table></figure><h2 id="调整数组顺序使奇数位于偶数前面，保持相对位置不变"><a href="#调整数组顺序使奇数位于偶数前面，保持相对位置不变" class="headerlink" title="调整数组顺序使奇数位于偶数前面，保持相对位置不变"></a>调整数组顺序使奇数位于偶数前面，保持相对位置不变</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reorder2</span><span class="params">(nums)</span>:</span></div><div class="line">    left = [num <span class="keyword">for</span> num <span class="keyword">in</span> nums <span class="keyword">if</span> num &amp; <span class="number">1</span> != <span class="number">0</span>]</div><div class="line">    right = [num <span class="keyword">for</span> num <span class="keyword">in</span> nums <span class="keyword">if</span> num &amp; <span class="number">1</span> == <span class="number">0</span>]</div><div class="line">    <span class="keyword">return</span> left + right</div><div class="line"></div><div class="line">nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</div><div class="line"><span class="keyword">print</span> reorder2(nums)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;调整数组顺序使奇数位于偶数前面&quot;&gt;&lt;a href=&quot;#调整数组顺序使奇数位于偶数前面&quot; class=&quot;headerlink&quot; title=&quot;调整数组顺序使奇数位于偶数前面&quot;&gt;&lt;/a&gt;调整数组顺序使奇数位于偶数前面&lt;/h2&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="alogrithms" scheme="http://zdyxry.com/tags/alogrithms/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer（四）</title>
    <link href="http://zdyxry.com/2018/12/02/%E5%89%91%E6%8C%87-Offer%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://zdyxry.com/2018/12/02/剑指-Offer（四）/</id>
    <published>2018-12-02T12:11:24.000Z</published>
    <updated>2018-12-02T12:12:24.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在O-1-时间内删除链表结点"><a href="#在O-1-时间内删除链表结点" class="headerlink" title="在O(1)时间内删除链表结点"></a>在O(1)时间内删除链表结点</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x=None)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        self.val = <span class="keyword">None</span></div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_list</span><span class="params">(self, list_head, to_delete)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> list_head <span class="keyword">or</span> <span class="keyword">not</span> to_delete:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> to_delete.next != <span class="keyword">None</span>:</div><div class="line">            next_node = to_delete.next</div><div class="line">            to_delete.val = next_node.val</div><div class="line">            to_delete.next = next_node.next</div><div class="line">            next_node.__del__()</div><div class="line"></div><div class="line">        <span class="keyword">elif</span> list_head == to_delete:</div><div class="line">            list_head.__del__()</div><div class="line">            to_delete.__del__()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            list_node = list_head</div><div class="line">            <span class="keyword">while</span> list_node.next != to_delete:</div><div class="line">                list_node = list_node.next</div><div class="line">            list_node.next = <span class="keyword">None</span></div><div class="line">            to_delete.__del__()</div><div class="line"></div><div class="line"></div><div class="line">node1 = ListNode(<span class="number">10</span>)</div><div class="line">node2 = ListNode(<span class="number">11</span>)</div><div class="line">node3 = ListNode(<span class="number">13</span>)</div><div class="line">node4 = ListNode(<span class="number">15</span>)</div><div class="line">node1.next = node2</div><div class="line">node2.next = node3</div><div class="line">node3.next = node4</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Solution().delete_list(node1, node4)</span></div><div class="line">Solution().delete_list(node1, node3)</div><div class="line">print(node1.next.next.val)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在O-1-时间内删除链表结点&quot;&gt;&lt;a href=&quot;#在O-1-时间内删除链表结点&quot; class=&quot;headerlink&quot; title=&quot;在O(1)时间内删除链表结点&quot;&gt;&lt;/a&gt;在O(1)时间内删除链表结点&lt;/h2&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="alogrithms" scheme="http://zdyxry.com/tags/alogrithms/"/>
    
  </entry>
  
  <entry>
    <title>个人常用工具</title>
    <link href="http://zdyxry.com/2018/12/02/%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <id>http://zdyxry.com/2018/12/02/个人常用工具/</id>
    <published>2018-12-02T08:35:54.000Z</published>
    <updated>2018-12-02T11:05:38.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司标配 Thinkpad，也曾经折腾过 Linux，最终因为舍不得 Windows 下的各种软件，就老老实实用 Windows 。<br>周五的时候电脑故障，趁着重新配置开发环境的机会，整理下自己常用的软件|工具。</p><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><h4 id="VIM"><a href="#VIM" class="headerlink" title="VIM"></a>VIM</h4><p>主力编辑器，因为平时写 Python 比较多，所以安装的插件并不多，主要用到的就是函数之间的跳转，具体配置在 <a href="https://github.com/zdyxry/Dotfiles" target="_blank" rel="external">github</a> 。</p><h4 id="VScode"><a href="#VScode" class="headerlink" title="VScode"></a>VScode</h4><p>在写代码的时候通常使用 vim ，但是看代码还是习惯于 VScode，主要是看代码用鼠标控制比较方便。<br>偶尔会碰到编写配置文件，比如 JSON/YAML 的时候，vim 写起来还是有些吃力，可能是我用的不到家吧。</p><h3 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h3><h4 id="XShell"><a href="#XShell" class="headerlink" title="XShell"></a>XShell</h4><p>在 Windows 用的比较多的应该是 XShell，同时管理多台服务器简单高效，且有配套的 XSFTP，上传/下载文件很方便。</p><h4 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h4><p>在 Linux 上主要用系统自带的 Terminal 配合 Tmux 使用，主要原因是 Tmux 可以在多平台使用，不用针对不同平台记不同的快捷键（没错，说的就是 Jetbrains）。  </p><p>并没有对 tmux 做太多定制化配置，因为有时候服务器上面不会允许你修改默认配置文件的，所以大部分用的默认配置，平时用的比较多的应该就是 Window &amp; Panel 配合使用。</p><h4 id="Hyper"><a href="#Hyper" class="headerlink" title="Hyper"></a>Hyper</h4><p>好看。</p><h3 id="周边工具"><a href="#周边工具" class="headerlink" title="周边工具"></a>周边工具</h3><h4 id="Wox"><a href="#Wox" class="headerlink" title="Wox"></a>Wox</h4><p>作为 Windows 下的 alfred， Wox 无疑是一个合格的软件，可以极大的提高效率。</p><h4 id="Sumatra-PDF"><a href="#Sumatra-PDF" class="headerlink" title="Sumatra PDF"></a>Sumatra PDF</h4><p>一款极小的 PDF 阅读器，该有的功能都有，比福昕好用，无广告。</p><h4 id="Ditto"><a href="#Ditto" class="headerlink" title="Ditto"></a>Ditto</h4><p>Windows 下的一款剪切板软件，可以记录复制粘贴的历史情况，提供搜索等功能。</p><h3 id="个人管理"><a href="#个人管理" class="headerlink" title="个人管理"></a>个人管理</h3><h4 id="有道云笔记"><a href="#有道云笔记" class="headerlink" title="有道云笔记"></a>有道云笔记</h4><p>笔记这类工具用上一款之后，随着使用时间的增加，切换成本是成正比的，所以就要选一块稳定可靠的。像近来流行的 Bear，为知，Notion，说实在的，就是担心哪天公司突然倒闭了。  </p><p>有道现在支持 Markdown，部分功能需要开通会员才可以，比如 Markdown 中上传图片。不过对于我来说还是够用了。</p><h4 id="Trello"><a href="#Trello" class="headerlink" title="Trello"></a>Trello</h4><p>由于现在工作内容每天变动很大，随时有可能调整任务优先级，所以平时记录 Todo 类型内容基本上靠着 Markdown 上的 <code>- [ ]</code> 过活。但是对于个人管理而言，还是使用 Trello ，便于管理和记录，方便观察自我成长。</p><h4 id="Pocket"><a href="#Pocket" class="headerlink" title="Pocket"></a>Pocket</h4><p>稍后阅读工具，配合 Chrome 上的插件使用很完美，多平台同步很快。<br>缺点就是分类较为痛苦，要管理自己的 tag。</p><h4 id="Inoreader"><a href="#Inoreader" class="headerlink" title="Inoreader"></a>Inoreader</h4><p>RSS 阅读器。 随着微信/微博等社交公众号的推广，生活中充斥着一些片段信息，有些公众号发的内容毫无营养，极大的浪费时间，这时候关注自己想关注的就比较重要了。</p><p>个人比较喜欢 RSS 订阅的方式订阅自己感兴趣的内容，无论是博客，还是公众号，都可以通过 RSS 的方式订阅，如果没有提供 RSS，也可以通过 RSSHub 来订阅。之后找时间把我订阅的一些博客/网站整理分享出来。</p><h4 id="记账"><a href="#记账" class="headerlink" title="记账"></a>记账</h4><p>一直想找一款账本类工具，多平台，简单易用的，但是没找到，随着第三方支付的便捷性，很多账本都没办法去自动同步，如果手动同步的话又特别麻烦，很容易遗漏。  </p><p>我个人的解决方案简单粗暴：支付宝。 所有个人支出全部通过支付宝支付，利用支付宝的账单统计了解个人消费情况。</p><h3 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h3><h4 id="RescueTime"><a href="#RescueTime" class="headerlink" title="RescueTime"></a>RescueTime</h4><p>支持多平台，且会自动统计工作内容及相应软件使用时间，最终形成以天/周/月为单位的报告。</p><h4 id="ManicTime"><a href="#ManicTime" class="headerlink" title="ManicTime"></a>ManicTime</h4><p>同样支持多平台，相比于 RescueTime ，ManicTime 记录的内容更细，具体到你每天工作的起始/终止时间，中间电脑待机时间等等，每款软件的使用时间及使用频率，最终报告也会精确到每款软件的总使用时间。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>把日常使用最多的软件列举了一下，基本上我每天清醒的时间都是在使用上述软件，想想还是很恐怖的。</p><p>最后的时间管理软件其实我中断使用过一段时间，那段时间我认为自己能够控制自己的工作内容分配，时间分配都在自己的计划中，应该不会出现 <code>时间去哪了</code> 之类的问题。结果最近随着工作内容的增加，每天感觉都有做不完的事情，又不清楚自己的时间都用来做什么了，就又安装回来观察下，结果很震惊：工作分配真的变多了 ( º﹃º )</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;公司标配 Thinkpad，也曾经折腾过 Linux，最终因为舍不得 Windows 下的各种软件，就老老实实用 Windows 。&lt;br&gt;
      
    
    </summary>
    
    
      <category term="tools" scheme="http://zdyxry.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Exponential backoff</title>
    <link href="http://zdyxry.com/2018/12/01/Exponential-backoff/"/>
    <id>http://zdyxry.com/2018/12/01/Exponential-backoff/</id>
    <published>2018-12-01T12:26:02.000Z</published>
    <updated>2018-12-01T12:26:31.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>昨天看到 Ansible 关于 Linux reboot plugin  <a href="https://www.ansible.com/blog/reboot-plugin-for-linux-in-ansible-2-7?utm_medium=Email&amp;utm_campaign=weekly&amp;sc_cid=701f2000000RRCNAA4" target="_blank" rel="external">相关文章</a> 时，看到了它关于重试等待的设计，了解了下 Exponential backoff，特此记录。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>假设存在需求：</p><ol><li>获取服务器 A 启动时间</li><li>重启服务器 A</li><li>获取服务器 A 当前时间</li></ol><p>其中第 2 点，我一般会重启服务器 A 后，不断的重连服务器 A 来判断服务器 A 是否正常启动，每次重连后等待，再次重试，设置一个最大超时时间，超过最大超时时间认为服务器 A 启动失败，任务失败。</p><p>那么什么是 Exponential backoff 呢？ 中文应该叫“指数退避”，意思就是每次重连失败后，等待的时候随着重试次数的增加而成指数增长，如果我们第1次重试等待时间为2s，则第2次重试等待时间为4s，第三次重试等待时间为8s，以此类推。</p><p>我理解最大的好处就是防止短时间内大量的重复错误，有时候当你知道你的操作是短时间无法完成的（比如重启服务器 A），那么该操作执行过程中，短时间内重试多次是没有意义的。当然我们也不能让重试等待时间无限的增长，我们可以设置一个最大的重试时间（不是最大超时时间），如果大于等于最大重试时间，则等待最大重试时间后再次重试。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Do some asynchronous operation.</div><div class="line"></div><div class="line">retries = 0</div><div class="line"></div><div class="line">DO</div><div class="line">    wait for (2^retries * 100) milliseconds</div><div class="line"></div><div class="line">    status = Get the result of the asynchronous operation.</div><div class="line"></div><div class="line">    IF status = SUCCESS</div><div class="line">        retry = false</div><div class="line">    ELSE IF status = NOT_READY</div><div class="line">        retry = true</div><div class="line">    ELSE IF status = THROTTLED</div><div class="line">        retry = true</div><div class="line">    ELSE</div><div class="line">        Some other error occurred, so stop calling the API.</div><div class="line">        retry = false</div><div class="line">    END IF</div><div class="line"></div><div class="line">    retries = retries + 1</div><div class="line"></div><div class="line">WHILE (retry AND (retries &lt; MAX_RETRIES))</div></pre></td></tr></table></figure><h3 id="Ansible-linux-reboot-plugin"><a href="#Ansible-linux-reboot-plugin" class="headerlink" title="Ansible linux reboot  plugin"></a>Ansible linux reboot  plugin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">fail_count = 0</div><div class="line">max_fail_sleep = 12</div><div class="line"></div><div class="line">while datetime.utcnow() &lt; max_end_time:</div><div class="line">    try:</div><div class="line">        action()</div><div class="line">        if action_desc:</div><div class="line">            display.debug(&apos;%s: %s success&apos; % (self._task.action, action_desc))</div><div class="line">        return</div><div class="line">    except Exception as e:</div><div class="line">        # Use exponential backoff with a max timout, plus a little bit of randomness</div><div class="line">        random_int = random.randint(0, 1000) / 1000</div><div class="line">        fail_sleep = 2 ** fail_count + random_int</div><div class="line">        if fail_sleep &gt; max_fail_sleep:</div><div class="line">            fail_sleep = max_fail_sleep + random_int</div><div class="line">        if action_desc:</div><div class="line">            display.debug(&quot;&#123;0&#125;: &#123;1&#125; fail &apos;&#123;2&#125;&apos;, retrying in &#123;3:.4&#125; seconds...&quot;.format(self._task.action, action_desc, to_text(e), fail_sleep))</div><div class="line">        fail_count += 1</div><div class="line">        time.sleep(fail_sleep)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;昨天看到 Ansible 关于 Linux reboot plugin  &lt;a href=&quot;https://www.ansible.com/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>剑指 Offer（三）</title>
    <link href="http://zdyxry.com/2018/11/25/%E5%89%91%E6%8C%87-Offer%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://zdyxry.com/2018/11/25/剑指-Offer（三）/</id>
    <published>2018-11-25T02:29:46.000Z</published>
    <updated>2018-12-01T01:49:08.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="打印1到最大的n位数"><a href="#打印1到最大的n位数" class="headerlink" title="打印1到最大的n位数"></a>打印1到最大的n位数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将数组转换为字符</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_number</span><span class="params">(number)</span>:</span></div><div class="line">    is_beginning_0 = <span class="keyword">True</span></div><div class="line">    num_len = len(number)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_len):</div><div class="line">        <span class="keyword">if</span> is_beginning_0 <span class="keyword">and</span> number[i] != <span class="string">"0"</span>:</div><div class="line">            is_beginning_0 = <span class="keyword">False</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_beginning_0:</div><div class="line">            print(<span class="string">"%c"</span> % number[i], end=<span class="string">""</span>)</div><div class="line">    print(<span class="string">""</span>)</div><div class="line"></div><div class="line"><span class="comment"># 边界条件：n &gt; 0</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_1_to_max_of_n1</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> </div><div class="line">    </div><div class="line">    number = [<span class="string">"0"</span>] * n</div><div class="line">    <span class="keyword">while</span> <span class="keyword">not</span> increment(number):</div><div class="line">        print_number(number)</div><div class="line"></div><div class="line"><span class="comment"># 从最后一位开始计算，如果 最后一位增长为10，则重置为 0，且进位；如果首位增长为 10，则溢出</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">increment</span><span class="params">(number)</span>:</span></div><div class="line">    is_carry = <span class="number">0</span></div><div class="line">    is_overflow = <span class="keyword">False</span></div><div class="line">    sum = <span class="number">0</span></div><div class="line">    num_len = len(number)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num_len - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</div><div class="line">        sum = int(number[i]) + is_carry</div><div class="line">        <span class="keyword">if</span> i == num_len - <span class="number">1</span>:</div><div class="line">            sum += <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> sum &gt;= <span class="number">10</span>:</div><div class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</div><div class="line">                is_overflow = <span class="keyword">True</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                sum -= <span class="number">10</span></div><div class="line">                number[i] = str(sum)</div><div class="line">                is_carry = <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            number[i] = str(sum)</div><div class="line">            <span class="keyword">break</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> is_overflow</div><div class="line">        </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_1_to_max_of_n2</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">if</span> n &lt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span></div><div class="line">    </div><div class="line">    number = [<span class="string">"0"</span>] * n</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        number[<span class="number">0</span>] = str(i)</div><div class="line">        print_1_to_max_of_n_recursively(number, n, <span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment"># 始终找到最后一位，并将其计算</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_1_to_max_of_n_recursively</span><span class="params">(number, num_len, index)</span>:</span></div><div class="line">    <span class="keyword">if</span> index == num_len - <span class="number">1</span>:</div><div class="line">        print_number(number)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        number[index + <span class="number">1</span>] = str(i)</div><div class="line">        print_1_to_max_of_n_recursively(number, num_len, index +<span class="number">1</span>)</div><div class="line"></div><div class="line"></div><div class="line">print_number([<span class="string">"0"</span>, <span class="string">"1"</span>, <span class="string">"1"</span>])</div><div class="line">print_1_to_max_of_n1(<span class="number">2</span>)</div><div class="line">print_1_to_max_of_n2(<span class="number">2</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;打印1到最大的n位数&quot;&gt;&lt;a href=&quot;#打印1到最大的n位数&quot; class=&quot;headerlink&quot; title=&quot;打印1到最大的n位数&quot;&gt;&lt;/a&gt;打印1到最大的n位数&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
      <category term="alogrithms" scheme="http://zdyxry.com/tags/alogrithms/"/>
    
  </entry>
  
  <entry>
    <title>Ansible最佳实践</title>
    <link href="http://zdyxry.com/2018/11/24/Ansible%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://zdyxry.com/2018/11/24/Ansible最佳实践/</id>
    <published>2018-11-24T13:18:28.000Z</published>
    <updated>2018-12-01T01:49:08.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>说起来我真正负责过大批量服务器线上管理的时间，还是在16年负责运维的时候，那时候还都是通过 Shell 脚本来完成一些自动化的工作，当时觉得还不错，至少我觉得可定制化上还是很好的。  </p><p>目前负责公司产品中一部分功能目前是通过 Shell 来完成的，但是 Shell 脚本在使用中存在一些弊端，最近在用 Ansible 来重写这部分功能，在重写过程中感受负责，又爱又恨，也有一些疑惑，特此记录。</p><h2 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h2><p>相信大家都或多或少听过 Ansible,Puppet,SaltStack 等等自动管理工具，它们的功能都很强大，但使用起来又不简单，Ansible 可以说是这里面上手最快的一个。</p><p>这里我不讲述 Ansible 具体的使用规则，大家看文档就好，我讲下我常用的几个场景：</p><h3 id="批量查看、操作、拷贝"><a href="#批量查看、操作、拷贝" class="headerlink" title="批量查看、操作、拷贝"></a>批量查看、操作、拷贝</h3><p>无论是作为一名开发，还是测试、运维，应该都碰到过需要管理多台服务器的情况，比如我们想要查看一个集群中所有节点的负责情况，那么我们可以执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> $ ansible yiran-cluster -m raw -a <span class="string">'uptime'</span></div><div class="line">192.168.67.39 | SUCCESS | rc=0 &gt;&gt;</div><div class="line"> 20:23:24 up 3 days,  7:32,  4 users,  load average: 14.97, 13.81, 12.55</div><div class="line">Shared connection to 192.168.67.39 closed.</div><div class="line">192.168.67.40 | SUCCESS | rc=0 &gt;&gt;</div><div class="line"> 20:23:24 up 3 days,  7:32,  1 user,  load average: 11.79, 14.15, 14.81</div><div class="line">Shared connection to 192.168.67.40 closed.</div><div class="line">192.168.67.41 | SUCCESS | rc=0 &gt;&gt;</div><div class="line"> 20:23:24 up 6 days, 22:36,  1 user,  load average: 19.89, 20.10, 19.79</div><div class="line">Shared connection to 192.168.67.41 closed.</div></pre></td></tr></table></figure></p><p>如果我们想要拷贝自己的测试代码到所有的服务器上，我们可以执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ansible yiran-cluster -m synchronize -a <span class="string">'src=zbs_rest dest=/usr/lib/python2.7/site-packages/'</span></div></pre></td></tr></table></figure></p><h3 id="重复性操作"><a href="#重复性操作" class="headerlink" title="重复性操作"></a>重复性操作</h3><p>如果我们经常要查看某些集群（无监控）情况下的性能，我们可以编写一个 playbook，这个 playbook 专门用来收集集群的状态：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"> $ cat cluster_status.yml</div><div class="line"><span class="comment">#!/usr/bin/env ansible-playbook</span></div><div class="line">---</div><div class="line">- name: cluster status</div><div class="line">  hosts: yiran-cluster</div><div class="line">  max_fail_percentage: 0</div><div class="line">  gather_facts: <span class="literal">false</span></div><div class="line">  tasks:</div><div class="line">     - name: uptime</div><div class="line">       raw: uptime</div><div class="line">       register: out</div><div class="line">     - debug: var=out.stdout_lines</div><div class="line"></div><div class="line">     - name: check services status</div><div class="line">       shell: /usr/share/tuna/script/control_all_services.sh --action=status --group=role</div><div class="line">       register: out</div><div class="line">       async: 300</div><div class="line">       poll: 2</div><div class="line">     - debug: var=out.stdout_lines</div><div class="line"></div><div class="line">     - name: memory status</div><div class="line">       raw: free -h</div><div class="line">       register: out</div><div class="line">     - debug: var=out.stdout_lines</div></pre></td></tr></table></figure></p><h2 id="Shell-Script-vs-Ansible"><a href="#Shell-Script-vs-Ansible" class="headerlink" title="Shell Script vs Ansible"></a>Shell Script vs Ansible</h2><p>通过上述的简单示例，可以体会到 Ansible 的强大，但是 Ansible 真的有那么好么？</p><p>明明几行  Shell 就可以搞定的事情，为什么一定要使用 Ansible 来做呢？<br>明明一个 Shell 脚本就可以完成的环境监察，为什么一定要使用 Ansible Playbook 来做呢？要知道 Playbook 编写语法虽然是 YAML，但是使用起来并不简单，有很多特殊的语法需要去注意，完全没有必要花费精力去学习一个新的工具去完成。</p><p>前两天看到 <a href="https://www.kawabangga.com/" target="_blank" rel="external">卡瓦邦噶</a> 介绍 Ansible的一篇博客中，提到了一篇 <a href="https://hvops.com/articles/ansible-vs-shell-scripts/" target="_blank" rel="external">Shell Script vs Ansible: Fight</a> 的文章（远古版真香），其中有一段总结，用来描述 Ansible 的优势，我加上了 Shell Script 的对比如下：   </p><table><thead><tr><th>Ansible</th><th>Shell Script</th><th>优胜者</th></tr></thead><tbody><tr><td>可以进行源码管理</td><td>Shell 也可以</td><td>-</td></tr><tr><td>幂等性</td><td>Shell 中需要额外做条件判断</td><td>Ansible</td></tr><tr><td>同时在多台服务器运行</td><td>Shell 可以通过 sshpass 编写脚本同时在多台运行</td><td>Ansible</td></tr><tr><td>验证服务器正确性</td><td>Shell 需要编写脚本收集更多信息</td><td>Ansible</td></tr><tr><td>定位部分服务器组</td><td>Shell 需要编写脚本对配置文件进行过滤筛选</td><td>Ansible</td></tr><tr><td>支持模板</td><td>-</td><td>Ansible</td></tr><tr><td>技术栈支持</td><td>-</td><td>Ansible</td></tr></tbody></table><p> 综合看上去，感觉 Ansible 太好了，上述情况下如果可以选择的话，我们都应该选择 Ansible 来做管理，事实上真的是这样么？ </p><p> 我也以为是这样，直到我通过 Ansible 重写 Shell 脚本。</p><h2 id="噩梦开始"><a href="#噩梦开始" class="headerlink" title="噩梦开始"></a>噩梦开始</h2><p> 由于产品功能需要处理多平台的、多场景的情况，该功能的 Shell 脚本大概有 4800 行左右。<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> --------------------------------------------------------------------------------</div><div class="line">Language                      files          blank        comment           code</div><div class="line">--------------------------------------------------------------------------------</div><div class="line">Bourne Shell                     57            990            154           4847</div><div class="line">Python                            2             48              0            201</div><div class="line">Bourne Again Shell                1              4              5             28</div></pre></td></tr></table></figure></p><p>我们找一个简单的脚本来看下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">master ✔ $ cat stage_mount_extent_disks.sh</div><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"></div><div class="line">cur=`dirname <span class="variable">$0</span>`</div><div class="line">. <span class="variable">$cur</span>/zbs_util.sh</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$#</span>"</span> -lt 1 ]]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> &lt;disk1&gt; &lt;disk2&gt;"</span></div><div class="line">    <span class="built_in">exit</span> 1</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line">disks=$*</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"waiting service start ....."</span></div><div class="line"><span class="keyword">for</span> ((i = 0; i &lt; 30; i++)); <span class="keyword">do</span></div><div class="line">    <span class="keyword">if</span> pidof service; <span class="keyword">then</span></div><div class="line">        <span class="built_in">break</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        sleep 2</div><div class="line">    <span class="keyword">fi</span></div><div class="line"><span class="keyword">done</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"service started"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># mount partition</span></div><div class="line"><span class="keyword">for</span> disk <span class="keyword">in</span> <span class="variable">$&#123;disks[@]&#125;</span>; <span class="keyword">do</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"mount <span class="variable">$disk</span>"</span></div><div class="line">    <span class="variable">$cur</span>/mount_extent_disk.sh <span class="string">"/dev/<span class="variable">$disk</span>"</span></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure></p><p>这是一个很简单的脚本，首先我们判断了下输入参数，需要输入两块磁盘盘符，接下来等待服务启动后，我们调用另一个脚本进行磁盘的挂载，如果我们想要执行这个脚本，那么我们可以执行执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./stage_mount_extent_disks.sh sda sdb</div></pre></td></tr></table></figure></p><p>然后等待脚本执行结束就可以了，这里的 sda 和 sdb 是存在一个 json 文件中，我们使用 <code>jq</code> 命令可以很容易的获取到 json 文件中的执行磁盘。</p><p>那么我们在 Ansible Playbook 我们要怎么做？ </p><ol><li>读取配置文件，并将读取结果设置为参数 <code>myvar</code></li><li>解析 <code>myvar</code> 获取 extent disks list，注意，这里的解析语法是 JMESPath 的语法</li><li>将 extent disk list 转换为 extent disk string ，这里是因为如果调用 raw 模块，需要传递字符串</li><li>如果平台是 xen7 的话，执行 xen7 的脚本</li><li>如果平台不是 xen7，且是 halo 的话，执行 halo 脚本</li></ol><p>具体 Playbook 如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">- name: mount extent disk</div><div class="line">  gather_facts: <span class="literal">false</span></div><div class="line">  hosts: master:storage</div><div class="line">  tasks:</div><div class="line">      - shell: cat /path/config.json</div><div class="line">        register: result</div><div class="line">      - set_fact:</div><div class="line">          myvar: <span class="string">"&#123;&#123; result.stdout | from_json &#125;&#125;"</span></div><div class="line"></div><div class="line">      - name: get all extent disk list</div><div class="line">        set_fact:</div><div class="line">          extent_disk_list: <span class="string">"&#123;&#123; myvar | json_query('disks[?function==`extent`][].drive') | list &#125;&#125;"</span></div><div class="line"></div><div class="line">      - name: get all extent disk string</div><div class="line">        set_fact:</div><div class="line">          extent_disk_string: <span class="string">"&#123;&#123; extent_disk_list | join(' ') &#125;&#125;"</span></div><div class="line"></div><div class="line">      - name: mount xen7 extent disk</div><div class="line">        raw: /usr/share/tuna/script/xen70/stage_mount_extent_disks.sh <span class="string">"&#123;&#123; extent_disk_string &#125;&#125;"</span></div><div class="line">        when: myvar.xen7 == True</div><div class="line">        register: out</div><div class="line">      - debug: var=out.stdout_lines</div><div class="line"></div><div class="line">      - name: mount halo extent disk</div><div class="line">        raw: /usr/share/tuna/script/halo/stage_mount_extent_disks.sh <span class="string">"&#123;&#123; extent_disk_string &#125;&#125;"</span></div><div class="line">        when: myvar.xen7 == False and myvar.halo == True</div><div class="line">        register: out</div><div class="line">      - debug: var=out.stdout_lines</div></pre></td></tr></table></figure></p><p>相信大家通过这个简单的示例发现一些问题，我总结了下：</p><ol><li>如果脚本中存在较多判断，不宜使用 Playbook 实现逻辑</li><li>如果脚本中存在部分参数解析功能，不宜使用 Playbook 实现逻辑</li><li>不要过度拆分 task，保证每个 task 完整性</li></ol><p>其实上面的 Playbook 我们完全可以写成这样：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- name: mount extent disk</div><div class="line">  gather_facts: <span class="literal">false</span></div><div class="line">  hosts: master:storage</div><div class="line">  tasks:</div><div class="line">      - name: mount  extent disk</div><div class="line">      <span class="comment"># 所有逻辑判断均在 stage_mount_extent_disks.sh 中完成</span></div><div class="line">        raw: /usr/share/tuna/script/stage_mount_extent_disks.sh <span class="string">"&#123;&#123; extent_disk_string &#125;&#125;"</span></div><div class="line">        register: out</div><div class="line">      - debug: var=out.stdout_lines</div></pre></td></tr></table></figure></p><p>Ansible 只作操作分发，减轻 Playbook 复杂性，虽然这会损失一部分幂等性，但是可以最简化的满足要求，同时执行，获取执行结果。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从个人使用上来说，Ansible 还是很好用的，至少它无需 Agent，SSH 连接等特性，使用起来很友好。<br>但是我们也不应该过分使用 Playbook，编写 Playbook 解析 json 花费了不少的时间，远不如直接在被执行脚本中完成的成本低。</p><p>Ansible 还有一些未能合理解决的问题，比如如何知道一个 Playbook 执行的总体进度？<br>如何获取执行的实时结果输出等。</p><p>如果我们只是普通的操作一些节点执行命令，获取信息，那么完全可以通过 sshpass，mmh 等命令完成，相对来说更方便。</p><p>希望随着自己的使用，能够更好的掌握使用 Ansible 的度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;说起来我真正负责过大批量服务器线上管理的时间，还是在16年负责运维的时候，那时候还都是通过 Shell 脚本来完成一些自动化的工作，当时觉得
      
    
    </summary>
    
    
      <category term="Ansible" scheme="http://zdyxry.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer（二）</title>
    <link href="http://zdyxry.com/2018/11/20/%E5%89%91%E6%8C%87-Offer%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://zdyxry.com/2018/11/20/剑指-Offer（二）/</id>
    <published>2018-11-20T13:08:14.000Z</published>
    <updated>2018-11-20T13:10:21.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a>数值的整数次方</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</span></div><div class="line"><span class="comment"># 考虑边界情况，base = 0, exponent &lt; 0, exponent = 0 场景。</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">equal_zero</span><span class="params">(num)</span>:</span></div><div class="line">    <span class="keyword">if</span> abs(num - <span class="number">0.0</span>) &lt; <span class="number">0.0000001</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">power</span><span class="params">(base, exponent)</span>:</span></div><div class="line">    <span class="keyword">if</span> equal_zero(base):</div><div class="line">        result = <span class="keyword">False</span></div><div class="line">    <span class="keyword">if</span> exponent == <span class="number">0</span>:</div><div class="line">        result = <span class="number">1</span></div><div class="line">    result = power(base, abs(exponent) &gt;&gt; <span class="number">1</span>)</div><div class="line">    result *= result</div><div class="line">    <span class="keyword">if</span> abs(exponent) &amp; <span class="number">1</span> == <span class="number">1</span>:</div><div class="line">        result *= base</div><div class="line">    <span class="keyword">if</span> exponent &lt; <span class="number">0</span>:</div><div class="line">        result = <span class="number">1.0</span> / result</div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line">power_value(<span class="number">2</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数值的整数次方&quot;&gt;&lt;a href=&quot;#数值的整数次方&quot; class=&quot;headerlink&quot; title=&quot;数值的整数次方&quot;&gt;&lt;/a&gt;数值的整数次方&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="alogrithms" scheme="http://zdyxry.com/tags/alogrithms/"/>
    
  </entry>
  
  <entry>
    <title>Traceroute 简易实现</title>
    <link href="http://zdyxry.com/2018/11/18/Traceroute-%E7%AE%80%E6%98%93%E5%AE%9E%E7%8E%B0/"/>
    <id>http://zdyxry.com/2018/11/18/Traceroute-简易实现/</id>
    <published>2018-11-18T04:33:35.000Z</published>
    <updated>2018-11-20T12:44:24.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在平时遇到网络问题时，我们通常会使用 <code>ping</code>,<code>route</code>,<code>ip</code> 等命令去 debug，当我们确定我们本机的网络配置及服务没有问题后，我通常会使用 <code>traceroute</code> 来判断网络走向。</p><p>最近公司搬家之后，整体网络架构进行了改进，随着配置的复杂化，稳定性相较于原来有了很大的下降，导致最近频繁使用 <code>traceroute</code>，一直使用它却不知道是怎么工作的，研究了一下，作为总结。</p><h2 id="Traceroute"><a href="#Traceroute" class="headerlink" title="Traceroute"></a>Traceroute</h2><p>先上维基百科的解释：</p><blockquote><p>traceroute，现代Linux系统称为tracepath，Windows系统称为tracert，是一种计算机网络工具。它可显示数据包在IP网络经过的路由器的IP地址。</p></blockquote><p>我们通常使用无需特殊配置，直接用 traceroute 加上我们的目标地址即可，如：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@yiran-workstation:~ </div><div class="line"> $ traceroute 192.168.16.1</div><div class="line">traceroute to 192.168.16.1 (192.168.16.1), 30 hops max, 60 byte packets</div><div class="line"> 1  gateway (192.168.8.1)  19.469 ms  19.089 ms  18.911 ms</div><div class="line"> 2  192.168.1.201 (192.168.1.201)  11.539 ms  11.423 ms  11.307 ms</div><div class="line"> 3  192.168.16.1 (192.168.16.1)  18.289 ms  18.184 ms  18.064 ms</div></pre></td></tr></table></figure><p>当我们想设置 TTL 数值时，我们可以使用 <code>-m</code> 参数:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@yiran-workstation:~ </div><div class="line"> $ traceroute 192.168.16.1 -m 2</div><div class="line">traceroute to 192.168.16.1 (192.168.16.1), 2 hops max, 60 byte packets</div><div class="line"> 1  gateway (192.168.8.1)  20.914 ms  20.700 ms  20.616 ms</div><div class="line"> 2  192.168.1.201 (192.168.1.201)  20.497 ms  20.465 ms  20.383 ms</div></pre></td></tr></table></figure></p><p>实现原理：</p><blockquote><p>主叫方首先发出 TTL=1 的数据包，第一个路由器将 TTL 减1得0后就不再继续转发此数据包，而是返回一个 ICMP 逾时报文，主叫方从逾时报文中即可提取出数据包所经过的第一个网关地址。然后又发出一个 TTL=2 的 ICMP 数据包，可获得第二个网关地址，依次递增 TTL 便获取了沿途所有网关地址。</p><p>需要注意的是，并不是所有网关都会如实返回 ICMP 超时报文。出于安全性考虑，大多数防火墙以及启用了防火墙功能的路由器缺省配置为不返回各种 ICMP 报文，其余路由器或交换机也可被管理员主动修改配置变为不返回 ICMP 报文。因此 Traceroute 程序不一定能拿全所有的沿途网关地址。所以，当某个 TTL 值的数据包得不到响应时，并不能停止这一追踪过程，程序仍然会把 TTL 递增而发出下一个数据包。一直达到默认或用参数指定的追踪限制（maximum_hops）才结束追踪。</p></blockquote><p>这里要说明一下，加入我们去 traceroute 最常用的 baidu.com，就会看到这个现象，traceroute 命令的结果中包含 <code>* * *</code> ，我也没有找到一个较为明确的解释，猜测这个节点禁止了 ping 或其他配置，无法返回 ICMP 超时报文，导致 traceroute 无法正常解析。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">master ✗ $ traceroute  baidu.com -m 20 </div><div class="line">traceroute to baidu.com (220.181.57.216), 20 hops max, 60 byte packets</div><div class="line"> 1  gateway (192.168.8.1)  18.535 ms  18.456 ms  29.185 ms</div><div class="line"> 2  10.1.1.1 (10.1.1.1)  6.599 ms  6.533 ms  6.378 ms</div><div class="line"> 3  106.38.14.1 (106.38.14.1)  28.707 ms  28.606 ms  28.514 ms</div><div class="line"> 4  5.0.142.219.broad.bj.bj.dynamic.163data.com.cn (219.142.0.5)  28.384 ms  28.305 ms  28.205 ms</div><div class="line"> 5  * * *</div><div class="line"> 6  36.110.244.46 (36.110.244.46)  37.131 ms  31.660 ms  31.489 ms</div><div class="line"> 7  * * *</div><div class="line"> 8  220.181.17.94 (220.181.17.94)  10.700 ms 220.181.17.146 (220.181.17.146)  10.511 ms 220.181.17.150 (220.181.17.150)  10.336 ms</div><div class="line"> 9  * * *</div><div class="line">10  * * *</div><div class="line">11  * * *</div><div class="line">12  * * *</div><div class="line">13  * * *</div><div class="line">14  * * *</div><div class="line">15  * * *</div><div class="line">16  * * *</div><div class="line">17  * * *</div><div class="line">18  * * *</div><div class="line">19  * * *</div><div class="line">20  * * *</div></pre></td></tr></table></figure><blockquote><p>依据上述原理，利用了 UDP 数据包的 Traceroute 程序在数据包到达真正的目的主机时，就可能因为该主机没有提供 UDP 服务而简单将数据包抛弃，并不返回任何信息。为了解决这个问题，Traceroute 故意使用了一个大于 30000 的端口号，因 UDP 协议规定端口号必须小于 30000 ，所以目标主机收到数据包后唯一能做的事就是返回一个“端口不可达”的 ICMP 报文，于是主叫方就将端口不可达报文当作跟踪结束的标志。</p></blockquote><h2 id="简易实现"><a href="#简易实现" class="headerlink" title="简易实现"></a>简易实现</h2><p>源地址： <a href="https://github.com/dnaeon/pytraceroute" target="_blank" rel="external">https://github.com/dnaeon/pytraceroute</a><br>对整个实现中最重要的部分做下注释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Copyright (c) 2015 Marin Atanasov Nikolov &lt;dnaeon@gmail.com&gt;</span></div><div class="line"><span class="comment"># All rights reserved.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Redistribution and use in source and binary forms, with or without</span></div><div class="line"><span class="comment"># modification, are permitted provided that the following conditions</span></div><div class="line"><span class="comment"># are met:</span></div><div class="line"><span class="comment"># 1. Redistributions of source code must retain the above copyright</span></div><div class="line"><span class="comment">#    notice, this list of conditions and the following disclaimer</span></div><div class="line"><span class="comment">#    in this position and unchanged.</span></div><div class="line"><span class="comment"># 2. Redistributions in binary form must reproduce the above copyright</span></div><div class="line"><span class="comment">#    notice, this list of conditions and the following disclaimer in the</span></div><div class="line"><span class="comment">#    documentation and/or other materials provided with the distribution.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># THIS SOFTWARE IS PROVIDED BY THE AUTHOR(S) ``AS IS'' AND ANY EXPRESS OR</span></div><div class="line"><span class="comment"># IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES</span></div><div class="line"><span class="comment"># OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.</span></div><div class="line"><span class="comment"># IN NO EVENT SHALL THE AUTHOR(S) BE LIABLE FOR ANY DIRECT, INDIRECT,</span></div><div class="line"><span class="comment"># INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT</span></div><div class="line"><span class="comment"># NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div><div class="line"><span class="comment"># DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div><div class="line"><span class="comment"># THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div><div class="line"><span class="comment"># (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF</span></div><div class="line"><span class="comment"># THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div><div class="line"></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">Core module</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> struct</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line">__all__ = [<span class="string">'Tracer'</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tracer</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dst, hops=<span class="number">30</span>)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        Initializes a new tracer object</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        Args:</span></div><div class="line"><span class="string">            dst  (str): Destination host to probe</span></div><div class="line"><span class="string">            hops (int): Max number of hops to probe</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        """</span></div><div class="line">        self.dst = dst <span class="comment"># 目标地址：域名或 IPv4 地址</span></div><div class="line">        self.hops = hops </div><div class="line">        self.ttl = <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="comment"># Pick up a random port in the range 33434-33534</span></div><div class="line">        <span class="comment"># 对应上述解释，随机选择一个 &gt; 30000 的端口用于连接</span></div><div class="line">        self.port = random.choice(range(<span class="number">33434</span>, <span class="number">33535</span>))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        Run the tracer</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        Raises:</span></div><div class="line"><span class="string">            IOError</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            dst_ip = socket.gethostbyname(self.dst) <span class="comment"># 解析域名</span></div><div class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</div><div class="line">            <span class="keyword">raise</span> IOError(<span class="string">'Unable to resolve &#123;&#125;: &#123;&#125;'</span>, self.dst, e)</div><div class="line"></div><div class="line">        text = <span class="string">'traceroute to &#123;&#125; (&#123;&#125;), &#123;&#125; hops max'</span>.format(</div><div class="line">            self.dst,</div><div class="line">            dst_ip,</div><div class="line">            self.hops</div><div class="line">        )</div><div class="line"></div><div class="line">        print(text)</div><div class="line"></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            startTimer = time.time()</div><div class="line">            receiver = self.create_receiver() <span class="comment"># 创建接收 socket 实例</span></div><div class="line">            sender = self.create_sender() <span class="comment"># 创建发送 socket 实例</span></div><div class="line">            sender.sendto(<span class="string">b''</span>, (self.dst, self.port)) <span class="comment"># 向目标地址指定端口发送报文</span></div><div class="line"></div><div class="line">            addr = <span class="keyword">None</span></div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                data, addr = receiver.recvfrom(<span class="number">1024</span>) <span class="comment"># 获取发送 ICMP 超时报文，并解析地址</span></div><div class="line">                entTimer = time.time()</div><div class="line">            <span class="keyword">except</span> socket.error:</div><div class="line">                <span class="keyword">pass</span></div><div class="line">                <span class="comment"># raise IOError('Socket error: &#123;&#125;'.format(e))</span></div><div class="line">            <span class="keyword">finally</span>:</div><div class="line">                receiver.close()</div><div class="line">                sender.close()</div><div class="line"></div><div class="line">            <span class="keyword">if</span> addr: <span class="comment"># 如果获取到地址，则打印相应信息及用时</span></div><div class="line">                timeCost = round((entTimer - startTimer) * <span class="number">1000</span>, <span class="number">2</span>)</div><div class="line">                print(<span class="string">'&#123;:&lt;4&#125; &#123;&#125; &#123;&#125; ms'</span>.format(self.ttl, addr[<span class="number">0</span>]), timeCost)</div><div class="line">                <span class="keyword">if</span> addr[<span class="number">0</span>] == dst_ip:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(<span class="string">'&#123;:&lt;4&#125; *'</span>.format(self.ttl))</div><div class="line"></div><div class="line">            self.ttl += <span class="number">1</span> <span class="comment"># 增加 TTL，获取下一跳地址</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> self.ttl &gt; self.hops:</div><div class="line">                <span class="keyword">break</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_receiver</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        Creates a receiver socket</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        Returns:</span></div><div class="line"><span class="string">            A socket instance</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        Raises:</span></div><div class="line"><span class="string">            IOError</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        """</span></div><div class="line">        s = socket.socket(</div><div class="line">            family=socket.AF_INET, <span class="comment"># 指定 proto family 为 IPv4</span></div><div class="line">            type=socket.SOCK_RAW, <span class="comment"># 指定接收 socket 类型为 raw，这里是因为普通的 socket 类型无法处理 ICMP 报文</span></div><div class="line">            proto=socket.IPPROTO_ICMP <span class="comment"># 指定 socket 协议为 ICMP 协议，type 与 proto 需要特定的组合，不允许任意配置</span></div><div class="line">        )</div><div class="line"></div><div class="line">        timeout = struct.pack(<span class="string">"ll"</span>, <span class="number">5</span>, <span class="number">0</span>)</div><div class="line">        s.setsockopt(socket.SOL_SOCKET, socket.SO_RCVTIMEO, timeout)</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            s.bind((<span class="string">''</span>, self.port))</div><div class="line">        <span class="keyword">except</span> socket.error <span class="keyword">as</span> e:</div><div class="line">            <span class="keyword">raise</span> IOError(<span class="string">'Unable to bind receiver socket: &#123;&#125;'</span>.format(e))</div><div class="line"></div><div class="line">        <span class="keyword">return</span> s</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_sender</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        Creates a sender socket</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        Returns:</span></div><div class="line"><span class="string">            A socket instance</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">        """</span></div><div class="line">        s = socket.socket(</div><div class="line">            family=socket.AF_INET, <span class="comment"># 指定 proto family 为 IPv4</span></div><div class="line">            type=socket.SOCK_DGRAM, <span class="comment"># 指定发送的类型为 UDP，即发送广播消息</span></div><div class="line">            proto=socket.IPPROTO_UDP <span class="comment"># 指定协议为 IP UDP </span></div><div class="line">        )</div><div class="line"></div><div class="line">        s.setsockopt(socket.SOL_IP, socket.IP_TTL, self.ttl)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> s</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>了解了实现原理之后，希望之后排查网络问题应该也会得心应手一些吧。<br>也希望自己能更多的关注于 Why，而不是 How。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://dnaeon.github.io/traceroute-in-python/" target="_blank" rel="external">http://dnaeon.github.io/traceroute-in-python/</a></li><li><a href="https://www.nljb.net/default/SOCK_STREAM%E4%B8%8ESOCK_DGRAM%E7%9A%84%E5%8C%BA%E5%88%AB/" target="_blank" rel="external">https://www.nljb.net/default/SOCK_STREAM%E4%B8%8ESOCK_DGRAM%E7%9A%84%E5%8C%BA%E5%88%AB/</a></li><li><a href="https://stackoverflow.com/questions/1955198/when-is-ipproto-udp-required" target="_blank" rel="external">https://stackoverflow.com/questions/1955198/when-is-ipproto-udp-required</a></li><li><a href="https://blog.csdn.net/newnewman80/article/details/8000404" target="_blank" rel="external">https://blog.csdn.net/newnewman80/article/details/8000404</a></li><li><a href="http://www.zmonster.me/notes/tcp-ip-socket-in-c.html" target="_blank" rel="external">http://www.zmonster.me/notes/tcp-ip-socket-in-c.html</a></li><li><a href="http://courses.cs.vt.edu/cs4254/fall04/slides/raw_6.pdf" target="_blank" rel="external">http://courses.cs.vt.edu/cs4254/fall04/slides/raw_6.pdf</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在平时遇到网络问题时，我们通常会使用 &lt;code&gt;ping&lt;/code&gt;,&lt;code&gt;route&lt;/code&gt;,&lt;code&gt;ip&lt;/code
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://zdyxry.com/tags/Linux/"/>
    
      <category term="Network" scheme="http://zdyxry.com/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>剑指 Offer（一）</title>
    <link href="http://zdyxry.com/2018/11/18/%E5%89%91%E6%8C%87-Offer%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://zdyxry.com/2018/11/18/剑指-Offer（一）/</id>
    <published>2018-11-18T04:23:07.000Z</published>
    <updated>2018-11-20T12:44:24.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python-单实例模式"><a href="#Python-单实例模式" class="headerlink" title="Python 单实例模式"></a>Python 单实例模式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></div><div class="line">    _instances = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> cls._instances:</div><div class="line">            cls._instances[cls] = super(Singleton, cls).__new__(cls, *args, **kwargs)</div><div class="line">        <span class="keyword">return</span> cls._instances[cls]</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySingleton</span><span class="params">(Singleton)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val)</span>:</span></div><div class="line">        self.val = val</div><div class="line"></div><div class="line">a = MySingleton(<span class="number">1</span>)</div><div class="line">b = MySingleton(<span class="number">1</span>)</div><div class="line"><span class="keyword">print</span> a.val</div><div class="line"><span class="keyword">print</span> b.val</div></pre></td></tr></table></figure><h2 id="二维数组查找"><a href="#二维数组查找" class="headerlink" title="二维数组查找"></a>二维数组查找</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_num</span><span class="params">(matrix, num)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> matrix:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    rows = len(matrix)</div><div class="line">    cols = len(matrix[<span class="number">0</span>])</div><div class="line">    row, col = rows - <span class="number">1</span>, <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> row &gt;= <span class="number">0</span> <span class="keyword">or</span> col &lt;= cols <span class="number">-1</span>:</div><div class="line">        <span class="keyword">if</span> matrix[row][col] == num:</div><div class="line">            <span class="keyword">return</span> num</div><div class="line">        <span class="keyword">elif</span> matrix[row][col] &gt; num:</div><div class="line">            row -= <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            col += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">matrix = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</div><div class="line">          [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</div><div class="line">         ]</div><div class="line"><span class="keyword">print</span> find_num(matrix, <span class="number">7</span>)</div></pre></td></tr></table></figure><h2 id="打印链表"><a href="#打印链表" class="headerlink" title="打印链表"></a>打印链表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Links</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_links</span><span class="params">(links)</span>:</span></div><div class="line">    <span class="keyword">if</span> links:</div><div class="line">        print_links(links.next)</div><div class="line">        <span class="keyword">print</span> links.val</div><div class="line"></div><div class="line">links = Links(<span class="number">1</span>)</div><div class="line">links.next = Links(<span class="number">2</span>)</div><div class="line">links.next.next = Links(<span class="number">3</span>)</div><div class="line">print_links(links)</div></pre></td></tr></table></figure><h2 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 根据前序和中序遍历结果构建二叉树，遍历结果中不包含重复数值。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.left = <span class="keyword">None</span></div><div class="line">        self.right = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.root = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pre_traversal</span><span class="params">(self)</span>:</span></div><div class="line">        ret = []</div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">traversal</span><span class="params">(head)</span>:</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</div><div class="line">                <span class="keyword">return</span></div><div class="line">            ret.append(head.val)</div><div class="line">            traversal(head.left)</div><div class="line">            traversal(head.right)</div><div class="line">        </div><div class="line">        traversal(self.root)</div><div class="line">        <span class="keyword">return</span> ret</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">in_traversal</span><span class="params">(self)</span>:</span></div><div class="line">        ret = []</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">traversal</span><span class="params">(head)</span>:</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</div><div class="line">                <span class="keyword">return</span> </div><div class="line">            traversal(head.left)</div><div class="line">            ret.append(head.val)</div><div class="line">            traversal(head.right)</div><div class="line">        </div><div class="line">        traversal(self.root)</div><div class="line">        <span class="keyword">return</span> ret</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post_traversal</span><span class="params">(self)</span>:</span></div><div class="line">        ret = []</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">traversal</span><span class="params">(head)</span>:</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> head:</div><div class="line">                <span class="keyword">return</span> </div><div class="line">            traversal(head.left)</div><div class="line">            traversal(head.right)</div><div class="line">            ret.append(head.val)</div><div class="line"></div><div class="line">        traversal(self.root)</div><div class="line">        <span class="keyword">return</span> ret</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">construct_tree</span><span class="params">(preorder=None, inorder=None)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> preorder <span class="keyword">or</span> <span class="keyword">not</span> inorder:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">    index = inorder.index(preorder[<span class="number">0</span>])</div><div class="line">    left = inorder[<span class="number">0</span>:index]</div><div class="line">    right = inorder[index + <span class="number">1</span>:]</div><div class="line">    root = TreeNode(preorder[<span class="number">0</span>])</div><div class="line">    root.left = construct_tree(preorder[<span class="number">1</span>:<span class="number">1</span>+len(left)], left)</div><div class="line">    root.right = construct_tree(preorder[-len(right):], right)</div><div class="line">    <span class="keyword">return</span> root</div><div class="line"></div><div class="line">t = Tree()</div><div class="line">root = construct_tree(preorder=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>],</div><div class="line">                      inorder=[<span class="number">4</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">6</span>])</div><div class="line">t.root = root</div><div class="line"><span class="keyword">print</span> t.pre_traversal()</div><div class="line"><span class="keyword">print</span> t.in_traversal()</div><div class="line"><span class="keyword">print</span> t.post_traversal()</div></pre></td></tr></table></figure><h2 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_min</span><span class="params">(nums)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    length = len(nums)</div><div class="line">    left, right = <span class="number">0</span>, length - <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> nums[right] &gt;= nums[left]:</div><div class="line">        <span class="keyword">if</span> right - left == <span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> nums[right]</div><div class="line">        mid = (left + right) / <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> nums[left] &lt;= nums[mid]:</div><div class="line">            left = mid</div><div class="line">        <span class="keyword">if</span> nums[right] &gt;= nums[mid]:</div><div class="line">            right = mid</div><div class="line">    <span class="keyword">return</span> nums[<span class="number">0</span>]</div><div class="line"></div><div class="line">nums = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</div><div class="line"><span class="keyword">print</span> find_min(nums)</div><div class="line">nums = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</div><div class="line"><span class="keyword">print</span> find_min(nums)</div></pre></td></tr></table></figure><h2 id="二进制中-1-的个数"><a href="#二进制中-1-的个数" class="headerlink" title="二进制中 1 的个数"></a>二进制中 1 的个数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_num_of_1</span><span class="params">(n)</span>:</span></div><div class="line">    ret = <span class="number">0</span></div><div class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</div><div class="line">        n = n &amp; <span class="number">0xffffffff</span></div><div class="line">    <span class="keyword">while</span> n:</div><div class="line">        ret += <span class="number">1</span></div><div class="line">        n = n &amp; (n - <span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> ret</div><div class="line"></div><div class="line">num = <span class="number">3</span></div><div class="line"><span class="keyword">print</span> find_num_of_1(num)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python-单实例模式&quot;&gt;&lt;a href=&quot;#Python-单实例模式&quot; class=&quot;headerlink&quot; title=&quot;Python 单实例模式&quot;&gt;&lt;/a&gt;Python 单实例模式&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;
      
    
    </summary>
    
    
      <category term="alogrithms" scheme="http://zdyxry.com/tags/alogrithms/"/>
    
  </entry>
  
  <entry>
    <title>超微服务器 IPMI 连接配置介绍</title>
    <link href="http://zdyxry.com/2018/11/10/%E8%B6%85%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%99%A8-IPMI-%E8%BF%9E%E6%8E%A5%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/"/>
    <id>http://zdyxry.com/2018/11/10/超微服务器-IPMI-连接配置介绍/</id>
    <published>2018-11-10T11:41:42.000Z</published>
    <updated>2018-11-10T12:13:24.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>目前在国内，大部分公司使用的服务器均为国内厂商的，如：华为、浪潮、联想、华三（H3C）、曙光等等。无论是从售后服务角度，还是国企央企招标采购角度，都是比较理想的。<br>但是还是有些国外的服务器如：惠普、超微、戴尔等等，占有着很大的市场。现在所在的公司提供一体机给客户，OEM 厂商就是超微和戴尔，今天来说说超微服务器 IPMI 连接配置。</p><h2 id="IPMI"><a href="#IPMI" class="headerlink" title="IPMI"></a>IPMI</h2><p>常规操作，先贴上维基百科的解释：</p><blockquote><p>智能平台管理接口（Intelligent Platform Management Interface）原本是一种Intel架构的企业系统的周边设备所采用的一种工业标准。IPMI亦是一个开放的免费标准，用户无需支付额外的费用即可使用此标准。</p></blockquote><p>就日常使用来说，IPMI 就是规模较大公司中常说的 <code>带外网络</code> 可连接控制的接口。一般用于物理服务器的管理，如：开关机、Web Console、硬件信息获取、硬件故障报警等功能。</p><p>大多数服务器厂商对该接口叫法不同，比如超微叫 <code>IPMI</code>，戴尔叫 <code>RACADM</code> ，惠普叫 <code>iLo</code> 等等。大部分厂商都会对该接口进行各种定制化功能，使用户上手更容易。而超微不同，超微的 IPMI 管理界面相当简（丑）陋，除了必备的功能外，没有特色功能。</p><h2 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h2><p>IPMI 接口就是一个普通的 1GbE 网口，常规连接到交换机上配置 IP 就可以正常管理与使用了，下面主要来说下三种不同的配置方式优势及区别。</p><h3 id="Dedicated"><a href="#Dedicated" class="headerlink" title="Dedicated"></a>Dedicated</h3><p>专用模式，没有其他的乱七八糟配置，最简单的配置 IP 连接网线就可以直接使用。使用的网口就是 IPMI 的网口。</p><ul><li><p>优势<br>最简配置，无须负责的网络策略。</p></li><li><p>劣势<br>需要单独的一根网线连接。在现阶段高密度服务器越来越流行的今天，一台普通的 2U4节点服务器，后面连接的网线可能达到：（1 IPMI + 2 管理 + 2 存储）*4 = 20根。这个数量是极为恐怖的，相信亲手布线过的同学一定深有体会。</p></li></ul><h3 id="Shared"><a href="#Shared" class="headerlink" title="Shared"></a>Shared</h3><p>共享模式。允许 IPMI 通过板载网口进行连接。这里要明确下，在有网络要求的公司，应该是不允许配置该模式的，因为客户要求网络要做到带内、带外的完全隔离，不能允许通过带内网络访问带外网络功能。但是小公司或者说一些测试环境，是可以选择该模式的。</p><ul><li>优势<br>可以直接通过板载网口所在网络进行连接，无须为 IPMI 网口连接网线。</li><li>劣势<br>如果客户对网络有严格要求，那么是不允许配置的。<br>看论坛上有部分用户在进行该配置，且同时配置了 VLAN，出现了部分问题，未解决。</li></ul><h3 id="Failover（Default）"><a href="#Failover（Default）" class="headerlink" title="Failover（Default）"></a>Failover（Default）</h3><p>故障转移模式，也是服务器默认模式。该模式优先检查 IPMI 网口是否可以连通，如果可以连通，则直接连接，如果不可以连接，则尝试通过板载网口所在网络进行连接。</p><ul><li>优势<br>自动根据当前网络环境进行选择，无需认为干预。</li><li>劣势<br>在操作机器过程中，如果 IPMI 网口未连接网络，且 OS 关机状态，那么 IPMI 有可能失去连接。该问题在进行 IPMI Cold Reset 时尤为严重，随着 OS 的关闭，IPMI 也失去响应，这种场景下 IPMI 就丢失了它本身的作用。深坑。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;目前在国内，大部分公司使用的服务器均为国内厂商的，如：华为、浪潮、联想、华三（H3C）、曙光等等。无论是从售后服务角度，还是国企央企招标采购
      
    
    </summary>
    
    
      <category term="Server" scheme="http://zdyxry.com/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>10月杂记</title>
    <link href="http://zdyxry.com/2018/11/09/10%E6%9C%88%E6%9D%82%E8%AE%B0/"/>
    <id>http://zdyxry.com/2018/11/09/10月杂记/</id>
    <published>2018-11-09T13:51:00.000Z</published>
    <updated>2018-11-13T13:16:00.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="10-月杂记"><a href="#10-月杂记" class="headerlink" title="10 月杂记"></a>10 月杂记</h1><p>上一次写博客还是在 9 月末，感觉 10月份是每年最忙的时候，今年尤其忙。</p><h2 id="公司搬家"><a href="#公司搬家" class="headerlink" title="公司搬家"></a>公司搬家</h2><p>从 15年底加入公司以来，一直在北四环边上的融科资讯中心写字楼办公。最近融科坐不下了，加上合同到期，为了追求更大（价格更低）的办公环境，只能离开。</p><p>之前陆陆续续听说融科在写字楼中属于档次稍高的，一直没什么感觉，最近公司搬离了融科，才知道租金 17元/天/平米比 9元/天/平米真是不知道好到哪里去了。</p><p>公司约定好周五晚上收拾东西，周六搬家公司全部搬走，本来没个人什么事情。诡异的责任心作祟，导致周末两天都在公司帮忙，瞎忙。</p><p>新办公室的装修如果单独拍照片看上去还不错，但是太糙了，赶工期的各种痕迹暴露无遗。办公室各种味道，感觉都在呼吸着甲醛。</p><p>但是老板照常工作了，员工也只能戴着口罩继续工作，也是切身体会了空气净化器对于装修污染来说，作用真是小的可怜，只有通风才是王道。</p><h2 id="个人搬家"><a href="#个人搬家" class="headerlink" title="个人搬家"></a>个人搬家</h2><p>算起来我来北京3年的时间，已经换了 5 个住处了，这种感觉很不好。想起了某同事 买了房子的感慨：“我每年都要被房东赶“，心酸。</p><p>去年为了私人空间，脱离了一起生活 2年的室友，独自跑到回龙观住自如。当时图着房子新，空间大，也就没有考虑最重要的一点：距离。</p><p>一直觉得一个人生活，住的远一点没什么所谓。但是真遇到在公司加班到9，10点钟，晚上又叫不到车时，只能去坐75分钟的地铁回家，太痛苦了，已经远远超过了心酸。</p><p>这次趁着公司搬家，我也花了 2 周的时间找房子，也约了不少中介看房子。最终选择了距离公司 2 公里的小区，走路 30min，骑车 10min。</p><p>第一次体验了步行上下班，哪怕在公司加班再晚，也可以 10min 就回到家里休息，不会对我产生负面的心情，真好。</p><h2 id="工作进展"><a href="#工作进展" class="headerlink" title="工作进展"></a>工作进展</h2><p>因为公司和个人的搬家，导致整个 10月都很疲惫，无论是身体上的，还是心理上的。</p><p>工作上分配给我的功能，在 11月9号，就是今天，老板说要可 demo 的状态，但还没完成，只能周末加班抢救一下，不知道是否能把进度抢救回来。</p><p>现在做的功能其实跟 Cobbler 很像，很多功能都是一样的。配合上虚拟化感觉就像 OpenStack Ironic（一直想看却没抽出时间）。都是对物理机进行功能管理，没什么新意。</p><h2 id="个人进展"><a href="#个人进展" class="headerlink" title="个人进展"></a>个人进展</h2><p>无。（忧伤）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;10-月杂记&quot;&gt;&lt;a href=&quot;#10-月杂记&quot; class=&quot;headerlink&quot; title=&quot;10 月杂记&quot;&gt;&lt;/a&gt;10 月杂记&lt;/h1&gt;&lt;p&gt;上一次写博客还是在 9 月末，感觉 10月份是每年最忙的时候，今年尤其忙。&lt;/p&gt;
&lt;h2 id=&quot;公司搬家
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python socket 编程</title>
    <link href="http://zdyxry.com/2018/09/30/Python-socket-%E7%BC%96%E7%A8%8B/"/>
    <id>http://zdyxry.com/2018/09/30/Python-socket-编程/</id>
    <published>2018-09-30T12:33:00.000Z</published>
    <updated>2018-09-30T12:33:46.456Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>平时工作很少涉及到 Socket 相关，基本上都是 HTTP 之上的业务，最近看到 <a href="https://realpython.com/python-sockets/" target="_blank" rel="external">Real Python</a> 的一篇博客，非常详细的讲解了 Python 下的 socket 编程，其中有两个示例觉得很好，帮助我理解了一些要点，记录一下。</p><h2 id="多连接情况"><a href="#多连接情况" class="headerlink" title="多连接情况"></a>多连接情况</h2><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><p>multiconn-server.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> selectors</div><div class="line"><span class="keyword">import</span> types</div><div class="line"></div><div class="line">sel = selectors.DefaultSelector()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">accept_wrapper</span><span class="params">(sock)</span>:</span></div><div class="line">    conn, addr = sock.accept()  <span class="comment"># 前提条件：可读状态</span></div><div class="line">    print(<span class="string">'accepted connection from'</span>, addr)</div><div class="line">    conn.setblocking(<span class="keyword">False</span>)     <span class="comment"># 置为非阻塞</span></div><div class="line">    data = types.SimpleNamespace(addr=addr, inb=<span class="string">b''</span>, outb=<span class="string">b''</span>)</div><div class="line">    events = selectors.EVENT_READ | selectors.EVENT_WRITE</div><div class="line">    sel.register(conn, events, data=data)  <span class="comment"># 注册事件到 select</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">service_connection</span><span class="params">(key, mask)</span>:</span></div><div class="line">    sock = key.fileobj</div><div class="line">    data = key.data</div><div class="line">    <span class="keyword">if</span> mask &amp; selectors.EVENT_READ:</div><div class="line">        recv_data = sock.recv(<span class="number">1024</span>)  <span class="comment">#  前提条件：可读状态</span></div><div class="line">        <span class="keyword">if</span> recv_data:</div><div class="line">            data.outb += recv_data    <span class="comment"># 保存数据</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            print(<span class="string">'closing connection to'</span>, data.addr) <span class="comment"># 如果没有接受到数据，则需关闭该 socket 连接</span></div><div class="line">            sel.unregister(sock) <span class="comment"># 将该 socket 事件从 select 删除</span></div><div class="line">            sock.close()</div><div class="line">    <span class="keyword">if</span> mask &amp; selectors.EVENT_WRITE:</div><div class="line">        <span class="keyword">if</span> data.outb:</div><div class="line">            print(<span class="string">'echoing'</span>, repr(data.outb), <span class="string">'to'</span>, data.addr)</div><div class="line">            sent = sock.send(data.outb)  <span class="comment">#前提条件：可写状态</span></div><div class="line">            data.outb = data.outb[sent:] <span class="comment"># 在数据发送完后， 将其删除</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">3</span>:</div><div class="line">    print(<span class="string">'usage:'</span>, sys.argv[<span class="number">0</span>], <span class="string">'&lt;host&gt; &lt;port&gt;'</span>)</div><div class="line">    sys.exit(<span class="number">1</span>)</div><div class="line"></div><div class="line">host, port = sys.argv[<span class="number">1</span>], int(sys.argv[<span class="number">2</span>])</div><div class="line">lsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">lsock.bind((host, port))</div><div class="line">lsock.listen()</div><div class="line">print(<span class="string">'listening on'</span>, (host, port))</div><div class="line">lsock.setblocking(<span class="keyword">False</span>)</div><div class="line">sel.register(lsock, selectors.EVENT_READ, data=<span class="keyword">None</span>)</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        events = sel.select(timeout=<span class="keyword">None</span>)</div><div class="line">        <span class="keyword">for</span> key, mask <span class="keyword">in</span> events:    </div><div class="line">            <span class="keyword">if</span> key.data <span class="keyword">is</span> <span class="keyword">None</span>:         <span class="comment"># 如果没有传输数据，则该请求为连接请求</span></div><div class="line">                accept_wrapper(key.fileobj)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                service_connection(key, mask)  <span class="comment"># 处理数据</span></div><div class="line"><span class="keyword">except</span> KeyboardInterrupt:</div><div class="line">    print(<span class="string">'caught keyboard interrupt, exiting'</span>)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    sel.close()</div></pre></td></tr></table></figure></p><h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><p>multiconn-client.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> selectors</div><div class="line"><span class="keyword">import</span> types</div><div class="line"></div><div class="line">sel = selectors.DefaultSelector()</div><div class="line">messages = [<span class="string">b'Message 1 from client.'</span>, <span class="string">b'Message 2 from client.'</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_connections</span><span class="params">(host, port, num_conns)</span>:</span></div><div class="line">    server_addr = (host, port)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, num_conns):</div><div class="line">        connid = i + <span class="number">1</span></div><div class="line">        print(<span class="string">'starting connection'</span>, connid, <span class="string">'to'</span>, server_addr)</div><div class="line">        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">        sock.setblocking(<span class="keyword">False</span>)</div><div class="line">        sock.connect_ex(server_addr)</div><div class="line">        events = selectors.EVENT_READ | selectors.EVENT_WRITE</div><div class="line">        data = types.SimpleNamespace(connid=connid,</div><div class="line">                                     msg_total=sum(len(m) <span class="keyword">for</span> m <span class="keyword">in</span> messages),</div><div class="line">                                     recv_total=<span class="number">0</span>,</div><div class="line">                                     messages=list(messages),</div><div class="line">                                     outb=<span class="string">b''</span>)</div><div class="line">        sel.register(sock, events, data=data)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">service_connection</span><span class="params">(key, mask)</span>:</span></div><div class="line">    sock = key.fileobj</div><div class="line">    data = key.data</div><div class="line">    <span class="keyword">if</span> mask &amp; selectors.EVENT_READ:</div><div class="line">        recv_data = sock.recv(<span class="number">1024</span>)  <span class="comment"># 前提条件：可读状态</span></div><div class="line">        <span class="keyword">if</span> recv_data:</div><div class="line">            print(<span class="string">'received'</span>, repr(recv_data), <span class="string">'from connection'</span>, data.connid)</div><div class="line">            data.recv_total += len(recv_data)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> recv_data <span class="keyword">or</span> data.recv_total == data.msg_total:</div><div class="line">            print(<span class="string">'closing connection'</span>, data.connid)</div><div class="line">            sel.unregister(sock)</div><div class="line">            sock.close()</div><div class="line">    <span class="keyword">if</span> mask &amp; selectors.EVENT_WRITE:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data.outb <span class="keyword">and</span> data.messages:</div><div class="line">            data.outb = data.messages.pop(<span class="number">0</span>) <span class="comment"># 如果没有可发送数据，则取 messages 中的第一条用户发送请求</span></div><div class="line">        <span class="keyword">if</span> data.outb:</div><div class="line">            print(<span class="string">'sending'</span>, repr(data.outb), <span class="string">'to connection'</span>, data.connid)</div><div class="line">            sent = sock.send(data.outb)  <span class="comment"># Should be ready to write</span></div><div class="line">            data.outb = data.outb[sent:]</div><div class="line"></div><div class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">4</span>:</div><div class="line">    print(<span class="string">'usage:'</span>, sys.argv[<span class="number">0</span>], <span class="string">'&lt;host&gt; &lt;port&gt; &lt;num_connections&gt;'</span>)</div><div class="line">    sys.exit(<span class="number">1</span>)</div><div class="line"></div><div class="line">host, port, num_conns = sys.argv[<span class="number">1</span>:<span class="number">4</span>]</div><div class="line">start_connections(host, int(port), int(num_conns))</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        events = sel.select(timeout=<span class="number">1</span>)</div><div class="line">        <span class="keyword">if</span> events:</div><div class="line">            <span class="keyword">for</span> key, mask <span class="keyword">in</span> events:</div><div class="line">                service_connection(key, mask)</div><div class="line">        <span class="comment"># Check for a socket being monitored to continue.</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> sel.get_map():</div><div class="line">            <span class="keyword">break</span></div><div class="line"><span class="keyword">except</span> KeyboardInterrupt:</div><div class="line">    print(<span class="string">'caught keyboard interrupt, exiting'</span>)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    sel.close()</div></pre></td></tr></table></figure></p><h2 id="协议封装处理"><a href="#协议封装处理" class="headerlink" title="协议封装处理"></a>协议封装处理</h2><p>在多连接基础上，增加特殊协议处理，比如 json header 、 protocol header 等。</p><h3 id="Server-1"><a href="#Server-1" class="headerlink" title="Server"></a>Server</h3><p>libserver.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> selectors</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> io</div><div class="line"><span class="keyword">import</span> struct</div><div class="line"></div><div class="line">request_search = &#123;</div><div class="line">    <span class="string">'morpheus'</span>: <span class="string">'Follow the white rabbit. \U0001f430'</span>,</div><div class="line">    <span class="string">'ring'</span>: <span class="string">'In the caves beneath the Misty Mountains. \U0001f48d'</span>,</div><div class="line">    <span class="string">'\U0001f436'</span>: <span class="string">'\U0001f43e Playing ball! \U0001f3d0'</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, selector, sock, addr)</span>:</span></div><div class="line">        self.selector = selector</div><div class="line">        self.sock = sock</div><div class="line">        self.addr = addr</div><div class="line">        self._recv_buffer = <span class="string">b''</span></div><div class="line">        self._send_buffer = <span class="string">b''</span></div><div class="line">        self._jsonheader_len = <span class="keyword">None</span></div><div class="line">        self.jsonheader = <span class="keyword">None</span></div><div class="line">        self.request = <span class="keyword">None</span></div><div class="line">        self.response_created = <span class="keyword">False</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_set_selector_events_mask</span><span class="params">(self, mode)</span>:</span></div><div class="line">        <span class="string">"""Set selector to listen for events: mode is 'r', 'w', or 'rw'."""</span></div><div class="line">        <span class="keyword">if</span> mode == <span class="string">'r'</span>:</div><div class="line">            events = selectors.EVENT_READ</div><div class="line">        <span class="keyword">elif</span> mode == <span class="string">'w'</span>:</div><div class="line">            events = selectors.EVENT_WRITE</div><div class="line">        <span class="keyword">elif</span> mode == <span class="string">'rw'</span>:</div><div class="line">            events = selectors.EVENT_READ | selectors.EVENT_WRITE</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f'Invalid events mask mode <span class="subst">&#123;repr(mode)&#125;</span>.'</span>)</div><div class="line">        self.selector.modify(self.sock, events, data=self)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_read</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="comment"># Should be ready to read</span></div><div class="line">            data = self.sock.recv(<span class="number">4096</span>)</div><div class="line">        <span class="keyword">except</span> BlockingIOError:</div><div class="line">            <span class="comment"># Resource temporarily unavailable (errno EWOULDBLOCK)</span></div><div class="line">            <span class="keyword">pass</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> data:</div><div class="line">                self._recv_buffer += data</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">'Peer closed.'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_write</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self._send_buffer:</div><div class="line">            print(<span class="string">'sending'</span>, repr(self._send_buffer), <span class="string">'to'</span>, self.addr)</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="comment"># Should be ready to write</span></div><div class="line">                sent = self.sock.send(self._send_buffer)</div><div class="line">            <span class="keyword">except</span> BlockingIOError:</div><div class="line">                <span class="comment"># Resource temporarily unavailable (errno EWOULDBLOCK)</span></div><div class="line">                <span class="keyword">pass</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self._send_buffer = self._send_buffer[sent:]</div><div class="line">                <span class="comment"># Close when the buffer is drained. The response has been sent.</span></div><div class="line">                <span class="keyword">if</span> sent <span class="keyword">and</span> <span class="keyword">not</span> self._send_buffer:</div><div class="line">                    self.close()</div><div class="line"></div><div class="line">    <span class="comment"># JSON 编码、解码</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_json_encode</span><span class="params">(self, obj, encoding)</span>:</span></div><div class="line">        <span class="keyword">return</span> json.dumps(obj, ensure_ascii=<span class="keyword">False</span>).encode(encoding)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_json_decode</span><span class="params">(self, json_bytes, encoding)</span>:</span></div><div class="line">        tiow = io.TextIOWrapper(io.BytesIO(json_bytes), encoding=encoding,</div><div class="line">                                newline=<span class="string">''</span>)</div><div class="line">        obj = json.load(tiow)</div><div class="line">        tiow.close()</div><div class="line">        <span class="keyword">return</span> obj</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_create_message</span><span class="params">(self, *, content_bytes, content_type,</span></span></div><div class="line"><span class="function"><span class="params">                        content_encoding)</span>:</span></div><div class="line">        jsonheader = &#123;</div><div class="line">            <span class="string">'byteorder'</span>: sys.byteorder,</div><div class="line">            <span class="string">'content-type'</span>: content_type,</div><div class="line">            <span class="string">'content-encoding'</span>: content_encoding,</div><div class="line">            <span class="string">'content-length'</span>: len(content_bytes)</div><div class="line">        &#125;</div><div class="line">        jsonheader_bytes = self._json_encode(jsonheader, <span class="string">'utf-8'</span>)</div><div class="line">        message_hdr = struct.pack(<span class="string">'&gt;H'</span>, len(jsonheader_bytes))</div><div class="line">        message = message_hdr + jsonheader_bytes + content_bytes <span class="comment"># 生成编码后信息</span></div><div class="line">        <span class="keyword">return</span> message</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_create_response_json_content</span><span class="params">(self)</span>:</span></div><div class="line">        action = self.request.get(<span class="string">'action'</span>)</div><div class="line">        <span class="keyword">if</span> action == <span class="string">'search'</span>:  <span class="comment"># 根据客户端发送请求返回相应响应信息</span></div><div class="line">            query = self.request.get(<span class="string">'value'</span>)</div><div class="line">            answer = request_search.get(query) <span class="keyword">or</span> <span class="string">f'No match for "<span class="subst">&#123;query&#125;</span>".'</span></div><div class="line">            content = &#123;<span class="string">'result'</span>: answer&#125;</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            content = &#123;<span class="string">'result'</span>: <span class="string">f'Error: invalid action "<span class="subst">&#123;action&#125;</span>".'</span>&#125;</div><div class="line">        content_encoding = <span class="string">'utf-8'</span></div><div class="line">        response = &#123;</div><div class="line">            <span class="string">'content_bytes'</span>: self._json_encode(content, content_encoding),</div><div class="line">            <span class="string">'content_type'</span>: <span class="string">'text/json'</span>,</div><div class="line">            <span class="string">'content_encoding'</span>: content_encoding</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> response</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_create_response_binary_content</span><span class="params">(self)</span>:</span> <span class="comment"># 如果为 binary，则直接返回</span></div><div class="line">        response = &#123;</div><div class="line">            <span class="string">'content_bytes'</span>: <span class="string">b'First 10 bytes of request: '</span> +</div><div class="line">                             self.request[:<span class="number">10</span>],</div><div class="line">            <span class="string">'content_type'</span>: <span class="string">'binary/custom-server-binary-type'</span>,</div><div class="line">            <span class="string">'content_encoding'</span>: <span class="string">'binary'</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> response</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_events</span><span class="params">(self, mask)</span>:</span></div><div class="line">        <span class="keyword">if</span> mask &amp; selectors.EVENT_READ:</div><div class="line">            self.read()</div><div class="line">        <span class="keyword">if</span> mask &amp; selectors.EVENT_WRITE:</div><div class="line">            self.write()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self)</span>:</span></div><div class="line">        self._read()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self._jsonheader_len <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self.process_protoheader()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self._jsonheader_len <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">if</span> self.jsonheader <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                self.process_jsonheader()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.jsonheader:</div><div class="line">            <span class="keyword">if</span> self.request <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                self.process_request()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.request:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.response_created:</div><div class="line">                self.create_response()</div><div class="line"></div><div class="line">        self._write()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'closing connection to'</span>, self.addr)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.selector.unregister(self.sock)</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            print(<span class="string">f'error: selector.unregister() exception for'</span>,</div><div class="line">                  <span class="string">f'<span class="subst">&#123;self.addr&#125;</span>: <span class="subst">&#123;repr(e)&#125;</span>'</span>)</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.sock.close()</div><div class="line">        <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</div><div class="line">            print(<span class="string">f'error: socket.close() exception for'</span>,</div><div class="line">                  <span class="string">f'<span class="subst">&#123;self.addr&#125;</span>: <span class="subst">&#123;repr(e)&#125;</span>'</span>)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            <span class="comment"># Delete reference to socket object for garbage collection</span></div><div class="line">            self.sock = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_protoheader</span><span class="params">(self)</span>:</span> <span class="comment"># 解析协议头部信息，得到 json header 大小</span></div><div class="line">        hdrlen = <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> len(self._recv_buffer) &gt;= hdrlen:</div><div class="line">            self._jsonheader_len = struct.unpack(<span class="string">'&gt;H'</span>,</div><div class="line">                                                 self._recv_buffer[:hdrlen])[<span class="number">0</span>]</div><div class="line">            self._recv_buffer = self._recv_buffer[hdrlen:]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_jsonheader</span><span class="params">(self)</span>:</span> <span class="comment"># 解析 json header 信息，得到真实请求信息</span></div><div class="line">        hdrlen = self._jsonheader_len</div><div class="line">        <span class="keyword">if</span> len(self._recv_buffer) &gt;= hdrlen:</div><div class="line">            self.jsonheader = self._json_decode(self._recv_buffer[:hdrlen],</div><div class="line">                                                <span class="string">'utf-8'</span>)</div><div class="line">            self._recv_buffer = self._recv_buffer[hdrlen:]</div><div class="line">            <span class="keyword">for</span> reqhdr <span class="keyword">in</span> (<span class="string">'byteorder'</span>, <span class="string">'content-length'</span>, <span class="string">'content-type'</span>,</div><div class="line">                           <span class="string">'content-encoding'</span>):</div><div class="line">                <span class="keyword">if</span> reqhdr <span class="keyword">not</span> <span class="keyword">in</span> self.jsonheader:</div><div class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">f'Missing required header "<span class="subst">&#123;reqhdr&#125;</span>".'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self)</span>:</span></div><div class="line">        content_len = self.jsonheader[<span class="string">'content-length'</span>]</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> len(self._recv_buffer) &gt;= content_len:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        data = self._recv_buffer[:content_len]</div><div class="line">        self._recv_buffer = self._recv_buffer[content_len:]</div><div class="line">        <span class="keyword">if</span> self.jsonheader[<span class="string">'content-type'</span>] == <span class="string">'text/json'</span>:</div><div class="line">            encoding = self.jsonheader[<span class="string">'content-encoding'</span>]</div><div class="line">            self.request = self._json_decode(data, encoding)</div><div class="line">            print(<span class="string">'received request'</span>, repr(self.request), <span class="string">'from'</span>, self.addr)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># Binary 或者未知请求类型</span></div><div class="line">            self.request = data</div><div class="line">            print(<span class="string">f'received <span class="subst">&#123;self.jsonheader[<span class="string">"content-type"</span>]&#125;</span> request from'</span>,</div><div class="line">                  self.addr)</div><div class="line">        <span class="comment"># 设置 selector 监听写入事件，读事件已经完成</span></div><div class="line">        self._set_selector_events_mask(<span class="string">'w'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_response</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.jsonheader[<span class="string">'content-type'</span>] == <span class="string">'text/json'</span>:</div><div class="line">            response = self._create_response_json_content()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># Binary or unknown content-type</span></div><div class="line">            response = self._create_response_binary_content()</div><div class="line">        message = self._create_message(**response)</div><div class="line">        self.response_created = <span class="keyword">True</span></div><div class="line">        self._send_buffer += message</div></pre></td></tr></table></figure></p><p>app-server.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> selectors</div><div class="line"><span class="keyword">import</span> traceback</div><div class="line"></div><div class="line"><span class="keyword">import</span> libserver</div><div class="line"></div><div class="line">sel = selectors.DefaultSelector()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">accept_wrapper</span><span class="params">(sock)</span>:</span></div><div class="line">    conn, addr = sock.accept()  <span class="comment"># Should be ready to read</span></div><div class="line">    print(<span class="string">'accepted connection from'</span>, addr)</div><div class="line">    conn.setblocking(<span class="keyword">False</span>)</div><div class="line">    message = libserver.Message(sel, conn, addr)</div><div class="line">    sel.register(conn, selectors.EVENT_READ, data=message)</div><div class="line"></div><div class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">3</span>:</div><div class="line">    print(<span class="string">'usage:'</span>, sys.argv[<span class="number">0</span>], <span class="string">'&lt;host&gt; &lt;port&gt;'</span>)</div><div class="line">    sys.exit(<span class="number">1</span>)</div><div class="line"></div><div class="line">host, port = sys.argv[<span class="number">1</span>], int(sys.argv[<span class="number">2</span>])</div><div class="line">lsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line"><span class="comment"># Avoid bind() exception: OSError: [Errno 48] Address already in use</span></div><div class="line">lsock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</div><div class="line">lsock.bind((host, port))</div><div class="line">lsock.listen()</div><div class="line">print(<span class="string">'listening on'</span>, (host, port))</div><div class="line">lsock.setblocking(<span class="keyword">False</span>)</div><div class="line">sel.register(lsock, selectors.EVENT_READ, data=<span class="keyword">None</span>) <span class="comment"># 将 socket 监听事件注册到 selector</span></div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        events = sel.select(timeout=<span class="keyword">None</span>)</div><div class="line">        <span class="keyword">for</span> key, mask <span class="keyword">in</span> events:</div><div class="line">            <span class="keyword">if</span> key.data <span class="keyword">is</span> <span class="keyword">None</span>: <span class="comment"># 如果没有请求数据，则为客户端连接请求</span></div><div class="line">                accept_wrapper(key.fileobj)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                message = key.data</div><div class="line">                <span class="keyword">try</span>:</div><div class="line">                    message.process_events(mask) <span class="comment"># 处理请求信息</span></div><div class="line">                <span class="keyword">except</span> Exception:</div><div class="line">                    print(<span class="string">'main: error: exception for'</span>,</div><div class="line">                          <span class="string">f'<span class="subst">&#123;message.addr&#125;</span>:\n<span class="subst">&#123;traceback.format_exc()&#125;</span>'</span>)</div><div class="line">                    message.close()</div><div class="line"><span class="keyword">except</span> KeyboardInterrupt:</div><div class="line">    print(<span class="string">'caught keyboard interrupt, exiting'</span>)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    sel.close()</div></pre></td></tr></table></figure></p><h3 id="Client-1"><a href="#Client-1" class="headerlink" title="Client"></a>Client</h3><p>libclient.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> selectors</div><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> io</div><div class="line"><span class="keyword">import</span> struct</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, selector, sock, addr, request)</span>:</span></div><div class="line">        self.selector = selector</div><div class="line">        self.sock = sock</div><div class="line">        self.addr = addr</div><div class="line">        self.request = request</div><div class="line">        self._recv_buffer = <span class="string">b''</span></div><div class="line">        self._send_buffer = <span class="string">b''</span></div><div class="line">        self._request_queued = <span class="keyword">False</span></div><div class="line">        self._jsonheader_len = <span class="keyword">None</span></div><div class="line">        self.jsonheader = <span class="keyword">None</span></div><div class="line">        self.response = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_set_selector_events_mask</span><span class="params">(self, mode)</span>:</span></div><div class="line">        <span class="string">"""Set selector to listen for events: mode is 'r', 'w', or 'rw'."""</span></div><div class="line">        <span class="keyword">if</span> mode == <span class="string">'r'</span>:</div><div class="line">            events = selectors.EVENT_READ</div><div class="line">        <span class="keyword">elif</span> mode == <span class="string">'w'</span>:</div><div class="line">            events = selectors.EVENT_WRITE</div><div class="line">        <span class="keyword">elif</span> mode == <span class="string">'rw'</span>:</div><div class="line">            events = selectors.EVENT_READ | selectors.EVENT_WRITE</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">f'Invalid events mask mode <span class="subst">&#123;repr(mode)&#125;</span>.'</span>)</div><div class="line">        self.selector.modify(self.sock, events, data=self)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_read</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="comment"># Should be ready to read</span></div><div class="line">            data = self.sock.recv(<span class="number">4096</span>)</div><div class="line">        <span class="keyword">except</span> BlockingIOError:</div><div class="line">            <span class="comment"># Resource temporarily unavailable (errno EWOULDBLOCK)</span></div><div class="line">            <span class="keyword">pass</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> data:</div><div class="line">                self._recv_buffer += data</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">'Peer closed.'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_write</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> self._send_buffer:</div><div class="line">            print(<span class="string">'sending'</span>, repr(self._send_buffer), <span class="string">'to'</span>, self.addr)</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                <span class="comment"># Should be ready to write</span></div><div class="line">                sent = self.sock.send(self._send_buffer)</div><div class="line">            <span class="keyword">except</span> BlockingIOError:</div><div class="line">                <span class="comment"># Resource temporarily unavailable (errno EWOULDBLOCK)</span></div><div class="line">                <span class="keyword">pass</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self._send_buffer = self._send_buffer[sent:]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_json_encode</span><span class="params">(self, obj, encoding)</span>:</span> <span class="comment"># JSON 编码</span></div><div class="line">        <span class="keyword">return</span> json.dumps(obj, ensure_ascii=<span class="keyword">False</span>).encode(encoding)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_json_decode</span><span class="params">(self, json_bytes, encoding)</span>:</span> <span class="comment"># JSON 解码</span></div><div class="line">        tiow = io.TextIOWrapper(io.BytesIO(json_bytes), encoding=encoding,</div><div class="line">                                newline=<span class="string">''</span>)</div><div class="line">        obj = json.load(tiow)</div><div class="line">        tiow.close()</div><div class="line">        <span class="keyword">return</span> obj</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_create_message</span><span class="params">(self, *, content_bytes, content_type,</span></span></div><div class="line"><span class="function"><span class="params">                        content_encoding)</span>:</span> <span class="comment"># 打包处理请求信息</span></div><div class="line">        jsonheader = &#123;</div><div class="line">            <span class="string">'byteorder'</span>: sys.byteorder,</div><div class="line">            <span class="string">'content-type'</span>: content_type,</div><div class="line">            <span class="string">'content-encoding'</span>: content_encoding,</div><div class="line">            <span class="string">'content-length'</span>: len(content_bytes)</div><div class="line">        &#125;</div><div class="line">        jsonheader_bytes = self._json_encode(jsonheader, <span class="string">'utf-8'</span>)</div><div class="line">        message_hdr = struct.pack(<span class="string">'&gt;H'</span>, len(jsonheader_bytes))</div><div class="line">        message = message_hdr + jsonheader_bytes + content_bytes</div><div class="line">        <span class="keyword">return</span> message</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_process_response_json_content</span><span class="params">(self)</span>:</span></div><div class="line">        content = self.response</div><div class="line">        result = content.get(<span class="string">'result'</span>)</div><div class="line">        print(<span class="string">f'got result: <span class="subst">&#123;result&#125;</span>'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_process_response_binary_content</span><span class="params">(self)</span>:</span></div><div class="line">        content = self.response</div><div class="line">        print(<span class="string">f'got response: <span class="subst">&#123;repr(content)&#125;</span>'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_events</span><span class="params">(self, mask)</span>:</span></div><div class="line">        <span class="keyword">if</span> mask &amp; selectors.EVENT_READ:</div><div class="line">            self.read()</div><div class="line">        <span class="keyword">if</span> mask &amp; selectors.EVENT_WRITE:</div><div class="line">            self.write()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self)</span>:</span></div><div class="line">        self._read()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self._jsonheader_len <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            self.process_protoheader()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self._jsonheader_len <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">if</span> self.jsonheader <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                self.process_jsonheader()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self.jsonheader:</div><div class="line">            <span class="keyword">if</span> self.response <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                self.process_response()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self._request_queued:</div><div class="line">            self.queue_request()</div><div class="line"></div><div class="line">        self._write()</div><div class="line"></div><div class="line">        <span class="keyword">if</span> self._request_queued:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self._send_buffer:</div><div class="line">                <span class="comment"># Set selector to listen for read events, we're done writing.</span></div><div class="line">                self._set_selector_events_mask(<span class="string">'r'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></div><div class="line">        print(<span class="string">'closing connection to'</span>, self.addr)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.selector.unregister(self.sock)</div><div class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">            print(<span class="string">f'error: selector.unregister() exception for'</span>,</div><div class="line">                  <span class="string">f'<span class="subst">&#123;self.addr&#125;</span>: <span class="subst">&#123;repr(e)&#125;</span>'</span>)</div><div class="line"></div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            self.sock.close()</div><div class="line">        <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</div><div class="line">            print(<span class="string">f'error: socket.close() exception for'</span>,</div><div class="line">                  <span class="string">f'<span class="subst">&#123;self.addr&#125;</span>: <span class="subst">&#123;repr(e)&#125;</span>'</span>)</div><div class="line">        <span class="keyword">finally</span>:</div><div class="line">            <span class="comment"># Delete reference to socket object for garbage collection</span></div><div class="line">            self.sock = <span class="keyword">None</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">queue_request</span><span class="params">(self)</span>:</span></div><div class="line">        content = self.request[<span class="string">'content'</span>]</div><div class="line">        content_type = self.request[<span class="string">'type'</span>]</div><div class="line">        content_encoding = self.request[<span class="string">'encoding'</span>]</div><div class="line">        <span class="keyword">if</span> content_type == <span class="string">'text/json'</span>:</div><div class="line">            req = &#123;</div><div class="line">                <span class="string">'content_bytes'</span>: self._json_encode(content, content_encoding),</div><div class="line">                <span class="string">'content_type'</span>: content_type,</div><div class="line">                <span class="string">'content_encoding'</span>: content_encoding</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            req = &#123;</div><div class="line">                <span class="string">'content_bytes'</span>: content,</div><div class="line">                <span class="string">'content_type'</span>: content_type,</div><div class="line">                <span class="string">'content_encoding'</span>: content_encoding</div><div class="line">            &#125;</div><div class="line">        message = self._create_message(**req)</div><div class="line">        self._send_buffer += message</div><div class="line">        self._request_queued = <span class="keyword">True</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_protoheader</span><span class="params">(self)</span>:</span></div><div class="line">        hdrlen = <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> len(self._recv_buffer) &gt;= hdrlen:</div><div class="line">            self._jsonheader_len = struct.unpack(<span class="string">'&gt;H'</span>,</div><div class="line">                                                 self._recv_buffer[:hdrlen])[<span class="number">0</span>]</div><div class="line">            self._recv_buffer = self._recv_buffer[hdrlen:]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_jsonheader</span><span class="params">(self)</span>:</span></div><div class="line">        hdrlen = self._jsonheader_len</div><div class="line">        <span class="keyword">if</span> len(self._recv_buffer) &gt;= hdrlen:</div><div class="line">            self.jsonheader = self._json_decode(self._recv_buffer[:hdrlen],</div><div class="line">                                                <span class="string">'utf-8'</span>)</div><div class="line">            self._recv_buffer = self._recv_buffer[hdrlen:]</div><div class="line">            <span class="keyword">for</span> reqhdr <span class="keyword">in</span> (<span class="string">'byteorder'</span>, <span class="string">'content-length'</span>, <span class="string">'content-type'</span>,</div><div class="line">                           <span class="string">'content-encoding'</span>):</div><div class="line">                <span class="keyword">if</span> reqhdr <span class="keyword">not</span> <span class="keyword">in</span> self.jsonheader:</div><div class="line">                    <span class="keyword">raise</span> ValueError(<span class="string">f'Missing required header "<span class="subst">&#123;reqhdr&#125;</span>".'</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span><span class="params">(self)</span>:</span></div><div class="line">        content_len = self.jsonheader[<span class="string">'content-length'</span>]</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> len(self._recv_buffer) &gt;= content_len:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        data = self._recv_buffer[:content_len]</div><div class="line">        self._recv_buffer = self._recv_buffer[content_len:]</div><div class="line">        <span class="keyword">if</span> self.jsonheader[<span class="string">'content-type'</span>] == <span class="string">'text/json'</span>:</div><div class="line">            encoding = self.jsonheader[<span class="string">'content-encoding'</span>]</div><div class="line">            self.response = self._json_decode(data, encoding)</div><div class="line">            print(<span class="string">'received response'</span>, repr(self.response), <span class="string">'from'</span>, self.addr)</div><div class="line">            self._process_response_json_content()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># Binary or unknown content-type</span></div><div class="line">            self.response = data</div><div class="line">            print(<span class="string">f'received <span class="subst">&#123;self.jsonheader[<span class="string">"content-type"</span>]&#125;</span> response from'</span>,</div><div class="line">                  self.addr)</div><div class="line">            self._process_response_binary_content()</div><div class="line">        <span class="comment"># Close when response has been processed</span></div><div class="line">        self.close()</div></pre></td></tr></table></figure></p><p>app-client.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="keyword">import</span> selectors</div><div class="line"><span class="keyword">import</span> traceback</div><div class="line"></div><div class="line"><span class="keyword">import</span> libclient</div><div class="line"></div><div class="line">sel = selectors.DefaultSelector()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_request</span><span class="params">(action, value)</span>:</span></div><div class="line">    <span class="keyword">if</span> action == <span class="string">'search'</span>:</div><div class="line">        <span class="keyword">return</span> dict(</div><div class="line">            type=<span class="string">'text/json'</span>,</div><div class="line">            encoding=<span class="string">'utf-8'</span>,</div><div class="line">            content=dict(action=action, value=value)</div><div class="line">        )</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> dict(</div><div class="line">            type=<span class="string">'binary/custom-client-binary-type'</span>,</div><div class="line">            encoding=<span class="string">'binary'</span>,</div><div class="line">            content=bytes(action + value, encoding=<span class="string">'utf-8'</span>)</div><div class="line">        )</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_connection</span><span class="params">(host, port, request)</span>:</span></div><div class="line">    addr = (host, port)</div><div class="line">    print(<span class="string">'starting connection to'</span>, addr)</div><div class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line">    sock.setblocking(<span class="keyword">False</span>)</div><div class="line">    sock.connect_ex(addr)</div><div class="line">    events = selectors.EVENT_READ | selectors.EVENT_WRITE</div><div class="line">    message = libclient.Message(sel, sock, addr, request)</div><div class="line">    sel.register(sock, events, data=message)</div><div class="line"></div><div class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">5</span>:</div><div class="line">    print(<span class="string">'usage:'</span>, sys.argv[<span class="number">0</span>], <span class="string">'&lt;host&gt; &lt;port&gt; &lt;action&gt; &lt;value&gt;'</span>)</div><div class="line">    sys.exit(<span class="number">1</span>)</div><div class="line"></div><div class="line">host, port = sys.argv[<span class="number">1</span>], int(sys.argv[<span class="number">2</span>])</div><div class="line">action, value = sys.argv[<span class="number">3</span>], sys.argv[<span class="number">4</span>]</div><div class="line">request = create_request(action, value)</div><div class="line">start_connection(host, port, request)</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        events = sel.select(timeout=<span class="number">1</span>)</div><div class="line">        <span class="keyword">for</span> key, mask <span class="keyword">in</span> events:</div><div class="line">            message = key.data</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                message.process_events(mask)</div><div class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                print(<span class="string">'main: error: exception for'</span>,</div><div class="line">                      <span class="string">f'<span class="subst">&#123;message.addr&#125;</span>:\n<span class="subst">&#123;traceback.format_exc()&#125;</span>'</span>)</div><div class="line">                message.close()</div><div class="line">        <span class="comment"># Check for a socket being monitored to continue.</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> sel.get_map():</div><div class="line">            <span class="keyword">break</span></div><div class="line"><span class="keyword">except</span> KeyboardInterrupt:</div><div class="line">    print(<span class="string">'caught keyboard interrupt, exiting'</span>)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    sel.close()</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习了通过 selector 多路 I/O 复用方式来处理 socket 多连接情况，如果请求量少的情况下，也可以使用多线程方式处理。</p><p>selector 是 Python3.6 标准库，等之后更了解 select、poll、epoll 之后写一篇总结。<br>（不知道何年何月啊）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;平时工作很少涉及到 Socket 相关，基本上都是 HTTP 之上的业务，最近看到 &lt;a href=&quot;https://realpython.
      
    
    </summary>
    
    
      <category term="Python" scheme="http://zdyxry.com/tags/Python/"/>
    
      <category term="Socket" scheme="http://zdyxry.com/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>硬件故障坑死人（一）</title>
    <link href="http://zdyxry.com/2018/09/27/%E7%A1%AC%E4%BB%B6%E6%95%85%E9%9A%9C%E5%9D%91%E6%AD%BB%E4%BA%BA%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://zdyxry.com/2018/09/27/硬件故障坑死人（一）/</id>
    <published>2018-09-27T01:35:44.000Z</published>
    <updated>2018-09-27T11:50:38.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>因为公司提供的产品不单单是软件形式提供，还对应的提供一体机形式（服务器 &amp; 相应软件）。正式工作2年多也接触到了一些硬件的坑，特此总结。</p><h2 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h2><p>因为公司主要提供的产品是分布式存储和虚拟化相关产品，最直接的影响也是产生范围最大的影响就是磁盘了，会直接导致存储出现单副本等问题，从而产生数据恢复，影响集群稳定性。</p><h3 id="固件版本"><a href="#固件版本" class="headerlink" title="固件版本"></a>固件版本</h3><p>数据中心级别磁盘，相比于性能的要求，稳定性才是重中之重。大部分厂商的磁盘均支持 S.M.A.R.T. 规范，也就是“Self-Monitoring Analysis and Reporting Technology”，即“自我监测、分析及报告技术”，是一种自动的硬盘状态检测与预警系统和规范。我们可以通过相应命令比如 <code>smartctl</code> 直接获取磁盘相应信息，或者对磁盘进行检测。</p><p>S.M.A.R.T. 存在两个问题：</p><ol><li>大部分厂商支持，意味着一部分厂商不支持</li><li>不同厂商对于自家磁盘的关键字定义不同</li></ol><p>针对上述两个问题，我们只能说做到尽量多的测试踩坑，防止出现意外情况。</p><p>介绍了 S.M.A.R.T. ，我们来看看这节标题，固件。磁盘固件版本可以通过 <code>smartctl</code> 或者 <code>sg_utils</code> 工具获取：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">[root@node 07:47:14 ~]<span class="variable">$smartctl</span> -i /dev/sdc</div><div class="line">smartctl 6.5 2016-05-07 r4318 [x86_64-linux-3.10.0-693.11.6.el7.smartx.1.x86_64] (<span class="built_in">local</span> build)</div><div class="line">Copyright (C) 2002-16, Bruce Allen, Christian Franke, www.smartmontools.org</div><div class="line"></div><div class="line">=== START OF INFORMATION SECTION ===</div><div class="line">Model Family:     Intel 730 and DC S35x0/3610/3700 Series SSDs</div><div class="line">Device Model:     INTEL SSDSC2BA400G4</div><div class="line">Serial Number:    BTHV518009D3400NGN</div><div class="line">LU WWN Device Id: 5 5cd2e4 04c00728c</div><div class="line">Firmware Version: G2010160</div><div class="line">User Capacity:    400,088,457,216 bytes [400 GB]</div><div class="line">Sector Sizes:     512 bytes logical, 4096 bytes physical</div><div class="line">Rotation Rate:    Solid State Device</div><div class="line">Form Factor:      2.5 inches</div><div class="line">Device is:        In smartctl database [<span class="keyword">for</span> details use: -P show]</div><div class="line">ATA Version is:   ACS-3 T13/2161-D revision 5</div><div class="line">SATA Version is:  SATA 3.1, 6.0 Gb/s (current: 6.0 Gb/s)</div><div class="line">Local Time is:    Wed Sep 26 07:47:20 2018 CST</div><div class="line">SMART support is: Available - device has SMART capability.</div><div class="line">SMART support is: Enabled</div><div class="line"></div><div class="line">[root@node 07:47:07 ~]<span class="variable">$sg_inq</span> /dev/sdc</div><div class="line">standard INQUIRY:</div><div class="line">  PQual=0  Device_type=0  RMB=0  version=0x05  [SPC-3]</div><div class="line">  [AERC=0]  [TrmTsk=0]  NormACA=0  HiSUP=0  Resp_data_format=2</div><div class="line">  SCCS=0  ACC=0  TPGS=0  3PC=0  Protect=0  [BQue=0]</div><div class="line">  EncServ=0  MultiP=0  [MChngr=0]  [ACKREQQ=0]  Addr16=0</div><div class="line">  [RelAdr=0]  WBus16=0  Sync=0  Linked=0  [TranDis=0]  CmdQue=0</div><div class="line">  [SPI: Clocking=0x0  QAS=0  IUS=0]</div><div class="line">    length=96 (0x60)   Peripheral device <span class="built_in">type</span>: disk</div><div class="line"> Vendor identification: ATA     </div><div class="line"> Product identification: INTEL SSDSC2BA40</div><div class="line"> Product revision level: 0160</div><div class="line"> Unit serial number: BTHV518009D3400NGN</div></pre></td></tr></table></figure><p>可以看到上面这块磁盘 <code>/dev/sdc</code> 的固件版本就是 <code>0160</code> 。<br>我们日常看到的磁盘根据出厂时间的不同，对应的固件版本也不同，平时也都没有在意固件版本。但是某次在进行 POC 时，发现性能不稳定，在排除了存储系统问题后，直接对该磁盘进行 Fio 测试，发现确实是磁盘自身性能不稳定。这块磁盘是 Intel 当时的中高端产品 S3710 系列，理论上不应该存在问题，经过排查，最终确定是固件版本导致的，通过 Intel 提供的升级工具升级后，性能恢复正常。</p><h2 id="存储控制器"><a href="#存储控制器" class="headerlink" title="存储控制器"></a>存储控制器</h2><p>blkdiscard ，用来清理磁盘扇区的操作。某天 POC 过程中发现当 SSD 进行 blkdiscard 时，直接导致该 SSD IO Error。</p><p>当时想法： </p><ul><li>第一想法是该磁盘有问题，不支持，结果发现是惠普 OEM Intel 的 S3520 SSD，应该是支持相关指令的；</li><li>想到上面一节提到的固件版本问题，由于磁盘是 OEM 的原因，固件只能更新惠普提供的固件，当时去惠普官方网站查询发现已经是最新版本；</li></ul><p>上面两个原因都不是，当时没有什么其他的想法，我司售前文工提到，有没有可能是存储控制器的原因？<br>检查当时的存储控制器，是惠普的一块型号为 Smart Array P440ar Controller 的控制器。检查该控制器固件，查询官网，发现不是最新版本，于是下载更新，控制器固件版本更新方式有两种：</p><ol><li>DOS 更新</li><li>UEFI 更新</li></ol><p>两种方式都是将固件文件放置到 U盘 或者其他存储介质中，然后启动 OS，进行更新。由于现在新款服务器均带 UEFI ，那么方式 2 会简单一些。</p><p>更新固件后，发现磁盘执行 blkdiscard 无报错，检查命令返回值（$?）也是 0 ，问题解决。</p><h2 id="电源"><a href="#电源" class="headerlink" title="电源"></a>电源</h2><p>通常服务器配置双路电源，避免单一故障，此为前提。</p><h3 id="导致-CPU-频率过低"><a href="#导致-CPU-频率过低" class="headerlink" title="导致 CPU 频率过低"></a>导致 CPU 频率过低</h3><p>某次测试，由于上架偷懒，只连接了单路电源就开始进行测试。开始功能测试一切正常，到了性能测试，发现相同物理设备下，这台机器性能比之前验证结果低 20%，发现 CPU 频率过低，查看 <code>/proc/cpuinfo</code> 发现部分 core 低于标准主频数。</p><p>查看 IPMI &amp; BIOS 配置，并无异常配置，咨询服务器厂商 400，提示是否是由于电源供电不足导致的，插上第二个电源后，CPU 频率稳定，sysbench 运行结果符合标准，问题解决。</p><h3 id="磁盘闪断"><a href="#磁盘闪断" class="headerlink" title="磁盘闪断"></a>磁盘闪断</h3><p>在服务器正常运行过程中，磁盘的任何故障都会导致业务受到严重影响，哪怕是分布式存储，采用副本机制，如果同时有多个服务器出现磁盘闪断，后果也是极为严重的。</p><p>现在各大服务器厂商出货量较多的均为高密度服务器，也就是我们见到的一个机箱内部同时存在多个节点，比如： </p><ul><li>四子星就是一个机箱内部有4个节点，如果前置面板磁盘插槽（2.5 寸）为 24 的话，那么每个节点可以连接磁盘数为 6，；</li><li>双子星就是一个机箱内部有 2 个节点，如果前置面板为 3.5 寸磁盘的话，那么每个节点连接磁盘数为 6；</li><li>双子星如果前置面板为 2.5 的话，那么每个节点连接磁盘数为 12。</li></ul><p>这样的服务器好处就是在同一个机箱中，可以放置更多的 CPU内存，成本低，功耗低。但是它的缺点同样明显：多个节点采用同一电源，若电源出现故障，会导致整个机箱内的所有节点出现故障。</p><p>最近发现某个机器频繁出现整个节点的磁盘同时断开再连接的场景，由于是双子星，也就是两个节点共用同一电源，影响较大。</p><p>最开始这种涉及到整个节点所有磁盘的故障，想法是这样的：</p><ul><li>节点操作系统日志只有磁盘连接断开的日志，无特殊问题</li><li>整个节点所有磁盘故障，应该不是单一磁盘问题，估计是控制器问题</li><li>检查控制器日志，没有发现报错</li><li>检查控制器固件版本，已为最新版本</li><li>检查控制器连线，连线正常</li></ul><p>想法到这里就断了，只能求助服务器厂商了，厂商检查后发现是电源背板问题，由于电源背板故障，导致供电不足，磁盘连接一直处于连接断开重复状态。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>暂时总结了印象比较深的几次硬件故障，由于大家现在都是只做软件，对硬件了解仅限于概念，随着云计算的兴起，很多同学可能没见过真正的服务器，更别提遇到这些诡异的故障。</p><p>硬件故障特别难定位，如果没有一定的相关经验，估计会像我一样捉瞎。希望这篇文章对大家有所帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;因为公司提供的产品不单单是软件形式提供，还对应的提供一体机形式（服务器 &amp;amp; 相应软件）。正式工作2年多也接触到了一些硬件的坑，特此总
      
    
    </summary>
    
    
      <category term="Server" scheme="http://zdyxry.com/tags/Server/"/>
    
      <category term="Hardware" scheme="http://zdyxry.com/tags/Hardware/"/>
    
  </entry>
  
  <entry>
    <title>OpenvSwitch Active-Backup failback 验证</title>
    <link href="http://zdyxry.com/2018/09/24/OpenvSwitch-Active-Backup-failback-%E9%AA%8C%E8%AF%81/"/>
    <id>http://zdyxry.com/2018/09/24/OpenvSwitch-Active-Backup-failback-验证/</id>
    <published>2018-09-24T09:36:22.000Z</published>
    <updated>2018-09-24T09:36:51.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在虚拟化场景下，我们经常使用  OpenvSwitch 进行虚拟网络配置，最近看到有人问，Open vSwitch 的 bonding 模式 Avtice-Backup ，是否支持 failback 功能？ 虽然一直经常使用该模式，但是不知道当故障恢复后，是否会出现故障恢复？<br>看官方文档中描述感觉有些模糊，来验证下。</p><h2 id="验证方式"><a href="#验证方式" class="headerlink" title="验证方式"></a>验证方式</h2><h3 id="配置-VDS"><a href="#配置-VDS" class="headerlink" title="配置 VDS"></a>配置 VDS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@node 17:14:54 ~]<span class="variable">$ovs</span>-vsctl show</div><div class="line">b9956069-4101-4aab-a8a2-86db4f5ae390</div><div class="line">    Bridge ovsbr-mgt</div><div class="line">        Port bond-mgt</div><div class="line">            Interface <span class="string">"eno2"</span></div><div class="line">            Interface <span class="string">"eno1"</span></div><div class="line">        Port port-mgt</div><div class="line">            tag: 0</div><div class="line">            Interface port-mgt</div><div class="line">                <span class="built_in">type</span>: internal</div><div class="line">        Port ovsbr-mgt</div><div class="line">            Interface ovsbr-mgt</div><div class="line">                <span class="built_in">type</span>: internal</div><div class="line">    ovs_version: <span class="string">"2.3.1"</span></div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@node 17:14:59 ~]<span class="variable">$ovs</span>-appctl bond/list</div><div class="line">bond<span class="built_in">type</span>recircIDslaves</div><div class="line">bond-mgtactive-backup0eno1, eno2</div></pre></td></tr></table></figure><h3 id="故障前流量检测"><a href="#故障前流量检测" class="headerlink" title="故障前流量检测"></a>故障前流量检测</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@node 17:15:58 ~]<span class="variable">$ifconfig</span> eno1</div><div class="line">eno1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</div><div class="line">        inet6 fe80::ec4:7aff:fe0f:8f68  prefixlen 64  scopeid 0x20&lt;link&gt;</div><div class="line">        ether 0c:c4:7a:0f:8f:68  txqueuelen 1000  (Ethernet)</div><div class="line">        RX packets 10046643  bytes 1131705628 (1.0 GiB)</div><div class="line">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class="line">        TX packets 4182418  bytes 443990895 (423.4 MiB)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class="line">        device memory 0xdfd20000-dfd3ffff</div><div class="line"></div><div class="line">[root@node 17:16:45 ~]<span class="variable">$ifconfig</span> eno2</div><div class="line">eno2: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</div><div class="line">        ether 0c:c4:7a:0f:8f:69  txqueuelen 1000  (Ethernet)</div><div class="line">        RX packets 100  bytes 10240 (100 KiB)</div><div class="line">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class="line">        TX packets 100  bytes 10240 (100 KiB)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class="line">        device memory 0xdfd00000-dfd1ffff</div></pre></td></tr></table></figure><h3 id="故障后流量检测"><a href="#故障后流量检测" class="headerlink" title="故障后流量检测"></a>故障后流量检测</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@node 17:15:58 ~]<span class="variable">$ifconfig</span> eno1</div><div class="line">eno1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</div><div class="line">        inet6 fe80::ec4:7aff:fe0f:8f68  prefixlen 64  scopeid 0x20&lt;link&gt;</div><div class="line">        ether 0c:c4:7a:0f:8f:68  txqueuelen 1000  (Ethernet)</div><div class="line">        RX packets 10046643  bytes 1131705628 (1.0 GiB)</div><div class="line">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class="line">        TX packets 4182418  bytes 443990895 (423.4 MiB)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class="line">        device memory 0xdfd20000-dfd3ffff</div><div class="line"></div><div class="line">[root@node 17:16:45 ~]<span class="variable">$ifconfig</span> eno2</div><div class="line">eno2: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</div><div class="line">        ether 0c:c4:7a:0f:8f:69  txqueuelen 1000  (Ethernet)</div><div class="line">        RX packets 22222222  bytes 2231705628 (1.0 GiB)</div><div class="line">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class="line">        TX packets 2231705628  bytes 2231705628 (1.0 GiB)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class="line">        device memory 0xdfd00000-dfd1ffff</div></pre></td></tr></table></figure><h3 id="故障恢复后流量检测"><a href="#故障恢复后流量检测" class="headerlink" title="故障恢复后流量检测"></a>故障恢复后流量检测</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@node 17:15:58 ~]<span class="variable">$ifconfig</span> eno1</div><div class="line">eno1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</div><div class="line">        inet6 fe80::ec4:7aff:fe0f:8f68  prefixlen 64  scopeid 0x20&lt;link&gt;</div><div class="line">        ether 0c:c4:7a:0f:8f:68  txqueuelen 1000  (Ethernet)</div><div class="line">        RX packets 10046643  bytes 1131705628 (1.0 GiB)</div><div class="line">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class="line">        TX packets 4182418  bytes 443990895 (423.4 MiB)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class="line">        device memory 0xdfd20000-dfd3ffff</div><div class="line"></div><div class="line">[root@node 17:16:45 ~]<span class="variable">$ifconfig</span> eno2</div><div class="line">eno2: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</div><div class="line">        ether 0c:c4:7a:0f:8f:69  txqueuelen 1000  (Ethernet)</div><div class="line">        RX packets 33333333  bytes 3331705628 (1.0 GiB)</div><div class="line">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class="line">        TX packets 3331705628  bytes 3331705628 (1.0 GiB)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class="line">        device memory 0xdfd00000-dfd1ffff</div></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>可以看到整体流程中流量占用网口情况，主要看 RX 和 TX packets 数量：</p><ol><li>故障前：eno1</li><li>故障后：eno2</li><li>故障恢复后：eno2</li></ol><p>在 OpenvSwitch Active-Backup 场景下，未支持 failback 功能，我理解是因为这两块网卡完全等价，failback 在 Master-Slave 场景下更有用一些。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在虚拟化场景下，我们经常使用  OpenvSwitch 进行虚拟网络配置，最近看到有人问，Open vSwitch 的 bonding 模式
      
    
    </summary>
    
    
      <category term="OpenvSwitch" scheme="http://zdyxry.com/tags/OpenvSwitch/"/>
    
  </entry>
  
  <entry>
    <title>cgroups 常用配置</title>
    <link href="http://zdyxry.com/2018/09/23/cgroups-%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://zdyxry.com/2018/09/23/cgroups-常用配置/</id>
    <published>2018-09-23T03:40:19.000Z</published>
    <updated>2018-09-23T03:41:51.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在软件运行过程中，我们经常需要限制 CPU 、内存、磁盘的使用，方式程序超出了限定边界范围。在 Linux 中，我们可以通过 cgroups 来进行限制。</p><h2 id="cgroups"><a href="#cgroups" class="headerlink" title="cgroups"></a>cgroups</h2><p>中文名称为控制组群，具体功能分类为：</p><ul><li>资源限制：组可以被设置不超过设定的内存限制；这也包括虚拟内存。</li><li>优先级：一些组可能会得到大量的CPU或磁盘IO吞吐量。</li><li>结算：用来衡量系统确实把多少资源用到适合的目的上。</li><li>控制：冻结组或检查点和重启动。</li></ul><p>下面来说下常见的使用方式</p><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>RedHat 官方文档中描述 cgroups 在 RHEL7/CentOS7 之后的版本需要通过 systemd 配置，不再使用 libcgconfig 方式。<br>但是在 systemd 的配置中，CPU 相关的配置项比较简单，或者说 OS 自动配置了很多，没有暴露出来。所以我们这里还是采用 libcgconfig 的配置方式。</p><p>在进行 CPU 限制之前，我们需要了解一下 NUMA 结构。什么是 NUMA？ NUMA 是一种为多处理器的计算机设计的内存，内存访问时间取决于内存相对于处理器的位置。在NUMA下，处理器访问它自己的本地内存的速度比非本地内存快一些。<br>不同的 Thread 在同一个 Core 上也会发生抢占情况，具体可以通过 sysbench 进行测试。</p><p>相关概念定义：</p><ol><li>Socket：物理服务器上的 CPU 插槽</li><li>Core：物理 CPU 核心数</li><li>Thread：超线程</li></ol><p>简单的说就是如果你的程序是计算密集型，那么尽可能的要让 CPU 限制在同一个 NUMA node 上。<br>查看 NUMA node 方式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">[root@<span class="built_in">test</span> 10:53:43 ~]<span class="variable">$numactl</span> -H</div><div class="line">available: 2 nodes (0-1)</div><div class="line">node 0 cpus: 0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30</div><div class="line">node 0 size: 65221 MB</div><div class="line">node 0 free: 52239 MB</div><div class="line">node 1 cpus: 1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31</div><div class="line">node 1 size: 65536 MB</div><div class="line">node 1 free: 57566 MB</div><div class="line">node distances:</div><div class="line">node   0   1</div><div class="line">  0:  10  21</div><div class="line">  1:  21  10</div></pre></td></tr></table></figure></p><p>这台服务器的配置为 2(socket) * <code>Intel(R) Xeon(R) Silver 4110 CPU @ 2.10GHz</code> ，内存为 128 GB。观察 NUMA node  分配，可以看到分为两个 node，分别为 node 0 和 node 1。<br>那么 <code>node $index cpus</code> 字段代表的是什么意思呢？ 在这里对应的是两个 socket ，也就是两个物理插槽上的 CPU 对应的 Thread。 Thread 排序方式是优先按照不同 Core 排序的，比如 Thread 0 在 Core 0 上，Thread 2 在 Core 1 上，以此类推。<br>具体的 CPU 配置大家可以通过 <code>lscpu</code> ， 或者查看 <code>/proc/cpuinfo</code> 了解。</p><p>根据 NUMA 配置，我们可以选择将程序限制在 Thread 0,2,4,6,8 上。<br>那么我们编辑配置文件 <code>/etc/cgconfig.conf</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[root@<span class="built_in">test</span> 11:03:45 ~]<span class="variable">$cat</span> /etc/cgconfig.conf |head -n 25</div><div class="line"><span class="comment"># yiran cgroups configuration</span></div><div class="line"></div><div class="line">group . &#123;</div><div class="line">    cpuset &#123;</div><div class="line">        cpuset.memory_pressure_enabled = <span class="string">"1"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">group yiran &#123;</div><div class="line">    cpuset &#123;</div><div class="line">        cpuset.cpus = <span class="string">"0,2,4,6,8"</span>;</div><div class="line">        cpuset.mems = <span class="string">"0-1"</span>;</div><div class="line">        cpuset.cpu_exclusive = <span class="string">"1"</span>;</div><div class="line">        cpuset.mem_hardwall = <span class="string">"1"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">group yiran/flask &#123;</div><div class="line">    cpuset &#123;</div><div class="line">        cpuset.cpus = <span class="string">"0,2,4"</span>;</div><div class="line">        cpuset.mems = <span class="string">"0-1"</span>;</div><div class="line">        cpuset.cpu_exclusive = <span class="string">"0"</span>;</div><div class="line">        cpuset.mem_hardwall = <span class="string">"1"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p> 首先，我们定义了一个组，组名叫 <code>yiran</code>，我们又在 <code>yiran</code> 下创建了一个叫 <code>flask</code> 的组，限制 CPU在 <code>0,2,4</code> 上。<br>接下来我们重启 cgconfig 相关服务，注意遵守重启顺序：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@<span class="built_in">test</span> 11:04:45 ~]systemctl restart cgconfig</div><div class="line">[root@<span class="built_in">test</span> 11:04:46 ~]systemctl restart cgred</div></pre></td></tr></table></figure></p><p>我们可以通过 lscgroup 检测配置是否生效，或者通过查看 <code>/proc/$pid/cgroup</code> 检查。</p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>相对于 CPU，内存配置我们可以直接通过 systemd 配置，就简化很多了。<br>最简单的，如果我们想立即配置一个服务的内存限制，我们可以直接执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@<span class="built_in">test</span> 11:05:50 ~]systemctl <span class="built_in">set</span>-property &lt;service name&gt; MemoryLimit=500M</div></pre></td></tr></table></figure></p><p>执行完这条命令后，系统会自动在该服务的 systemd 配置路径(<code>/etc/systemd/system/&lt;service name&gt;.d/</code> 下生成文件 <code>50-MemoryLimit.conf</code> ，文件内容为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[Slice]</div><div class="line">MemoryLimit=5368709120</div></pre></td></tr></table></figure></p><p>当然我们如果直接在该路径下编写配置文件也是可以的，重启服务后生效。</p><h4 id="Slice-配置"><a href="#Slice-配置" class="headerlink" title="Slice 配置"></a>Slice 配置</h4><p>上面这种方式只是针对单一的服务配置，如果我们想创建一个组，控制多个服务计算资源总和的配置，我们就需要通过配置 Slice 完成。</p><p><strong>slice</strong> —— 一组按层级排列的单位。slice 并不包含进程，但会组建一个层级，并将 scope 和 service 都放置其中。真正的进程包含在 scope 或 service 中。在这一被划分层级的树中，每一个 slice 单位的名字对应通向层级中一个位置的路径。小横线（”<code>-</code>“）起分离路径组件的作用。例如，如果一个 slice 的名字是：</p><p><em>parent</em>-<em>name</em>.<code>slice</code></p><p>这说明 <em>parent</em>-<em>name</em>.<code>slice</code> 是 <em>parent</em>.<code>slice</code> 的一个子 slice。这一子 slice 可以再拥有自己的子 slice，被命名为：<em>parent</em>-<em>name</em>-<em>name2</em>.<code>slice</code>，以此类推。</p><p>根 slice 的表示方式：<code>-.slice</code> </p><p>我们在 <code>/etc/systemd/system/</code> 下创建一个组，名称还是 <code>yiran</code> ，创建 <code>flask</code> 在 <code>yiran</code> 下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/etc/systemd/system</div><div class="line">├── flask.service.d</div><div class="line">│   └── cgroup.conf</div><div class="line">├── system-yiran.slice</div><div class="line">├── system-yiran.slice.d</div><div class="line">│   └── 50-MemoryLimit.conf</div></pre></td></tr></table></figure></p><p>配置完成后，我们重启 cgconfig 相关服务即可使能配置。</p><h3 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h3><p>如要降低 flask 服务读取某个目录 block IO 的权重，只需要修改该服务配置文件 增加 <code>BlockIODeviceWeight=/home/jdoe 750</code> 字段即可。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>日常用到最多的应该就是 CPU 和内存，如果很多对 IO 要求高的服务运行在一块磁盘上，那么可以先通过针对不同服务进行不同磁盘分区的方式（此方式不包括 lvm）验证，如果还不能解决的话，再考虑针对服务控制磁盘 IO。</p><p>为了追求性能，我们在 CPU 配置的时候给应用程序分配的 Thread 都位于同一个 Socket 上 CPU 的不同的 Core 上。 老板说还要考虑网卡、磁盘等 PCI 设备接入的 Socket ，如果应用程序分配在了 NUMA node0 上，但是网卡、磁盘等 PCI 设备连接在了 NUMA node1 上，还是会对性能有影响，还没找到相应配置，后续有时间再了解吧。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/resource_management_guide/" target="_blank" rel="external">https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/resource_management_guide/</a></li><li><a href="https://www.kernel.org/doc/Documentation/cgroup-v1/" target="_blank" rel="external">https://www.kernel.org/doc/Documentation/cgroup-v1/</a></li><li><a href="https://www.kernel.org/doc/Documentation/cgroup-v2.txt" target="_blank" rel="external">https://www.kernel.org/doc/Documentation/cgroup-v2.txt</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在软件运行过程中，我们经常需要限制 CPU 、内存、磁盘的使用，方式程序超出了限定边界范围。在 Linux 中，我们可以通过 cgroups
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://zdyxry.com/tags/Linux/"/>
    
      <category term="cgroups" scheme="http://zdyxry.com/tags/cgroups/"/>
    
  </entry>
  
  <entry>
    <title>基于zeroconf实现节点自发现</title>
    <link href="http://zdyxry.com/2018/08/22/%E5%9F%BA%E4%BA%8Ezeroconf%E5%AE%9E%E7%8E%B0%E8%8A%82%E7%82%B9%E8%87%AA%E5%8F%91%E7%8E%B0/"/>
    <id>http://zdyxry.com/2018/08/22/基于zeroconf实现节点自发现/</id>
    <published>2018-08-22T08:07:11.000Z</published>
    <updated>2018-08-25T00:54:38.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>通常我们使用联网的电子设备，都会配置一个 IP 地址用于通信，一般采用 DHCP 配置，DHCP 有<br>lease 时间，如果超过 lease 时间又没有续约的话，产生的 IP 地址有可能发生改变，那么如何<br>自动识别我们的设备呢？ ZeroConf 是一个好的选择。</p><h2 id="ZeroConf"><a href="#ZeroConf" class="headerlink" title="ZeroConf"></a>ZeroConf</h2><p>以下介绍摘录自维基百科：</p><blockquote><p>Zero-configuration networking (zeroconf) is a set of technologies that<br>automatically creates a usable computer network based on the<br>Internet Protocol Suite (TCP/IP) when computers or network peripherals are<br>interconnected. It does not require manual operator intervention or special<br>configuration servers. Without zeroconf, a network administrator must set up<br>network services, such as Dynamic Host Configuration Protocol (DHCP) and<br>Domain Name System (DNS), or configure each computer’s network settings manually.<br>Zeroconf is built on three core technologies: automatic assignment of numeric<br>network addresses for networked devices, automatic distribution and resolution<br>of computer hostnames, and automatic location of network services, such as printing devices.  </p></blockquote><p>简单来说我们可以通过 ZeroConf 进行服务自发现，日常使用最多的就是 Apple 家的产品及一些<br>打印设备。</p><h2 id="Avahi"><a href="#Avahi" class="headerlink" title="Avahi"></a>Avahi</h2><p>如果我们想要在 Linux 中使用的话，我们可以选择 Avahi，配合 nss-mdns 一起使用可以在复杂网络场景下自动发现服务器，并获取 IPv4 或 IPv6 地址进行通信。</p><h3 id="扫描节点安装"><a href="#扫描节点安装" class="headerlink" title="扫描节点安装"></a>扫描节点安装</h3><p>我们使用 yum 进行相应工具的安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install avahi-libs avahi-tools avahi-autoipd avahi nss-mdns</div></pre></td></tr></table></figure></p><h3 id="扫描节点配置"><a href="#扫描节点配置" class="headerlink" title="扫描节点配置"></a>扫描节点配置</h3><p>安装完成后，我们修改配置文件，开启 IPv6 配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">[root@yiran-pxe data]<span class="comment"># cat /etc/nsswitch.conf |grep -v ^# |grep -v ^$</span></div><div class="line">passwd:     files sss</div><div class="line">shadow:     files sss</div><div class="line">group:      files sss</div><div class="line">hosts:      files mdns4_minimal [NOTFOUND=<span class="built_in">return</span>] dns</div><div class="line">bootparams: nisplus [NOTFOUND=<span class="built_in">return</span>] files</div><div class="line">ethers:     files</div><div class="line">netmasks:   files</div><div class="line">networks:   files</div><div class="line">protocols:  files</div><div class="line">rpc:        files</div><div class="line">services:   files sss</div><div class="line">netgroup:   files sss</div><div class="line">publickey:  nisplus</div><div class="line">automount:  files</div><div class="line">aliases:    files nisplus</div><div class="line">[root@yiran-pxe data]<span class="comment"># cat /etc/avahi/avahi-daemon.conf  |grep -v ^# |grep -v ^$</span></div><div class="line">[server]</div><div class="line">use-ipv4=no</div><div class="line">use-ipv6=yes            <span class="comment">## 开启 IPv6 </span></div><div class="line">ratelimit-interval-usec=1000000</div><div class="line">ratelimit-burst=1000</div><div class="line">[wide-area]</div><div class="line"><span class="built_in">enable</span>-wide-area=yes</div><div class="line">[publish]</div><div class="line">[reflector]</div><div class="line">[rlimits]</div><div class="line">rlimit-core=0</div><div class="line">rlimit-data=4194304</div><div class="line">rlimit-fsize=0</div><div class="line">rlimit-nofile=768</div><div class="line">rlimit-stack=4194304</div><div class="line">rlimit-nproc=3</div></pre></td></tr></table></figure><p>配置完成后我们启动服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start avahi-daemon</div></pre></td></tr></table></figure></p><h3 id="被扫描节点配置"><a href="#被扫描节点配置" class="headerlink" title="被扫描节点配置"></a>被扫描节点配置</h3><p>扫描节点可以通过制定的域名进行扫描，我们可以通过给被扫描节点配置特殊的主机名称，来实现自动识别被扫描节点具体是什么类型的服务器，比如我们可以通过 ipmitool 获取 IPMI IP，并配置主机名为 <code>node-192-168-67-173</code> 来实现识别，具体操作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@node-192-168-67-173 ~]<span class="comment"># cat /etc/hostname </span></div><div class="line">node-192-168-67-173</div><div class="line">[root@node-192-168-67-173 ~]<span class="comment"># hostname -F /etc/hostname</span></div></pre></td></tr></table></figure></p><p>同样编辑 avahi 配置文件，开启 IPv6 配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[root@node-192-168-67-173 avahi]<span class="comment"># cat avahi-daemon.conf |grep -v ^# |grep -v ^$</span></div><div class="line">[server]</div><div class="line">use-ipv4=yes</div><div class="line">use-ipv6=yes</div><div class="line">ratelimit-interval-usec=1000000</div><div class="line">ratelimit-burst=1000</div><div class="line">[wide-area]</div><div class="line"><span class="built_in">enable</span>-wide-area=yes</div><div class="line">[publish]</div><div class="line">publish<span class="_">-a</span>-on-ipv6=yes</div><div class="line">[reflector]</div><div class="line">[rlimits]</div><div class="line">rlimit-core=0</div><div class="line">rlimit-data=4194304</div><div class="line">rlimit-fsize=0</div><div class="line">rlimit-nofile=768</div><div class="line">rlimit-stack=4194304</div><div class="line">rlimit-nproc=3</div></pre></td></tr></table></figure></p><p>启动 avahi 服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start avahi-daemon</div></pre></td></tr></table></figure></p><h3 id="扫描节点发现节点"><a href="#扫描节点发现节点" class="headerlink" title="扫描节点发现节点"></a>扫描节点发现节点</h3><p>我们可以通过 <code>avahi-tools</code> 提供的 avahi-brower 工具进行持续扫描：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@yiran-pxe data]<span class="comment"># avahi-browse -a</span></div><div class="line">+ eno33559296 IPv6 node-192-168-67-173 [24:6e:96:7c:50:70]       Workstation          <span class="built_in">local</span></div><div class="line">+ eno16780032 IPv6 node-192-168-67-173 [24:6e:96:7c:50:50]       Workstation          <span class="built_in">local</span></div></pre></td></tr></table></figure></p><p>可以看到我们在扫描节点已经发现了被扫描节点的信息，那么我们接下来获取具体的 IP 地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@yiran-pxe data]<span class="comment"># avahi-resolve --help </span></div><div class="line">avahi-resolve [options] -n &lt;host name ...&gt;</div><div class="line">avahi-resolve [options] -a &lt;address ... &gt;</div><div class="line"></div><div class="line">    -h --<span class="built_in">help</span>            Show this <span class="built_in">help</span></div><div class="line">    -V --version         Show version</div><div class="line">    -n --name            Resolve host name</div><div class="line">    -a --address         Resolve address</div><div class="line">    -v --verbose         Enable verbose mode</div><div class="line">    -6                   Lookup IPv6 address</div><div class="line">    -4                   Lookup IPv4 address</div><div class="line">[root@yiran-pxe data]<span class="comment"># avahi-resolve -n node-192-168-67-173.local -4</span></div><div class="line">node-192-168-67-173.local       127.0.0.1</div><div class="line">[root@yiran-pxe data]<span class="comment"># avahi-resolve -n node-192-168-67-173.local -6</span></div><div class="line">node-192-168-67-173.local       fe80::266e:96ff:fe7c:5070</div></pre></td></tr></table></figure><p>如果被扫描节点没有 IPv4 地址，则会显示 127.0.0.1，若有 IPv4 地址，则会正常显示。</p><h3 id="远程通信"><a href="#远程通信" class="headerlink" title="远程通信"></a>远程通信</h3><p>在得到具体的 IP 地址之后我们就可以按照上一篇博客提到的 IPv6 地址远程连接的方式进行通信了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@yiran-pxe data]<span class="comment"># ping6 fe80::266e:96ff:fe7c:5070%eno33559296</span></div><div class="line">PING fe80::266e:96ff:fe7c:5070%eno33559296(fe80::266e:96ff:fe7c:5070) 56 data bytes</div><div class="line">64 bytes from fe80::266e:96ff:fe7c:5070: icmp_seq=1 ttl=64 time=0.448 ms</div><div class="line">64 bytes from fe80::266e:96ff:fe7c:5070: icmp_seq=2 ttl=64 time=0.338 ms</div><div class="line">^C</div><div class="line">--- fe80::266e:96ff:fe7c:5070%eno33559296 ping statistics ---</div><div class="line">2 packets transmitted, 2 received, 0% packet loss, time 999ms</div><div class="line">rtt min/avg/max/mdev = 0.338/0.393/0.448/0.055 ms</div><div class="line">[root@yiran-pxe data]<span class="comment"># ssh fe80::266e:96ff:fe7c:5070%eno33559296</span></div><div class="line">root@fe80::266e:96ff:fe7c:5070%eno33559296<span class="string">'s password: </span></div><div class="line"><span class="string">Last login: Wed Aug 22 15:44:17 2018 from fe80::250:56ff:fe9f:ef9c%eno3</span></div><div class="line"><span class="string">[root@node-192-168-67-173 ~]# hostname</span></div><div class="line"><span class="string">node-192-168-67-173</span></div><div class="line"><span class="string">[root@node-192-168-67-173 ~]# logout</span></div><div class="line"><span class="string">Connection to fe80::266e:96ff:fe7c:5070%eno33559296 closed.</span></div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前 Linux 发行版本都自动安装了 Avahi 服务，大家可以启用，方便远程连接控制。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;通常我们使用联网的电子设备，都会配置一个 IP 地址用于通信，一般采用 DHCP 配置，DHCP 有&lt;br&gt;lease 时间，如果超过 le
      
    
    </summary>
    
    
      <category term="zeroconf" scheme="http://zdyxry.com/tags/zeroconf/"/>
    
  </entry>
  
  <entry>
    <title>Ansible 配置 IPv6 连接</title>
    <link href="http://zdyxry.com/2018/08/17/Ansible-%E9%85%8D%E7%BD%AE-IPv6-%E8%BF%9E%E6%8E%A5/"/>
    <id>http://zdyxry.com/2018/08/17/Ansible-配置-IPv6-连接/</id>
    <published>2018-08-17T05:43:40.000Z</published>
    <updated>2018-08-18T11:48:44.981Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>平时工作中因为通常需要远程操作较多 Linux 环境，引入了 Ansible，但是大都是通过 Ansible 远程命令的方式执行，少数的封装为 Playbook 也是很简单的配置。<br>最早的时候用过简单的 SaltStack，但是要安装 Agent，觉得不好用，在 16年早期的时候使用 Ansible，简单快捷（当然我对性能没有要求）。<br>最近需要把之前由 Shell &amp; Python 拼装的一个服务统一用 Ansible 进行重写，又花了些时间看了看相关文档。发现大家操作远程机器无论是通过秘钥还是通过密码，都是基于 IPv4 的地址链接的，而有些机器是没有 IPv4 地址的，于是花费了些时间验证 Ansible IPv6 配置方式。</p><h2 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h2><p>IPv6 维基百科的解释是：网际协议第6版（英文：Internet Protocol version 6，缩写：IPv6）是网际协议（IP）的最新版本，用作互联网的网络层协议，用它来取代IPv4主要是为了解决IPv4地址枯竭问题，不过它也在其他很多方面对IPv4有所改进。我们目前日常中使用的地址都是 IPv4 的地址（比如：192.168.1.1）。<br>使用 IPv6 有一个好处是，可以通过 NDP（Neighbor Discovery Protocol）扫描二层网络内的所有的 IPv6 地址，方便我们使用，那么我们如何判断 IPv6 是否可以连通呢？<br>可以通过 ping6 的方式判断，比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@node111 14:00:44 ~]<span class="variable">$ping6</span> fe80::2487:93ff:fe9a:c546%port-mgt</div><div class="line">PING fe80::2487:93ff:fe9a:c546%port-mgt(fe80::2487:93ff:fe9a:c546%port-mgt) 56 data bytes</div><div class="line">64 bytes from fe80::2487:93ff:fe9a:c546%port-mgt: icmp_seq=1 ttl=64 time=0.443 ms</div><div class="line">64 bytes from fe80::2487:93ff:fe9a:c546%port-mgt: icmp_seq=2 ttl=64 time=0.488 ms</div><div class="line">^C</div><div class="line">--- fe80::2487:93ff:fe9a:c546%port-mgt ping statistics ---</div><div class="line">2 packets transmitted, 2 received, 0% packet loss, time 1000ms</div><div class="line">rtt min/avg/max/mdev = 0.443/0.465/0.488/0.031 ms</div></pre></td></tr></table></figure></p><p>注意这里的 IPv6 的格式，前面是 IPv6 地址，后面是本地网络接口名称，如果是物理网卡则接物理网卡名称，如果是 OVS Port，则接 Port 名称。</p><p>既然地址可以连通，那么我们思考如何进行远程控制。</p><h2 id="SSH-远程连接"><a href="#SSH-远程连接" class="headerlink" title="SSH 远程连接"></a>SSH 远程连接</h2><p>通常我们通过 IPv4 地址链接远程 Linux，通过如下方式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@node111 14:01:23 ~]<span class="variable">$ssh</span> 192.168.30.112</div><div class="line">root@192.168.30.112<span class="string">'s password: </span></div><div class="line"><span class="string">Last login: Fri Aug 17 12:15:52 2018 from 192.168.16.1</span></div><div class="line"><span class="string">[root@node112 14:03:46 ~]$</span></div></pre></td></tr></table></figure></p><p>我们尝试将上面的 IPv4 地址替换为 IPv6 地址试试看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@node111 14:04:55 ~]<span class="variable">$ssh</span> fe80::2487:93ff:fe9a:c546</div><div class="line">ssh: connect to host fe80::2487:93ff:fe9a:c546 port 22: Invalid argument</div><div class="line">[root@node111 14:05:10 ~]$</div></pre></td></tr></table></figure><p>直接指定 IPv6 地址是无法识别的，那么我们按照 ping6 规则，加上网络接口名称试试看：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@node111 14:05:10 ~]<span class="variable">$ssh</span> fe80::2487:93ff:fe9a:c546%port-mgt</div><div class="line">root@fe80::2487:93ff:fe9a:c546%port-mgt<span class="string">'s password: </span></div><div class="line"><span class="string">Last login: Fri Aug 17 14:04:56 2018 from fe80::d4b7:acff:fe2f:604e%ovsbr-mgt</span></div><div class="line"><span class="string">[root@node112 14:03:46 ~]$</span></div></pre></td></tr></table></figure></p><p>一切顺利，我们成功的登录到了远程的机器上，我们知道 Ansible 是通过 SSH 的方式远程控制的，具体是调用 Python 的 (paramiko)[<a href="https://github.com/paramiko/paramiko/" target="_blank" rel="external">https://github.com/paramiko/paramiko/</a>] ，我们接下来配置 Ansible。</p><h2 id="Ansible-远程连接"><a href="#Ansible-远程连接" class="headerlink" title="Ansible 远程连接"></a>Ansible 远程连接</h2><p>Ansible Inventory 标准格式是：<code>IP  options</code> ，比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[cluster]</div><div class="line">fe80::58d3:16ff:fe43:ce77%port-mgt ansible_ssh_user=root ansible_ssh_pass=abc123</div></pre></td></tr></table></figure></p><p>验证 Ansible 远程控制：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@node111 14:11:14 ~]<span class="variable">$ansible</span> cluster -m raw -a <span class="string">'uptime'</span></div><div class="line">fe80::58d3:16ff:fe43:ce77%port-mgt | SUCCESS | rc=0 &gt;&gt;</div><div class="line"> 14:11:22 up 7 days, 23:15,  2 users,  load average: 1.55, 1.39, 1.23</div><div class="line">Shared connection to fe80::58d3:16ff:fe43:ce77%port-mgt closed.</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>只要注意在 IPv6 地址后加上本地网络接口名称就可以正确配置 IPv6 远程控制了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;平时工作中因为通常需要远程操作较多 Linux 环境，引入了 Ansible，但是大都是通过 Ansible 远程命令的方式执行，少数的封装
      
    
    </summary>
    
    
      <category term="Ansible" scheme="http://zdyxry.com/tags/Ansible/"/>
    
  </entry>
  
  <entry>
    <title>Pure Bash Bible</title>
    <link href="http://zdyxry.com/2018/08/11/Pure-Bash-Bible/"/>
    <id>http://zdyxry.com/2018/08/11/Pure-Bash-Bible/</id>
    <published>2018-08-11T03:06:55.000Z</published>
    <updated>2018-08-11T03:29:52.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>逛 Github Trending 的时候，发现一个叫 <a href="https://github.com/dylanaraps/pure-bash-bible" target="_blank" rel="external">pure bash bible</a> 的项目，这个项目主要是介绍一些常用功能的 Bash 实现。<br>在日常使用中，Bash 作为大部分 Linux 发行版的默认 Shell 是使用最多的，尤其是进行一些简单的自动处理事件上很方便。但是我使用的时候通常会用 Bash、Sed、Awk、cut、timeout 等一些 Linux 命令相互配合使用。<br>如果你要维护的 Server 是一个比较少见的版本，比如：ESXi 5.0、XenServer 6.0 等版本，那么就会导致有些命令是缺失的，且无法安装，这时候就需要单独使用 Bash 来实现一些其他命令的功能。<br><code>pure bash bible</code> 这个项目列举了很多常用常用功能，有一些比较有借鉴意义，在此记录。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="删除字符串前后空格"><a href="#删除字符串前后空格" class="headerlink" title="删除字符串前后空格"></a>删除字符串前后空格</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">trim_string（）&#123; <span class="comment"># Ups：trim_string“example string” </span></div><div class="line">    ： “ $ &#123;1 ＃” $ &#123;1 %% [！[：space：]] * &#125; “ &#125; ”</div><div class="line">    ： “ $ &#123;_ ％” $ &#123;_ <span class="comment">## * [！[：space：]]&#125; “ &#125; ”</span></div><div class="line">     <span class="built_in">printf</span>  <span class="string">'％s \ n '</span>  “ $ _ ” &#125;</div><div class="line">$ trim_string “ Hello，World ” </div><div class="line">Hello, World</div><div class="line">$ name = “ John Black ” $ trim_string “ $ name ” John Black</div></pre></td></tr></table></figure><h3 id="删除字符串中所有空格"><a href="#删除字符串中所有空格" class="headerlink" title="删除字符串中所有空格"></a>删除字符串中所有空格</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># shellcheck disable=SC2086,SC2048</span></div><div class="line"><span class="function"><span class="title">trim_all</span></span>() &#123;</div><div class="line">    <span class="comment"># Usage: trim_all "   example   string    "</span></div><div class="line">    <span class="built_in">set</span> -f</div><div class="line">    <span class="built_in">set</span> -- $*</div><div class="line">    <span class="built_in">printf</span> <span class="string">'%s\n'</span> <span class="string">"$*"</span></div><div class="line">    <span class="built_in">set</span> +f</div><div class="line">&#125;</div><div class="line">$ trim_all <span class="string">"    Hello,    World    "</span></div><div class="line">Hello, World</div><div class="line"></div><div class="line">$ name=<span class="string">"   John   Black  is     my    name.    "</span></div><div class="line">$ trim_all <span class="string">"<span class="variable">$name</span>"</span></div><div class="line">John Black is my name.</div></pre></td></tr></table></figure><h3 id="根据指定分隔符分隔字符串"><a href="#根据指定分隔符分隔字符串" class="headerlink" title="根据指定分隔符分隔字符串"></a>根据指定分隔符分隔字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">split() &#123;</div><div class="line">   # Usage: split &quot;string&quot; &quot;delimiter&quot;</div><div class="line">   IFS=$&apos;\n&apos; read -d &quot;&quot; -ra arr &lt;&lt;&lt; &quot;$&#123;1//$2/$&apos;\n&apos;&#125;&quot;</div><div class="line">   printf &apos;%s\n&apos; &quot;$&#123;arr[@]&#125;&quot;</div><div class="line">&#125;</div><div class="line">$ split &quot;apples,oranges,pears,grapes&quot; &quot;,&quot;</div><div class="line">apples</div><div class="line">oranges</div><div class="line">pears</div><div class="line">grapes</div><div class="line"></div><div class="line">$ split &quot;1, 2, 3, 4, 5&quot; &quot;, &quot;</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line"></div><div class="line"># Multi char delimiters work too!</div><div class="line">$ split &quot;hello---world---my---name---is---john&quot; &quot;---&quot;</div><div class="line">hello</div><div class="line">world</div><div class="line">my</div><div class="line">name</div><div class="line">is</div><div class="line">john</div></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">reverse_array</span></span>() &#123;</div><div class="line">    <span class="comment"># Usage: reverse_array "array"</span></div><div class="line">    <span class="built_in">shopt</span> -s extdebug</div><div class="line">    f()(<span class="built_in">printf</span> <span class="string">'%s\n'</span> <span class="string">"<span class="variable">$&#123;BASH_ARGV[@]&#125;</span>"</span>); f <span class="string">"<span class="variable">$@</span>"</span></div><div class="line">    <span class="built_in">shopt</span> -u extdebug</div><div class="line">&#125;</div><div class="line">$ reverse_array 1 2 3 4 5</div><div class="line">5</div><div class="line">4</div><div class="line">3</div><div class="line">2</div><div class="line">1</div><div class="line"></div><div class="line">$ arr=(red blue green)</div><div class="line">$ reverse_array <span class="string">"<span class="variable">$&#123;arr[@]&#125;</span>"</span></div><div class="line">green</div><div class="line">blue</div><div class="line">red</div></pre></td></tr></table></figure><h3 id="删除重复项"><a href="#删除重复项" class="headerlink" title="删除重复项"></a>删除重复项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">remove_array_dups</span></span>() &#123;</div><div class="line">    <span class="comment"># Usage: remove_array_dups "array"</span></div><div class="line">    <span class="built_in">declare</span> -A tmp_array</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span>; <span class="keyword">do</span></div><div class="line">        [[ <span class="string">"<span class="variable">$i</span>"</span> ]] &amp;&amp; IFS=<span class="string">" "</span> tmp_array[<span class="string">"<span class="variable">$&#123;i:- &#125;</span>"</span>]=1</div><div class="line">    <span class="keyword">done</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span> <span class="string">'%s\n'</span> <span class="string">"<span class="variable">$&#123;!tmp_array[@]&#125;</span>"</span></div><div class="line">&#125;</div><div class="line">$ remove_array_dups 1 1 2 2 3 3 3 3 3 4 4 4 4 4 5 5 5 5 5 5</div><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line"></div><div class="line">$ arr=(red red green blue blue)</div><div class="line">$ remove_array_dups <span class="string">"<span class="variable">$&#123;arr[@]&#125;</span>"</span></div><div class="line">red</div><div class="line">green</div><div class="line">blue</div></pre></td></tr></table></figure><h3 id="随机选择"><a href="#随机选择" class="headerlink" title="随机选择"></a>随机选择</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">random_array_element</span></span>() &#123;</div><div class="line">    <span class="comment"># Usage: random_array_element "array"</span></div><div class="line">    <span class="built_in">local</span> arr=(<span class="string">"<span class="variable">$@</span>"</span>)</div><div class="line">    <span class="built_in">printf</span> <span class="string">'%s\n'</span> <span class="string">"<span class="variable">$&#123;arr[RANDOM % $#]&#125;</span>"</span></div><div class="line">&#125;</div><div class="line">$ array=(red green blue yellow brown)</div><div class="line">$ random_array_element <span class="string">"<span class="variable">$&#123;array[@]&#125;</span>"</span></div><div class="line">yellow</div><div class="line"></div><div class="line"><span class="comment"># Multiple arguments can also be passed.</span></div><div class="line">$ random_array_element 1 2 3 4 5 6 7</div><div class="line">3</div></pre></td></tr></table></figure><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="获取文件绝对路径"><a href="#获取文件绝对路径" class="headerlink" title="获取文件绝对路径"></a>获取文件绝对路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">dirname</span></span>() &#123;</div><div class="line">    <span class="comment"># Usage: dirname "path"</span></div><div class="line">    <span class="built_in">printf</span> <span class="string">'%s\n'</span> <span class="string">"<span class="variable">$&#123;1%/*&#125;</span>/"</span></div><div class="line">&#125;</div><div class="line">$ dirname ~/Pictures/Wallpapers/1.jpg</div><div class="line">/home/black/Pictures/Wallpapers/</div><div class="line"></div><div class="line">$ dirname ~/Pictures/Downloads/</div><div class="line">/home/black/Pictures/</div></pre></td></tr></table></figure><h3 id="获取文件相对路径"><a href="#获取文件相对路径" class="headerlink" title="获取文件相对路径"></a>获取文件相对路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">basename</span></span>() &#123;</div><div class="line">    <span class="comment"># Usage: basename "path"</span></div><div class="line">    : <span class="string">"<span class="variable">$&#123;1%/&#125;</span>"</span></div><div class="line">    <span class="built_in">printf</span> <span class="string">'%s\n'</span> <span class="string">"<span class="variable">$&#123;_##*/&#125;</span>"</span></div><div class="line">&#125;</div><div class="line">$ basename ~/Pictures/Wallpapers/1.jpg</div><div class="line">1.jpg</div><div class="line"></div><div class="line">$ basename ~/Pictures/Downloads/</div><div class="line">Downloads</div></pre></td></tr></table></figure><h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><h3 id="打印进度条"><a href="#打印进度条" class="headerlink" title="打印进度条"></a>打印进度条</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">bar</span></span>() &#123;</div><div class="line">    <span class="comment"># Usage: bar 1 10</span></div><div class="line">    <span class="comment">#            ^----- Elapsed Percentage (0-100).</span></div><div class="line">    <span class="comment">#               ^-- Total length in chars.</span></div><div class="line">    ((elapsed=<span class="variable">$1</span>*<span class="variable">$2</span>/100))</div><div class="line"></div><div class="line">    <span class="comment"># Create the bar with spaces.</span></div><div class="line">    <span class="built_in">printf</span> -v prog  <span class="string">"%<span class="variable">$&#123;elapsed&#125;</span>s"</span></div><div class="line">    <span class="built_in">printf</span> -v total <span class="string">"%<span class="variable">$(($2-elapsed)</span>)s"</span></div><div class="line"></div><div class="line">    <span class="built_in">printf</span> <span class="string">'%s\r'</span> <span class="string">"[<span class="variable">$&#123;prog// /-&#125;</span><span class="variable">$&#123;total&#125;</span>]"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> ((i=0;i&lt;=100;i++)); <span class="keyword">do</span></div><div class="line">    <span class="comment"># Pure bash micro sleeps (for the example).</span></div><div class="line">    (:;:) &amp;&amp; (:;:) &amp;&amp; (:;:) &amp;&amp; (:;:) &amp;&amp; (:;:)</div><div class="line"></div><div class="line">    <span class="comment"># Print the bar.</span></div><div class="line">    bar <span class="string">"<span class="variable">$i</span>"</span> <span class="string">"10"</span></div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line"><span class="built_in">printf</span> <span class="string">'\n'</span></div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>感觉平时很难用到这么诡异的 Bash 语法的。。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;逛 Github Trending 的时候，发现一个叫 &lt;a href=&quot;https://github.com/dylanaraps/pur
      
    
    </summary>
    
    
      <category term="Bash" scheme="http://zdyxry.com/tags/Bash/"/>
    
  </entry>
  
</feed>
