<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yiran&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zdyxry.github.io/"/>
  <updated>2022-11-07T02:06:46.846Z</updated>
  <id>https://zdyxry.github.io/</id>
  
  <author>
    <name>yiran</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Weekly Issue 2022-11-06</title>
    <link href="https://zdyxry.github.io/2022/11/06/Weekly-Issue-2022-11-06/"/>
    <id>https://zdyxry.github.io/2022/11/06/Weekly-Issue-2022-11-06/</id>
    <published>2022-11-06T23:50:00.000Z</published>
    <updated>2022-11-07T02:06:46.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://jiajunhuang.com/articles/2022_10_31-goconvey.md.html" target="_blank" rel="noopener">编写可维护的单元测试代码</a><br>介绍 GoConvey 和 testify 两种单测框架。公司内部用 Ginkgo 比较多。</p><hr><p><a href="https://blog.cloudflare.com/zh-cn/partial-cloudflare-outage-on-october-25-2022-zh-cn/" target="_blank" rel="noopener">2022 年 10 月 25 日 Cloudflare 服务部分故障</a><br>[[CloudFlare]] 故障复盘，在引入 opentracing 时清理了部分 header 信息，导致上游逻辑判断错误。</p><hr><p><a href="https://brooker.co.za/blog/2022/10/21/nudge.html" target="_blank" rel="noopener">Give Your Tail a Nudge</a><br>[[Nudge]] 对于 [[FCFS]] 的优化：</p><blockquote><p>The intuition behind the Nudge algorithm is that we’d like to basically stick to FCFS, which we know is great for handling the extreme tail (high 𝑡), while at the same time incorporating a little bit of prioritization of small jobs, which we know can be helpful for the mean and lower 𝑡.</p></blockquote><blockquote><p>However, when a “small” job arrives and finds a “large” job immediately ahead of it in the queue, we swap the positions of the small and large job in the queue. The one caveat is that a job which has already swapped is ineligible for further swaps.</p></blockquote><hr><p><a href="https://engineering.razorpay.com/what-goes-behind-managing-production-alerts-204f186ce865" target="_blank" rel="noopener">Ops to Bots — Smartening incident recovery</a><br>通过构建 Bot 来标准化事件处理流程，降低 MTTD(Mean time to Detect) 和 MTTE(Mean time to Engage) 时间。</p><hr><p><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="noopener">命令行的艺术</a><br>了解一些工具的使用可以让工作效率提高一些，大部分都很常用，小部分可以随用随查。</p><blockquote><p>在 Bash 中，同时重定向标准输出和标准错误：<code>some-command &gt;logfile 2&gt;&amp;1</code> 或者 <code>some-command &amp;&gt;logfile</code>。通常，为了保证命令不会在标准输入里残留一个未关闭的文件句柄捆绑在你当前所在的终端上，在命令后添加 <code>&lt;/dev/null</code> 是一个好习惯。</p></blockquote><hr><p><a href="https://kracekumar.com/post/micro-benchmark-python-311/" target="_blank" rel="noopener">Python 3.11 micro-benchmark</a><br>[[Python]] 3.11 发布说明提到有不小的性能提升： “Python 3.11 is between 10-60% faster than Python 3.10. On average, we measured a 1.25x speedup on the standard benchmark suite. See <a href="https://docs.python.org/3/whatsnew/3.11.html#whatsnew311-faster-cpython" target="_blank" rel="noopener">Faster CPython</a> for details.”，作者针对一些常见场景进行了性能测试对比。</p><hr><p><a href="https://blog.last9.io/why-mttr-should-be-a-business-metric/" target="_blank" rel="noopener">Why MTTR should be a ‘business’ metric</a>   </p><blockquote><p>Ex: A practice from Last9 I love: 2 day auto-delete messages on personal DMs in slack, because you want to control the spread of tribal knowledge; forcing engineers to talk on public slack channels. (Full disclosure: I’m an investor in <a href="https://bit.ly/3VnLp2k" target="_blank" rel="noopener">Last9</a>)</p></blockquote><hr><p><a href="https://blocksandfiles.com/2022/11/01/backblaze-disk-drives/" target="_blank" rel="noopener">Backblaze: Buying less reliable disk drives can make financial sense</a>   </p><blockquote><p>如果您对优化云存储平台的效率感兴趣，那么对这种模型的需求对我们的业务很重要。否则，仅仅通过机器人购买最昂贵或最便宜的驱动器就会对分类账的费用部分视而不见。</p></blockquote><hr><p><a href="https://www.groundcover.com/blog/murre" target="_blank" rel="noopener">Murre - the lightweight K8s metrics monitoring tool</a><br>通过从 [[kubelet]] 直接获取 metric 来展示给用户，轻量的 [[kubernetes]] top.</p><hr><p><a href="https://iximiuz.com/en/posts/ssh-tunnels/" target="_blank" rel="noopener">A Visual Guide to SSH Tunnels (with labs)</a><br>[[SSH]] Tunnel 介绍。(把事情讲明白是一种能力啊)</p><hr><p><a href="https://farer.org/2021/04/21/go-dependency-injection-wire/" target="_blank" rel="noopener">理解一下依赖注入，以及如何用wire</a><br>通过 <code>google/wire</code> 实现 [[依赖注入]]。</p><hr><p><a href="https://medium.com/@ElizAyer/nobody-could-have-known-inclusive-behaviors-to-counter-a-culture-of-short-termism-cf662e1bab26" target="_blank" rel="noopener">“Nobody could have known”: inclusive behaviors to counter short-termism | by Elizabeth Ayer | Oct, 2022 | Medium</a><a href="https://thenewstack.io/there-is-no-shame-in-customer-reported-incidents/" target="_blank" rel="noopener">There Is No Shame in Customer-Reported Incidents - The New Stack</a><br>给客户呈现完整实时的事件报告，可以建立用户信任，这里的前提应该不是 P0/P1 级别的故障。<br>当客户遇到故障后，应该：最快更新问题状态、持续沟通、承担责任。“honesty is the best policy”</p><hr><p><a href="https://jiajunhuang.com/articles/2022_11_04-grpc_error_handling.md.html" target="_blank" rel="noopener">Golang gRPC 错误处理 - Jiajun的编程随想</a><br>通过在 [[grpc]] 中间件将自定义错误转换为对应业务码，同时支持 gRPC 和 HTTP 状态码。</p><hr><p><a href="https://medium.com/@snassr/processing-large-files-in-go-golang-6ea87effbfe2" target="_blank" rel="noopener">Processing Large Files with Go (Golang) | by snassr | Oct, 2022 | Medium</a><br>使用 [[Golang]] 通过 [[goroutine]] 和 [[channel]] 并行处理大文件。</p><hr><p><a href="https://coder.com/blog/go-leak-mysteries" target="_blank" rel="noopener">HTTP Resource Leak Mysteries in Go - Coder</a><br>[[Golang]] 内存泄漏调查，原因是没有执行 <code>response.Body.Close()</code></p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://reorx.com/essays/2022/10/get-away-from-china-saas/" target="_blank" rel="noopener">离开国产 SaaS</a><br>大部分时候不敢用国内的服务。</p><hr><p><a href="https://www.karlsutt.com/articles/communicating-effectively-as-a-developer/" target="_blank" rel="noopener">How to communicate effectively as a developer</a><br>换位思考，尽可能的详细的描述清楚所要表达的内容，在多人协作过程中体现的很明显。虽然很多时候自嘲每天都写小作文，但是小作文带来的优势是很久之后重新阅读相关的回复，可以很快的了解上下文，节省了不少时间。</p><hr><p><a href="https://xuanwo.io/reports/2022-43/" target="_blank" rel="noopener">2022-43: 工作中的自我调适</a>   </p><blockquote><p>工作热情高涨的时候总是会提出各种宏大的重构方案和计划功能，遇到的各种挑战和困难感觉都不是个事儿；但是在低迷的时候就感觉千头万绪无从下手，很难鼓起勇气去开始第一步，充满了挫折感以及失败感。为了缓解这种情绪，我选择先把这些特别大的计划暂停下，从一些细小而具体的工作着手，通过稳定的交付来恢复自己的感觉。<br>工作中遇到状态不好的时候可以尝试从外部环境和工作本身两个方面进行调整，跟自己的朋友和爱人多聊天，积极调适坚持度过。祝愿大家都能早日走出难捱的时光，好日子还在后头哪～</p></blockquote><hr><p><a href="http://bboczeng.blogspot.com/2013/02/blog-post.html" target="_blank" rel="noopener">BO ZENG BBOC, My Escondido: 互联网的庸众</a>   </p><blockquote><p>虚拟社交这是一场浩大的社会实验，成本是作者的激情，代价是观众的生命和时间。</p></blockquote><hr><p><a href="https://clay.earth/" target="_blank" rel="noopener">Clay - Be more thoughtful with the people in your network.</a><br>[[Clay]] 是面向个人用户的 [[CRM]]。肯能有人觉得有些“功利”，但是人际关系是需要认真维护的。</p><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《100 Go Mistakes and How to Avoid Them》 ，本周读了10个，推荐阅读。</p><p>《边缘世界 第一季》，有一种要烂尾的趋势。</p><p>《乐透大作战》，韩式喜剧，破记录都是有原因的。</p><p>《孤单又灿烂的神：鬼怪》，终于看完了，不得不说，现在的韩剧水平距离 2015/2016 年真的差太多了。</p>]]></content>
    
    <summary type="html">
    
      虚拟社交这是一场浩大的社会实验，成本是作者的激情，代价是观众的生命和时间。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-10-30</title>
    <link href="https://zdyxry.github.io/2022/10/30/Weekly-Issue-2022-10-30/"/>
    <id>https://zdyxry.github.io/2022/10/30/Weekly-Issue-2022-10-30/</id>
    <published>2022-10-30T23:50:00.000Z</published>
    <updated>2022-11-07T02:06:46.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://www.zlovezl.cn/articles/stmt-expr-and-walrus-operator/" target="_blank" rel="noopener">Python 工匠：语句、表达式和海象操作符</a></p><p>关于复制表达式的使用场景介绍。</p><ul><li>如果是一个私人脚本，也许我会愿意把代码写成上面那样。但在多人参与的真实项目里，我目前可能更愿意用一段平平无奇的 <code>for</code> 循环替代它。很多时候，相比“聪明”的代码，“笨”代码才是我们更需要的东西，它们能为项目的参与者省去许多沟通和维护上的成本。</li></ul><hr><p><a href="https://coolshell.cn/articles/17998.html" target="_blank" rel="noopener">LINUX PID 1 和 SYSTEMD</a></p><p>关于 init 进程的演进。</p><hr><p><a href="https://engineering.salesforce.com/how-salesforce-built-a-cloud-native-task-execution-service/" target="_blank" rel="noopener">How Salesforce Built a Cloud-Native Task Execution Service</a></p><p>关于 [[Salesforce]] 的 [[Hyperforce]] 介绍。</p><hr><p><a href="https://crossoverjie.top/2022/10/24/gscript/gscript11-closure/" target="_blank" rel="noopener">深入（彻底）理解闭包实现原理</a></p><p>使用 Golang 来讲解闭包。</p><hr><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://www.reddit.com/r/sre/comments/xi9fku/a_real_day_in_the_life_of_an_sre_we_have_all_seen/" target="_blank" rel="noopener">A “real” day in the life of an SRE.</a></p><blockquote><p>I decide to take a break for breakfast. I am a little annoyed with myself for not having got any ‘real’ work done before my first break. But this is how it goes sometimes.</p></blockquote><hr><p><a href="https://chinese.freecodecamp.org/news/how-to-google-like-a-pro-10-tips-for-effective-googling/" target="_blank" rel="noopener">如何像专家一样高效使用 Google 搜索</a></p><p>Google搜索技巧，大部分都是已知的，<code>AFTER</code> 和 <code>AND/OR</code> 之前没用过。</p><hr><p><a href="https://twitter.com/marcushkheroes/status/1585238972795858945" target="_blank" rel="noopener">埃及见闻</a></p><blockquote><p>如果我没记错的话，穆斯林里两大罪，一个是欺骗，一个是背叛。但一路走下来，穆斯林世界里充满了欺骗和背叛，一方面和他们的宗教改革失败有关，一方面还是因为贫穷——至少在迪拜就没被宰过，虽然不便宜，但贵有贵的道理。</p></blockquote><hr><p><a href="https://tumutanzi.com/archives/16930" target="_blank" rel="noopener">老板是不会有错的</a></p><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《100 Go Mistakes and How to Avoid Them》 ，刚开始读。</p><p>《边缘世界 第一季》，不错，希望不要烂尾。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-10-23</title>
    <link href="https://zdyxry.github.io/2022/10/23/Weekly-Issue-2022-10-23/"/>
    <id>https://zdyxry.github.io/2022/10/23/Weekly-Issue-2022-10-23/</id>
    <published>2022-10-23T23:50:00.000Z</published>
    <updated>2022-11-07T02:06:46.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://blog.codingnow.com/2022/10/telecom_ipv6.html" target="_blank" rel="noopener">电信宽带 ipv6 折腾记</a></p><p>运营商配置变化太快。</p><hr><p><a href="https://medium.com/blablacar/be-lean-go-far-leveraging-kubernetes-for-an-elastic-right-sized-platform-bc1179c4c784" target="_blank" rel="noopener">Be Lean, Go Far: leveraging Kubernetes for an elastic right-sized platform</a></p><p>将业务迁移到 kubernetes 后所做的资源分配调度优化，需要 GKE 背景知识。</p><blockquote><p>You can only improve what you measure</p></blockquote><hr><p><a href="https://githubcopilotinvestigation.com/#" target="_blank" rel="noopener">GitHub Copi­lot inves­ti­ga­tion</a></p><p>关于 [[github]] [[copilot]] 调查，除了讨论[[copilot]] 会导致开源协议的错误引入之外，还讨论 [[copilit]] 让用户只关心自己想要的内容(代码)，而不关心背后的社区。</p><hr><p><a href="https://typefuture.com/web-stack/" target="_blank" rel="noopener">Web 玩具项目技术栈</a></p><p>采用 [[Next.js]] [[Supabase]] [[Fly.io]] 运行个人项目，成本为0 。</p><hr><p><a href="https://farseerfc.me/followup-about-swap.html" target="_blank" rel="noopener">关于swap 的一些补充</a></p><p>误解1: swap 是虚拟内存，虚拟内存肯定比物理内存慢嘛<br>误解2: 但是没有交换区的话，虚拟内存地址都有物理内存对应嘛<br>误解3： 不是内存快用完的时候才会交换的么？惰性分配有什么好处？那么内核什么时候会开始回收内存？</p><hr><p><a href="https://world.hey.com/dhh/why-we-re-leaving-the-cloud-654b47e0" target="_blank" rel="noopener">Why we’re leaving the cloud</a></p><p>Basecamp 谈论为什么不使用公有云。AWS 利润率达到 30%。<br>之前阅读过类似的文章：<br><a href="https://specbranch.com/posts/one-big-server/" target="_blank" rel="noopener">Use One Big Server</a><br><a href="https://devops.com/the-curious-connection-between-cloud-repatriation-and-sre-ops/" target="_blank" rel="noopener">The Curious Connection Between Cloud Repatriation and SRE Ops</a></p><hr><p><a href="https://github.com/notepad-plus-plus/notepad-plus-plus/issues/12324#issuecomment-1286360079" target="_blank" rel="noopener">Someone violated your copyright license</a></p><p>NotePad++ 作者针对 NotepadFree 回应：</p><blockquote><p>因為我行使我的言論自由而遭致 Notepad++ 在中國無法被下載。<br>而開發 Notepad++ 的初衷是提供分享免費的文字與原始碼編輯軟體給任何電腦從事人員 (Software, IT ppl, etc…)，當然也抱括中國電腦從事人員。我的重點是，即便我不願意讓這些中國極端的民族主義者使用 Notepad++，並非所有的中國人都是如此。被複刻的 Notepad++，不論其動機如何，它可以通過中國政府的審查機制而提供中國電腦從事人員使用 Notepad++ 的可能，無論它的名稱為何。而「讓任何人使用」是 GPL 自由軟體的真髓，也是我開發 Notepad++ 的初衷 。</p></blockquote><hr><p><a href="https://liqiang.io/post/2AWBmQUGDn0byF6baiSXUBQ3spfqZBb3" target="_blank" rel="noopener">Mac 环境下管理多套 Go 版本</a></p><p>可以使用 brew 和 Goland 管理，我使用 goenv 来管理多个版本，在切换版本的时候需要注意 GOPATH 环境变量设置。</p><hr><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://catcoding.me/p/unconscious-bias/" target="_blank" rel="noopener">无意识偏见</a></p><blockquote><p>人们通常会对自己的受歧视经历印象深刻，但如果你是歧视者，就会自己做出的歧视行为毫无知觉，大多数人会难以发现自己带着习惯形成的偏见。正如耗子所说，偏见不止是对他人会造成伤害，对自己的认知和进步也会形成阻碍。比如技术上的偏见，抛去应用场景和需求谈技术栈，就会让自己的偏见无意识占了主导，从而做出不好的选择。 <strong>我认为偏见主要是会扼杀了好奇心和求知欲，当你把一个对立的标签贴上之后，就认为自己已经足够了解，从而会丢掉去了解的好奇心和动力。</strong></p></blockquote><hr><p><a href="https://strrl.dev/post/weekly-report/2022/41-%E7%88%AC%E5%B1%B1%E4%B8%8A%E7%98%BE/" target="_blank" rel="noopener">2022-41: 爬山上瘾</a></p><blockquote><p>网上找了个懒人整合包, 跑起来以后发现自己脑子里根本没有啥关键词. 也没画出啥可爱的东西</p></blockquote><p>时常感觉自己的思维完全被局限住，没有想象力。</p><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《毫无意义的工作》：<a href="https://zdyxry.github.io/2022/10/22/%E3%80%8A%E6%AF%AB%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E5%B7%A5%E4%BD%9C%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/">读书笔记</a></p><p>《救赎之队：2008美国男篮奥运梦》： 充满了回忆，看完可以理解 03年选秀为什么关系不错。</p><p>《棒球大联盟》：好久没看这么好看的剧了，但是直到最后都没打一场比赛让我不爽。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>《毫无意义的工作》读书笔记</title>
    <link href="https://zdyxry.github.io/2022/10/22/%E3%80%8A%E6%AF%AB%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E5%B7%A5%E4%BD%9C%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://zdyxry.github.io/2022/10/22/《毫无意义的工作》读书笔记/</id>
    <published>2022-10-22T13:00:00.000Z</published>
    <updated>2022-11-07T02:06:46.862Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Q：Why？为什么要读这本书？  <ul><li>在豆瓣看到过有人推荐，之前阅读过 《工作、消费主义和新穷人》来对工作、消费背后的介绍产生了兴趣。  </li></ul></li><li>Q：Who？这本书是谁写的？  <ul><li>大卫·格雷伯（David Graeber），美国著名人类学家、社会学家，“占领华尔街”主要参与者，先后任耶鲁大学副教授、伦敦政治经济学院教授，师承人类学家马歇尔·萨林斯。出版有《债：5000年债务史》，受到《21世纪资本论》作者托马斯·皮凯蒂的高度赞誉。  </li></ul></li><li>Q：What？这本书讲了什么？这是哪类书？用一句话或一段话概述整本书的内容。  <ul><li>讲解什么是狗屁工作，狗屁工作的分类、成因、影响以及如何应对。  </li></ul></li><li>Q：将书中重要篇章列举出来，它们是如何组成整体的架构的？  <ul><li>1-2章节讲解了狗屁工作的定义和分类，3-5 章节讲解狗屁工作对个人和社会的影响，6-7章节讲解如何应对狗屁工作。  </li></ul></li><li>Q：有没有重要的概念或者关键词你想在这里强调一下？  <ul><li>“狗屁工作的核心：虚伪和无目标感”  </li><li>“第一，工作带给人最重要的东西一是金钱，以便支付各种账单开销，二是给世界做出积极贡献的机会；第二，以上两者成反比，即你的工作越是对他人有帮助、有好处，带来的社会价值越高，那么这份工作带给你的酬劳往往就越低。”  </li><li>“人类工作越来越辛苦是因为人类创造了某种奇怪的施虐受虐逻辑论证法，通过这种逻辑论证，我们觉得只有在工作时不断感受痛苦，才能赋予我们那些隐秘的消费主义愉悦感以合理性。在这种理念的驱使下，工作占据了我们越来越多的时间，于是人们不再享有“生活”这件奢侈品”  </li></ul></li><li>Q：How？这本书提供了什么行动建议？有什么方法或观点是可以实际在生活中使用的？  <ul><li>生活中尽量摆脱虚伪，无论目标是明确的还是模糊的，让自己有一个目标。  </li></ul></li><li>Q：Think？读完这本书有什么感想，是否同意作者观点？是否有疑问？  <ul><li>判定自己是否在从事狗屁工作，是否真的创造价值以及价值的体现，只能通过主观判定，不需要他人评判。同样很多人对”效率“的追求可能是虚假的，因为效率的提高可能会导致他本身的价值降低。之前看到豆瓣上有一个”FIRE生活“ 小组，里面的人追求的是一定程度的财富自由之后，做一些自己想做的事情，来享受生活，如果从创造价值的角度考虑，这类人创造了什么社会价值么？在保持低物欲的极简生活状态下，他们可能也是不受社会欢迎的”新穷人“吧。获取这个问题就不应该存在，不在意创造价值？  </li></ul></li><li>Q：Todo？读完这本书之后，有什么需要做得事情么？  <ul><li>对能说出”工作是良药，能医治一切困扰人的疾苦。“ 的托马斯·卡莱尔产生了好奇。  </li></ul></li></ul><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="第一章：什么是狗屁工作"><a href="#第一章：什么是狗屁工作" class="headerlink" title="第一章：什么是狗屁工作"></a>第一章：什么是狗屁工作</h3><p>“狗屁工作是一份毫无意义且往往有害的定期领薪水的职业，其无意义或有害程度是如此之高，乃至从事这份职业的人都无法为其找出合适的存在理由。虽然要从事这份工作有一个条件，即从事者不得不假装这份工作的存在是完全合理的。”  </p><p>“狗屎工作”往往是蓝领工作，从事者按小时拿钱；而“狗屁工作”往往是白领工作，从事者拿的是月薪。从事“狗屎工作”的人经常受到侮辱，他们不仅工作辛苦，而且正因为工作辛苦而被人瞧不起，但是起码他们知道自己做的事情是有用的。那些从事“狗屁工作”的人则常被荣誉和声望围绕，他们被视作专业人士，他们得到人们的尊重，且收入颇丰，他们被认为是有成就的人，是有理由为自己的成就感到自豪的人。但是他们内心知道：他们什么成就都没有；他们感觉自己什么都没做就能够支付各种消遣玩乐的费用，并用这些填满自己的整个人生；他们感觉这一切都基于某个谎言——他们的感觉没有错。”   </p><blockquote><p>“我曾想过，如需将一个人彻底摧毁，残暴无比地折磨他，用杀人狂魔听了都会颤抖、都会吓得魂飞魄散的方式击垮他，那么只需要给他安排一份毫无意义的工作，一份毫无意义到甚至荒谬的工作”     </p></blockquote><h3 id="第二章：狗屁工作的种类"><a href="#第二章：狗屁工作的种类" class="headerlink" title="第二章：狗屁工作的种类"></a>第二章：狗屁工作的种类</h3><p>“在研究中，我发现把狗屁工作分成五个类别会很有帮助。这五大类别分别是：随从（flunky）、打手（goon）、拼接修补者（duct taper）、打钩者（box ticker）和分派者（taskmaster）。”</p><p>“大型机构中，上级的重要性几乎永远是跟他手下干活的人数挂钩的。这反过来更刺激了组织阶梯中处于上位的那些人不断扩充自己的队伍，至于招来的下属具体做什么，则完全是以后再考虑的事情了。更多情况下，这些上级还会无视岗位过剩的情况，根本不会花精力去精简队伍。后面会提到，诸如银行、医疗耗材公司等大公司有时会聘请顾问来提升公司效率。根据这些顾问的反馈，当管理层了解到效率的提升需要仰仗自动化，而自动化会造成他们手底下的员工数量骤减时，这些管理人员便沉默了，不仅场面陷入尴尬，随之而来的还有对顾问毫不掩饰的敌意。效率提升方案一旦被执行，这些管理人员就什么都不是了，成了光杆司令了。没有了随从，那他们还能当谁的“上级”？”</p><p>“巴勃罗的主要观点是，人们越来越依赖免费软件，软件行业的领薪岗位也越来越多地设置给了拼接工作。程序员下班后很乐意利用业余时间无偿开发些程序，因为这些涉及核心技术的工作内容本身就令人满足，但同时也意味着他们越来越没有动力去考虑自己开发的程序是否最终能和其他人开发的其他程序相兼容，那么这批程序员在白天上班的时候，就得花费更多时间去从事拼接工作（有偿），把这些本不兼容的程序拼接起来。巴勃罗的这个观点非常重要，后文中我会详细讨论此种情况可能带来的影响，不过现在，我们仅对拼接工作概念本身进行展开。”</p><p>“起码存在一类人真的意识不到自己从事了狗屁工作。当然，首席执行官从事的还真的不是狗屁工作，他们确实改变了这个世界，不管这种改变是好是坏。他们只是对自己创造的各类狗屁工作视而不见而已。”</p><h3 id="第三章：论精神暴力-上-–为什么狗屁工作从事者说他们不快乐"><a href="#第三章：论精神暴力-上-–为什么狗屁工作从事者说他们不快乐" class="headerlink" title="第三章：论精神暴力(上)–为什么狗屁工作从事者说他们不快乐"></a>第三章：论精神暴力(上)–为什么狗屁工作从事者说他们不快乐</h3><p>“工作场所是法西斯式的。这里狂热而排他，你的生命被吞噬；老板将原本属于你的每分每秒全部抢过来，并占为己有，好似恶龙将金子秘藏。” ——努里</p><p>“而且他根本找不到任何办法从自己的工作中解读出哪怕一丝丝意义来，这一点最终把他逼疯。养家糊口这样的理由他也没办法用，因为他还没有成家。埃里克所在的阶级是以劳动为荣的阶级，这个阶级的人们制造、维护和修理东西，并以此为荣，这个阶级的人们觉得一切理应如此。于是自然而然，埃里克觉得上了大学进入专业领域之后，自己将要从事更加高大上的劳动。可现实恰恰是因为他“不具备”某项能力，反而获得了这份工作。他一次次尝试辞职，公司却一次次给他加薪。辞职不行，那出格行不行？还是不行。不管他做了多么过分的事情，公司还是留着他。他试过挑明公司的问题，也试过拙劣地扮演别人想要他扮演的角色，可这一切都是徒劳。”</p><p>“狗屁工作的核心：虚伪和无目标感”</p><p>“公众关于工作的大量讨论都是基于一个假设，即经济学家提出的模型是正确的。人们必须被强迫才会去工作，如果要救济穷人以防他们饿死，那么这种救济也必须用最为羞辱和麻烦的方式给予，不然他们就会产生依赖，再也没有找正经工作的动力了。[1]这里暗含着一个假设：如果人类有机会做寄生虫，那他们会毫不犹豫地去做。”</p><p>“然而哪怕是最自私的人最终也会发现，比起辛苦万分还不赚钱地劳作，整天坐着啥都不干而只看电视的命运会让人更难以忍受。”</p><p>“雇用你的时候，你感到自己是因为有用才获得了这个岗位，结果却发现事实完全不是如此，但又不得不配合表演，假装自己是有用的，假装这个岗位是有用的。这种先让你产生自己有用的错觉，然后再被全然否定的经历，不仅仅是对自尊感的摧毁，还直接动摇了自我意识的根基。一个人一旦停止对世界产生有意义的影响，那这个人就不复存在了。”</p><p>“你现在的时间是我的，我花钱不是养闲人的”</p><p>“一个社会父权化程度越高，男性和女性越是隔离，男性就越不清楚女性的工作情况。若是女性不见了，男性自然也不大可能替代她们去完成她们的工作。（与此形成对比，女性往往很清楚男性的工作内容，因此男性一旦因为某种原因消失，女性是能够从容应对的。正是出于这个原因，历史上经常出现一种情况：虽然某社会中大量男性因战争或贸易需要长期离开，但这个社会的生活并没有怎么被打乱。）父权制社会下，女性工作若是有人监管，那监管的人同样也会是女性。”</p><p>“由天体决定的绝对时间，就这么进入了尘世，并开始控制管理人类的日常事务，哪怕是最私人的小事。然而时间既是确定的坐标，也是一种资产。时钟鼓励所有人都以中世纪商人的方式去看待时间：时间成了一份有限的资产，需要像对待金钱那样细细规划预算，小心支配。”</p><p>“这类工作往往不是拿计件工资而是领固定月薪的，甚至都没有上级跟在他们屁股后面盯着。其实很多情况下正是如此。然而这类装模作样的游戏终究不是人们自主选择的，而是人们受到权力压迫的表现，因此不可避免地会让人意志消沉。”</p><h3 id="第四章：论精神暴力-下-–身处狗屁岗位有何感受"><a href="#第四章：论精神暴力-下-–身处狗屁岗位有何感受" class="headerlink" title="第四章：论精神暴力(下)–身处狗屁岗位有何感受"></a>第四章：论精神暴力(下)–身处狗屁岗位有何感受</h3><p>“疑问：太多人因领了工资却没有实际事情可做而感到愤怒、难以忍受、倍感压迫，这到底是为什么？况且工作环境往往还相当不错。我认为这个问题的答案揭示了关于人性的某些真相。这些真相大都被经济科学忽视了，甚至连大众常识中那些较为愤世嫉俗的部分都没能包含它们。人是依赖社交的存在，如果失去了和他人经常接触的机会，就会开始萎缩，甚至肉体上也开始衰弱。人类之所以觉得自己是自主存在，是与世界和他人分离的独立体，很大程度上是因为人们觉得自己可以按照可预测的方式对世界和他人产生影响。一旦被剥夺这种拥有力量的感觉，人类就什么也不是了。”</p><p>“当你在工作中，仅有的挑战是要接受根本没有任何挑战这件事；你施展才能的唯一方式，是变着花样掩饰自己无法施展才能这个现状；你需要消化自己已然成了寄生虫和大骗子这个事实，虽然你的初衷绝非如此，但痛苦会随之而来。在此种情况下，你必须非常自信，绝不能开始自我怀疑。（而这种自信本质上是有害的，毕竟，你之所以会深陷此类处境，不正是源自你上级那愚蠢又过分的自信吗？）”</p><p>“当一个人的狗屁工作不是什么都不做在那儿假装忙碌，而是真的很忙，但是忙的事情所有人都知道（但是不能说出来）是没有任何意义的，他就会被一种紧张感包围。这种紧张感会不断聚积，在这种情况下，人们往往会变得很有攻击性、很任性。”</p><h3 id="第五章：狗屁工作为什么会激增"><a href="#第五章：狗屁工作为什么会激增" class="headerlink" title="第五章：狗屁工作为什么会激增"></a>第五章：狗屁工作为什么会激增</h3><p>“某种程度上我们可以说，整个金融业就是一场骗局，因为整个行业表面上是针对商贸和制造领域的潜在赢利机会进行的各种操作，但事实上，这两个领域几乎没有被涉及。金融业绝大部分的利润来自同政府合谋生产、交易和操纵各种各样的债务。在本书中，我真正想说的是，就和金融业充满了烟雾幻境和假象一样，伴随着金融业繁荣而兴起的信息岗位，大部分工作也不过是魔术师的骗局而已。”</p><p>“政府在创造和维持狗屁工作中扮演的角色”</p><p>“总统先生到底说了什么？他承认了恺撒医疗集团或蓝十字蓝盾等医疗保险机构的几百万个岗位是没必要存在的。他甚至承认了社会主义化医保制度比现有的市场化医保制度更有效，因为前者可以减少不必要的文书工作，还可以避免数十家有竞争关系的私营医保公司精力的重复消耗。但他同时表示，正是为了保住这几百万个无用岗位，我们不能采用社会主义化医保制度。他坚持表示，维持现有市场化医保制度的一个原因正是这个制度的低效性。因为维持几百万个基本上毫无用处的办公室岗位要好过绞尽脑汁寻找相应数量的其他什么岗位让这些办事员来做。”</p><p>“对狗屁工作激增原因的几种错误解释”</p><ul><li><p>“第一类观点认为，那些在私营企业工作却有着类似想法的人是没有道理的。因为在市场经济中面临竞争的私营企业绝不可能花钱去雇人什么都不做，他们的岗位肯定存在某种用途，只不过他们自己并没有理解而已。”</p></li><li><p>“第二类观点则承认在私营领域确实也存在毫无意义的岗位，甚至承认这样的岗位在激增。但是他们坚持认为，私营领域中的狗屁工作必然是政府干预的产物。”</p></li></ul><p>“所以哪怕这些岗位最初设立的时候并不是“随从岗位”（估计大部分都不是），但这些人最终却纷纷沦为了随从，并一直这么“随从”下去了。当然，在任何大公司，大家都在担心自动化带来的威胁。我听说，有些公司的程序员上班时穿的文化衫上印着“走开点，不然我写一小段Shell[5]脚本就没你什么事了”，但是在这个案例以及其他类似的案例中，我们发现这种担忧袭向了公司的高层。这些高管一直颇为得意他们残酷无情的行事风格（比如，他们都掺和过私募股权投资业务，不管掺和的形式如何）。他们靠着这股无情吞掉了其他公司，并借着精兵简政、提高效率等名头甩给这些公司巨额债务。正是这些高管，面对自己内部机构臃肿的现象，却非常骄傲。事实上，如果西蒙判断无误，这些高管之所以这么做是因为这就是大型银行的本质：大型银行就是由大批封建随从和少数封建领主构成的，每位高管享受领主般的待遇[…]”</p><p>“而工业资本主义的到来则显然改变了这一切，20世纪兴起的管理主义更是加剧了这种改变。金融化资本主义之下，情况不仅没有好转，反而更加严重了。“效率”意味着赋予经理、监督人和其他各种所谓“效率专家”越来越多的权力，这样真正从事生产的人就几乎没有任何自主权了。[4]与此同时，管理者的队伍似乎也在无休无止地壮大着。”</p><p>“在任何以占有和分配商品为基础的政治经济体制中，非常多人从事的工作就是在整个系统中来回传送各种资源，而不是真正去创造、推进或维修这些商品，这一庞大的群体往往会将自己分成非常多的等级（起码有3个级别，有时候能达到10个、12个甚至更多）。然后我们还可以推论，在这些等级中，仆从和下级之间的界限往往很模糊，毕竟“服从上级”是经常出现在职位描述中的关键内容。大部分重要玩家自己既是领主又是封臣。”</p><p>“使人感到痛苦的不仅仅是工作过程毫无意义这一点，还有为了获得做事机会，不得不消耗大量原本可以用来做事的时间。”</p><h3 id="第六章：为什么社会对狗屁工作的激增无动于衷"><a href="#第六章：为什么社会对狗屁工作的激增无动于衷" class="headerlink" title="第六章：为什么社会对狗屁工作的激增无动于衷"></a>第六章：为什么社会对狗屁工作的激增无动于衷</h3><p>“虽然在道德说教者的影响下，人们不会四处宣扬“狗屁工作激增”这个现象（因为在公共讨论中，所有工作都必须被当作神圣的职责来对待，因此有工作总比没有工作来得好），但一旦涉及我们自身的工作时，大家的评判标准往往就完全变了。我们会对工作有所期待，希望自己的工作有意义，能实现某种目标，一旦发现不能，情绪便会非常低落。但这就引出了新的问题：如果工作本身并没有价值，那么它又是如何为其他事物提供价值的呢？毕竟，当人们谈及工作的“毫无意义”和“对谁都没好处”时，他们是在谈论价值，而这价值又是什么价值呢？”</p><p>“如果某件商品或某项服务满足了某种需求或者改善了人们的生活，那么这件商品或这项服务可被视作具有真实价值，但如果它们仅仅创造了需求而非满足既有的需求，那不管是通过让人觉得自己太胖或太丑来购买产品，还是诱骗他人贷款以收取利息，这些商品或服务都不具备真正的价值。这种说法看起来足够有道理，但还是没有解决究竟怎样才算“改善了人们的生活”这个问题，而这个问题的答案显然决定了后续的一切判定。”</p><p>“社会价值”并不只是关乎财富创造，甚至都不关乎闲暇，而是关乎社交，关乎合群。”</p><p>“第一，工作带给人最重要的东西一是金钱，以便支付各种账单开销，二是给世界做出积极贡献的机会；第二，以上两者成反比，即你的工作越是对他人有帮助、有好处，带来的社会价值越高，那么这份工作带给你的酬劳往往就越低。”</p><p>“拥有资本的那部分人成为雇主，而没有资本的那部分人则不得不替他们打工。这对个人意味着什么呢？首先，成百上千万的年轻人发现他们陷入了社会意义上的永久青春期出不来。随着同业公会结构的瓦解，学徒虽然依然可以从新手变成熟手，但从熟手成为独立经营者的老路已经不复存在，这也就意味着，从传统角度来看，他们是不具备谈婚论嫁、组建家庭的资格的。他们构成了事实上的“不完整的人”，如此过完一生。”</p><p>“穷人被视作“失意青少年”。从传统意义上来说，青少年通过工作，或者更确切地说，通过“在主人严密监督下的领薪工作”，最终学会了如何成为合乎习俗的、自律的、自给自足的、体面的成年人。可事实上，清教徒等各种虔诚的风俗改良派已不再能够像原来那样向穷人承诺什么了，曾经的“无须听从他人命令、自给自足生活的成年人身份”肯定是没法再提供了，于是他们通过慈善和戒律，通过注入更新后的神学理念来替代之前的承诺。他们教导穷人，工作既是惩罚也是救赎。工作是自我禁欲，其本身就有价值，这种价值甚至超越了工作所能产生的财富，工作纯粹是上帝施予人类恩惠的标志，可不是拿来给你们享受的。[4]”</p><p>“诚然，在某种程度上，我们大部分人更希望通过工作以外的什么东西来定义自己而非工作本身。[3]可不知道为什么，矛盾的事情发生了，当被问及生活的意义这个问题时，人们常常会回答，是工作赋予了他们生活的终极意义，而失业则会给他们的心理造成毁灭性的打击。”</p><p>“卡莱尔最终得出一个结论，而这个结论正是今时今日许许多多人所得出的：如果工作是高贵的，那么最高贵的工作不应该获得报酬，因为给这样一件有着无上价值的事物标上价码，实在污秽可憎（“当然在天堂等地方，真正的‘酬劳’已准备好，来回馈每一份高贵的工作”[7]）。不过卡莱尔还是很体贴地表示，确实需要提供给穷人“合理的酬劳”，使他们具备生存的能力。”</p><p>“今日狗屁工作激增，主要原因在于掌控富裕经济体（同时也在逐渐掌控非富裕经济体）的管理主义封建制度的独特性。狗屁工作之所以给人们带来了痛苦，是因为人类幸福感的源泉是来自一种对这个世界能产生一定影响的感觉，而当提及自身工作的时候，人们大都会将这种感觉同社会价值等同起来。但是与此同时，他们意识到一点，一份工作产生的社会价值越大，它能给工作者带来的经济回报则越小。”</p><p>“不得不在社会价值和经济回报中做出抉择：若是选择了社会价值，你就可以从事照顾孩子这样有用且重要的工作，但是你却被不断告知，帮助他人所获得的满足感本身就是这份付出的回报，至于如何养活自己，那你自己想办法好了；若是选择了后者，各种各样的生活开销是没问题了，但是却需要接受一份毫无意义且备受侮辱的工作，付出了身心俱疲的代价却丝毫不能带来任何价值，当然能够符合“如果你没有因为工作而身心俱损，那么你就没有正确地生活，不管这份工作是否有意义”这种普遍的价值观。”</p><h3 id="第七章：狗屁工作的应对"><a href="#第七章：狗屁工作的应对" class="headerlink" title="第七章：狗屁工作的应对"></a>第七章：狗屁工作的应对</h3><p>“在我看来，这种没完没了延续毫无意义的工作的冲动，实际上不过是来源于对暴民的恐惧：暴民这种动物如此低等，以至一旦让他们获得闲暇，就会立刻变得危险，还是让他们忙忙碌碌没有时间思考来得安全。 ——乔治·奥威尔，《巴黎伦敦落魄记》  </p><p>“经济越是沦为单纯的钱财分配问题，效率的低下和管理的臃肿就越能说得通，因为正是这样的组织结构，才能最大限度地榨取钱财。某份工作实际生产效能越低、造福他人价值越少，这份工作从自我牺牲意义上出发的价值便越大，也就是说，任何使工作变得好玩、变得不再繁重的事情，哪怕是因造福他人而产生的满足感，都会被视作削弱了这份工作带来的自我牺牲价值。所以，如果某份工作给人以满足感，那么“经济回报就比较低”这个现象也就有理论基础了。”</p><p>“人类工作越来越辛苦是因为人类创造了某种奇怪的施虐受虐逻辑论证法，通过这种逻辑论证，我们觉得只有在工作时不断感受痛苦，才能赋予我们那些隐秘的消费主义愉悦感以合理性。在这种理念的驱使下，工作占据了我们越来越多的时间，于是人们不再享有“生活”这件奢侈品”</p><p>“这样的工作安排，营造出了一种充满憎恨和愤懑的政治风貌。那些在失业中痛苦挣扎的人憎恨那些有工作的人。那些有工作的人被鼓动着去仇视穷人、去憎恨失业者，因为穷人和失业者一直被描绘成好吃懒做、白吃白拿之流。狗屁工作从事者痛恨那些拥有对人类有益的真正工作之人，而那些从事着对人类有益的真正工作之人，在饱受低薪、羞辱和忽视之后，则越发讨厌那些垄断着极少数华丽、高尚、有用且高薪岗位的（他们口中的）“自由派精英”。所有这些人都讨厌统治阶级，认为统治阶级是腐败的、堕落的（他们确实是），而统治阶级则觉得可以好好利用这些人彼此之间空洞的相互仇恨，因为这样他们自己可以躲开些关注。”</p><p>“你的工作高尚、有用，而你依然想要获得舒服的工资收入和丰厚的福利待遇，那你就会成为人们憎恨的对象，除非你是士兵或者其他军方直接工作人员。士兵不仅不会因为从事的工作既高尚又高薪而被憎恨，恰恰相反，他们是永远不被憎恨的群体。他们超越一切批评。”</p><p>“如果你的目的仅仅是挣大钱，那么也许存在某种可能的路径，但如果你想要追求金钱以外的其他价值，不管这个价值是真实（新闻、学术），是美（艺术、出版），是正义（激进运动、人权），还是慈善，等等，而你同时还想拥有体面的收入，那么除非你有一定的家族财富、社会人脉和文化资本作为背景，否则绝无可能。于是，文化精英阶层成功地在所有可以获得经济回报以外其他价值的工作岗位上设置了屏障。文化精英阶层正试图将他们自身打造成新的美国贵族，并且在很大程度上已经成功。好莱坞贵族正是如此，世袭垄断了所有经济回报颇丰，同时还能给人高贵感、成就感和价值感的岗位。”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Q：Why？为什么要读这本书？  &lt;ul&gt;
&lt;li&gt;在豆瓣看到过有人推荐，之前阅读过 《工作、消费主义和新穷人》来对工作、消费背
      
    
    </summary>
    
    
      <category term="Book" scheme="https://zdyxry.github.io/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-10-16</title>
    <link href="https://zdyxry.github.io/2022/10/16/Weekly-Issue-2022-10-16/"/>
    <id>https://zdyxry.github.io/2022/10/16/Weekly-Issue-2022-10-16/</id>
    <published>2022-10-16T23:50:00.000Z</published>
    <updated>2022-11-07T02:06:46.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://matt-rickard.com/startup-ideas-ive-considered" target="_blank" rel="noopener">Startup Ideas I’ve Considered</a></p><p>无代理可观测性平台、机器学习基础设施、表格系统、安全、VPN、BaaS、版本控制。</p><hr><p><a href="https://aws.amazon.com/cn/blogs/china/choose-the-best-docker-image-for-your-python-application/" target="_blank" rel="noopener">为你的 Python 应用选择一个最好的 Docker 映像</a></p><p>如何选择 容器 镜像是一个需要仔细调研权衡的问题，从各方面考虑 alpine 不是一个好选择。</p><hr><p><a href="https://matt-rickard.com/infrastructure-defined-software" target="_blank" rel="noopener">Infrastructure Defined Software</a></p><ul><li>Puppet 2009, Salt 2011, Ansible 2012</li><li>CloudFormation 2011, Terraform 2014</li><li>Pulumi 2017, AWS CDK 2019</li><li>下一步是什么？</li></ul><hr><p><a href="https://getk8e.zhubai.love/" target="_blank" rel="noopener">白话Kubernetes入门实践</a></p><p>k8e 作者关于 kubernetes 的一系列文章，持续更新中。</p><hr><p><a href="https://linkerd.io/2020/12/03/why-linkerd-doesnt-use-envoy/" target="_blank" rel="noopener">Why Linkerd doesn’t use Envoy</a></p><p><a href="https://blog.cloudflare.com/zh-cn/how-we-built-pingora-the-proxy-that-connects-cloudflare-to-the-internet-zh-cn/" target="_blank" rel="noopener">将 Cloudflare 连接到互联网的代理——Pingora 的构建方式</a></p><p>为什么 Linkerd 不使用 envoy.</p><pre><code>- 复杂度、资源消耗、安全。- But what if we have a requirement to use Envoy? I would argue that’s not a real requirement. Your job is not to adopt a particular piece of technology. Your job is to solve a problem. And if your problem is “we need to build a reliable, secure, and observable Kubernetes platform without paying an insane complexity cost” then I highly suggest you consider taking a look at Linkerd.</code></pre><hr><p><a href="https://iximiuz.com/en/posts/docker-image-to-filesystem/" target="_blank" rel="noopener">Docker: How To Extract Image Filesystem Without Running Any Containers</a></p><p>如何不运行容器 而导出容器镜像文件系统</p><blockquote><p><code>$ docker pull nginx $ CONT_ID=$(docker create nginx) $ docker export ${CONT_ID} -o nginx.tar.gz</code></p></blockquote><hr><p><a href="https://www.infoq.cn/article/psxdnqxu0ojdbxk5a9jg" target="_blank" rel="noopener">为什么 TCP 协议有性能问题 ·（一）</a></p><blockquote><p>弱网环境是丢包率较高的特殊场景，TCP 在类似场景中的表现很差，当 RTT 为 30ms 时，一旦丢包率达到了 2%，TCP 的吞吐量就会下降 89.9%<a href="https://draveness.me/whys-the-design-tcp-performance#fn:3" target="_blank" rel="noopener">3</a>，从下面的表中我们可以看出丢包对 TCP 的吞吐量极其显著的影响：</p></blockquote><hr><p><a href="https://cloudplane.org/blog/why-cue" target="_blank" rel="noopener">Why We Use CUE (and Not Helm)</a></p><p>为什么使用 [[CUE]]，比较了 [[jsonnet]]、[[Dhall]] 和 [[CUE]]。</p><p>[[Dagger]] 和 [[Acorn]] 也采用了 [[CUE]]</p><hr><p><a href="https://aws.amazon.com/cn/blogs/china/pushing-the-data-transfer-from-amazon-ec2-to-amazon-s3-to-100gbps-line-speed/" target="_blank" rel="noopener">老司机们坐稳了 – 将Amazon EC2到Amazon S3的数据传输推向100Gbps线速</a></p><blockquote><p>答案是非常肯定的:  在全球任何一个亚马逊云科技的区域里, Amazon EC2 到 Amazon S3的默认数据传输<a href="https://aws.amazon.com/cn/premiumsupport/knowledge-center/s3-maximum-transfer-speed-ec2/" target="_blank" rel="noopener">带宽都可以最高达到100Gbps</a>。</p></blockquote><hr><p><a href="https://colobu.com/2022/10/04/redefining-for-loop-variable-semantics/" target="_blank" rel="noopener">十多年了，这个最容易犯错的Go语法终于要改了</a></p><p>“for 循环中变量的使用问题”.<a href="https://github.com/golang/go/discussions/56010" target="_blank" rel="noopener">https://github.com/golang/go/discussions/56010</a></p><hr><p><a href="https://xai.sh/2020/10/16/Move-running-process-into-tmux-session.html" target="_blank" rel="noopener">Move a running process into a tmux session</a></p><p>通过 reptyr 将一个进程移动到 tmux 中</p><hr><p><a href="https://www.junmajinlong.com/ansible/11_faster_ansible/" target="_blank" rel="noopener">Ansible你快点：Ansible执行过程分析、异步、效率优化</a></p><p>通过修改 ansible 配置、SSH 配置，使用第三方 Mitogen 插件来提速。</p><hr><p><a href="https://blog.codingnow.com/2022/09/cargo_matching.html" target="_blank" rel="noopener">货物和货车的匹配</a></p><hr><p><a href="https://iximiuz.com/en/posts/docker-debug-slim-containers/" target="_blank" rel="noopener">Docker: How To Debug Distroless And Slim Containers</a></p><p>使用 namespace 和 kubectl debug 启动临时容器进行 debug。关于 kubectl debug 的更多细节：<a href="https://iximiuz.com/en/posts/kubernetes-ephemeral-containers/" target="_blank" rel="noopener">Kubernetes Ephemeral Containers and kubectl debug Command</a></p><hr><p><a href="https://matt-rickard.com/why-is-nixos-popular-again" target="_blank" rel="noopener">Why Is NixOS Popular Again?</a></p><ul><li>Nix 现在讨论热度上升了:”a more formal team structure around development (<a href="https://discourse.nixos.org/t/nix-team-creation/22228" target="_blank" rel="noopener">link</a>), new startups built around Nix, 30% YoY user growth (<a href="https://discourse.nixos.org/t/2022-nix-survey-results/18983" target="_blank" rel="noopener">link</a>), and exponential growth in GitHub stars.” ，但是 Nix 真正流行起来还是很困难，Nix 的语法，包的持续维护，使用场景。</li><li>用户真的需要 NixOS么？我之前想通过 NixOS来准备自己的开发环境，但是开发环境很少需要重新配置，基本上配置一次可以用很多年，如果真的需要重新配置开发环境，通常也到了更新自己的开发工具链的时候，体验下新鲜工具貌似也不错？</li></ul><hr><p><a href="https://engineering.linkedin.com/blog/2022/skyfall--ebpf-agent-for-infrastructure-observability" target="_blank" rel="noopener">Skyfall: eBPF agent for infrastructure observability</a></p><p>linkedin 使用 eBPF 采集网络相关 metric。</p><blockquote><p>Smoothed RTT (Round trip time): The predicted RTT value obtained by applying a smoothing factor to it, which is also used to adjust the RTO (Retransmission timeout) value. We are collecting this metric to measure the contribution of the network to overall performance.<br>RTT variance: An indication of path jitter. TCP uses this value, combined with SRTT, to compute the RTO. We are collecting this metric to detect transient network issues.<br>Packetloss and Retransmits: These metrics are being collected to monitor network performance.<br>Sending congestion window size: Congestion window controls the number of packets a TCP flow may have in the network at any time.</p></blockquote><hr><p><a href="https://netflixtechblog.com/how-product-teams-can-build-empathy-through-experimentation-6253603880a6" target="_blank" rel="noopener">How Product Teams Can Build Empathy Through Experimentation</a></p><ul><li>同理心，将自己作为真正的用户去思考产品。</li><li>When you’re building things, whether you’re a visual designer, or a designer of an API, or a PM, or anybody who’s building something, lean into trying to put yourself in the shoes of the user. And if you can do that, not just at the beginning when you write down the specs, but all the way through the process, you make a better product in the end.</li></ul><hr><p><a href="https://www.zlovezl.cn/articles/go-func-argument-patterns/" target="_blank" rel="noopener">Go 的几种函数传参模式</a></p><p>Golang 参数传递方法，函数式选项模式。</p><hr><p><a href="https://matt-rickard.com/ebpf-file-watching" target="_blank" rel="noopener">eBPF File Watching</a></p><p>inotify 存在的问题：</p><blockquote><p>Doesn’t support recursive directory watches<br>Can drop changes when a large number of filesystem events occur (fixed-sized buffer)<br>No native debouncing support when a large number of events occur<br>Race conditions (rename events and between different instances of inotify)<br>API issues (no event information about the process that changed the file, path names as the event data)</p></blockquote><hr><p><a href="https://jiajunhuang.com/articles/2022_10_08-oauth2_explained.md.html" target="_blank" rel="noopener">OAuth 2 详解（一）：简介及 Authorization Code 模式</a></p><p>Jiajun 同学的 OAuth 2.0 系列博客。</p><hr><p><a href="https://www.alexedwards.net/blog/working-with-cookies-in-go" target="_blank" rel="noopener">A Complete Guide to Working With Cookies in Go</a></p><p>Golang 关于 cookie 处理方式。</p><hr><p><a href="https://matt-rickard.com/short-taxonomy-of-open-source-strategies" target="_blank" rel="noopener">Short Taxonomy of Open-Source Strategies</a></p><p>开源策略分类：招聘、市场营销、进入全新市场、减少竞争对手的护城河、建立标准。</p><hr><p><a href="https://medium.com/higher-order-functions/go-worker-pool-the-concurrency-powerhouse-2dc7971f4f15" target="_blank" rel="noopener">Go Worker Pool: The Concurrency Powerhouse</a></p><p>一步一步将一个串行业务改为并行。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://tumutanzi.com/archives/16923" target="_blank" rel="noopener">空城计与职场生存秘籍</a></p><p>谈论制造“被需要”，但是这种制造方式感觉不“正确”。</p><hr><p><a href="https://www.kawabangga.com/posts/4840" target="_blank" rel="noopener">婚礼回顾和一些经验分享</a></p><p>摆正心态，这场婚礼最重要的是谁，是给谁办的，想明白这个问题，然后其他的问题都以这些人会不会高兴为准。</p><p>国庆刚好也参加了朋友的婚礼，婚礼需要一个项目经理来掌握全局，细节部分很容易分散精力且让人暴躁。</p><hr><p><a href="https://whatiknown.strrl.dev/notes/vivthodp9f5lzmz6wjw7dh3/" target="_blank" rel="noopener">The documentation system</a></p><p>教你如何写文档的文档。</p><hr><p><a href="https://reorx.com/essays/2022/10/how-novels-become-boring/" target="_blank" rel="noopener">真正的好作品只能靠自己去发现</a></p><blockquote><p>好的作品不会过于套路化，因为有追求的创作者总是在尝试突破和创新，因此不仅生产效率不会太高，还需要读者有一定的耐心和智力才能渐入佳境。  大众认为好的不一定对自己而言是好的。</p></blockquote><hr><p><a href="https://pchase.substack.com/p/how-the-largest-open-source-companies" target="_blank" rel="noopener">How the largest open source companies got their first 1k community members</a></p><p>如何获得 1k 个用户？hackernews、meeting、注重早期用户。</p><hr><p><a href="https://mp.weixin.qq.com/s/94LRW6NSy28tTaBVr-cQ7g" target="_blank" rel="noopener">倍速播放：青年闲暇时间的消费与异化</a></p><blockquote><p>在倍速播放背后，折射出从工业社会、消费社会到互联网社会资本增殖逻辑的转变，资本从原来压榨劳动时间的逻辑转变为促进闲暇时间的商品消费，最后转变为想方设法占用人们的闲暇时间本身。<br>倍速播放在一定程度上可以看作是青年对快时代节奏的主动适应和对资本逻辑的反抗，彰显了青年的主体性。然而，即使青年自主选择了倍速播放，背后依然难以挣脱资本支配的逻辑。<br>在青年和资本的博弈中，资本获得了播放时长增加和播放效率提升的双重胜利，青年却未能获得加倍的自由和幸福，导致了闲暇时间的异化。倍速播放是闲暇时间效率化的体现，是倍速生活的缩影，却并不一定是通往自由和幸福的捷径。</p></blockquote><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《子弹列车》：打打打杀杀杀。</p><p>《万里归途》：感觉不如《战狼》啊。</p><p>《圈套》：系列剧，推理加搞笑，轻松娱乐。</p><p>《独行月球》：不好笑。</p><p>《Take One：终极一曲 》：理想主义者的演出。</p><p>《Terraform：多云、混合云环境下实现基础设施即代码》： 最近打算搞一个 Provider，重新看书了解一下使用姿势。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-09-25</title>
    <link href="https://zdyxry.github.io/2022/09/25/Weekly-Issue-2022-09-25/"/>
    <id>https://zdyxry.github.io/2022/09/25/Weekly-Issue-2022-09-25/</id>
    <published>2022-09-25T23:50:00.000Z</published>
    <updated>2022-11-07T02:06:46.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://hynek.me/articles/productive-fruit-fly-programmer/" target="_blank" rel="noopener">How I’m a Productive Programmer With a Memory of a Fruit Fly</a></p><p>通过 [[doc2dash]] 来制作 [[Dash]] 文档。</p><hr><p><a href="https://blog.laisky.com/p/cfssl/" target="_blank" rel="noopener">用 CFSSL 从零构建一套 PKI</a></p><p>使用 [[cfssl]] 代替 [[openssl]] 管理证书。</p><hr><p><a href="https://frankdenneman.nl/2022/09/21/sub-numa-clustering/" target="_blank" rel="noopener">SUB-NUMA CLUSTERING</a></p><p>介绍 Sub-NUMA-Clustering ，目前来看除非是性能特别敏感的场景，其他场景没什么用。服务器如果启用了一些[[虚拟化]]的高级选项，可能会导致 Sub-NUMA-CLustering 开启，从而导致节点的 [[NUMA]] 数量超过预期。</p><hr><p><a href="https://blog.cloudflare.com/workers-todo-part-1/" target="_blank" rel="noopener">Going originless with Cloudflare Workers – Building a Todo app – Part 1: The API</a></p><p>使用 [[CloudFlare]] 全家桶： Workers，D1 来构建一个 Todo APP。</p><hr><p><a href="https://devblogs.microsoft.com/commandline/systemd-support-is-now-available-in-wsl/" target="_blank" rel="noopener">Systemd support is now available in WSL!</a></p><p>[[WSL]] 支持 systemd，是时候再给 [[WSL]] 一次机会了。</p><hr><p><a href="https://www.redhat.com/en/blog/painless-services-implementing-serverless-rootless-podman-and-systemd" target="_blank" rel="noopener">Painless services: implementing serverless with rootless Podman and systemd</a></p><p>使用 [[systemd]] 的 <code>systemd-socket-proxyd</code> 来配合 Podman 实现 [[Serverless]]</p><hr><p><a href="https://devops.com/the-curious-connection-between-cloud-repatriation-and-sre-ops/" target="_blank" rel="noopener">The Curious Connection Between Cloud Repatriation and SRE Ops</a></p><p>[[SRE]] 与用户是否将业务部署在公有云上的关系探讨，作者表明当公司 SRE 越多，则将业务部署在私有云的比例越大。</p><hr><p><a href="https://colobu.com/2022/09/12/go-synchronization-is-hard/" target="_blank" rel="noopener">多年老司机，面对这些Go并发问题，也迟疑了</a></p><p>[[Golang]] 并发问题。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://daily.zhihu.com/story/9753108" target="_blank" rel="noopener">《水浒传》中林冲真的窝囊吗？</a></p><p>讲解林冲人物性格的成因。</p><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《一年一度喜剧大赛 第二季》： 好看，带来的快乐如此直接。</p><p>《赛博朋克：边缘行者》： 最近好像喜欢不完美结局的编剧变多了，去年的 《二十五，二十一》 因为结局被打了很多差评，看来二次元还是很友好的。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-09-18</title>
    <link href="https://zdyxry.github.io/2022/09/18/Weekly-Issue-2022-09-18/"/>
    <id>https://zdyxry.github.io/2022/09/18/Weekly-Issue-2022-09-18/</id>
    <published>2022-09-18T23:50:00.000Z</published>
    <updated>2022-11-07T02:06:46.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://book.douban.com/review/14650160/" target="_blank" rel="noopener">Kubernetes overstretched</a></p><p>这几年抱怨 k8s 的也不少. 一方面是 k8s 越来越成为事实上的标准(借“Cloud Native”之风), 在各大中小厂落地. 很多人被潮流裹挟不得不用, 心里未必愿意. 场景未必适合, 加上心不甘情不愿, 遇到麻烦就容易不满. 另一方面, 为了进一步提升适用范围和可定制性, k8s 开放出了越来越复杂的插件机制: custom apiserver, scheduler-extender, volume provisioner, federation, edge proxy, knative, etc.. 最初方便扩展的开放性, 反而带来了越来越高的复杂度. 在我看来, 在90%的场景下, 大部分开发者其实用不着, 也最好别碰这些东西; 剩下10%的特殊需求, 最好交给专门的云厂商做. 但不贴上高级词汇, 怎么向公司体现自身价值呢? 于是也跟在后面亦步亦趋, 做出不伦不类的东西, 结果越改越难用.如果要上升一下, 就是工具有自己的舒适区. 工具原来是为哪种场景设计的, 就最适合在相应的场景下使用. 突破界限做成一个普适的东西, 多半会增加痛苦. 然而古往今来能被滥用的技术, 就没有不被滥用的. 可扩展性越高越会被滥用, 就像性能越高越会被用户往死里捅一样. No good deed goes unpunished, as always.</p><hr><p><a href="https://theevilskeleton.gitlab.io/2022/08/29/traditional-packaging-is-not-suitable-for-modern-applications.html#workarounds" target="_blank" rel="noopener">Traditional Packaging is not Suitable for Modern Applications</a></p><p>看似在讨论包管理器问题，实际上是在讨论环境隔离问题。</p><hr><p><a href="https://reorx.com/essays/2022/09/startup-founders-never-stop/" target="_blank" rel="noopener">停不下来的创业者——得知 Figma 被 Adobe 收购有感</a></p><p>[[figma]] 被收购之后，我第一个想法也是类似的，认为核心团队可能与 [[Rancher]] 一样，在被 [[SUSE]] 收购之后，核心团队会再次选择一个方向从零开始。期待后续。</p><hr><p><a href="https://medium.com/vedcraft/system-design-mind-map-for-building-distributed-systems-b20a4f6943d0" target="_blank" rel="noopener">System Design Mind Map For Building Distributed Systems</a></p><p>设计分布式系统的思维导图</p><hr><p><a href="https://redmonk.com/rstephens/2022/09/08/ebpf/" target="_blank" rel="noopener">Why You Should Pay Attention to eBPF</a></p><p>The primary use cases of eBPF fall into three overarching buckets: networking, observability, and security.</p><hr><p><a href="https://incident.io/blog/why-you-need-incident-timelines" target="_blank" rel="noopener">Why you need an incident timeline</a></p><p>在进行事故分析时，通常会采用时间线的方式，为什么需要时间线？很多时候遇到故障，会涉及到很多人介入，使用完整时间线可以让大家回想起在某个动作执行时是否遗漏了什么，也可以针对其中的某些重点进行讨论，为什么做了这样的动作，当时的上下文是怎样的。</p><p><strong>永远不</strong>应该改变时间戳或动作发生的顺序来帮助你的叙述。保持事件时间表准确很重要，目标是在零背景下的一年时间内，仍然可以找到发生的事情和时间的原始事实，而无需任何修饰。如果为了表述的更加清楚，那可以通过在时间线之上增加背景章节来补充。</p><p>通过时间线可以发现一些容易遗漏的事情：为什么那个时间点没有更新，是否是大家的背景知识不一致？是否沟通不及时？</p><hr><p><a href="https://www.lastweekinaws.com/blog/the-harrowing-search-for-the-elusive-technical-answer/" target="_blank" rel="noopener">The Harrowing Search for the Elusive Technical Answer</a></p><p>遇到问题之后如何进行有效的搜索，可以称为一项必要技能。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://reorx.com/essays/2022/09/how-to-find-a-good-apartment/" target="_blank" rel="noopener">如何寻找一个理想的租房</a></p><p>通过贝壳进行初步地理位置筛选，然后通过[[小红书]] 来找转租。这个思路感觉不错。</p><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《暴雨下在病房里》：无法评价。</p><p>《小小姐们》：剧情走向有种会烂尾的感觉。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-09-11</title>
    <link href="https://zdyxry.github.io/2022/09/11/Weekly-Issue-2022-09-11/"/>
    <id>https://zdyxry.github.io/2022/09/11/Weekly-Issue-2022-09-11/</id>
    <published>2022-09-11T23:50:00.000Z</published>
    <updated>2022-11-07T02:06:46.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://mp.weixin.qq.com/s/ccFkJJz97KcuXdO3r5zdXA" target="_blank" rel="noopener">容器技术之发展简史</a></p><p>容器技术以及公有云容器功能支持历史。</p><hr><p><a href="https://changchen.me/blog/20220911/how-to-write-maintainable-python-code/" target="_blank" rel="noopener">如何编写低耦合可维护的 Python 代码</a></p><p>通过观察者模式和装饰器模式来编写可维护代码。</p><hr><p><a href="https://www.luozhiyun.com/archives/701" target="_blank" rel="noopener">CPU 是如何与内存交互的?</a></p><hr><p><a href="https://jvns.ca/blog/2022/09/06/send-network-packets-python-tun-tap/" target="_blank" rel="noopener">How to send raw network packets in Python with tun/tap</a></p><p>如何使用 [[Python]] 发送读取 [[TUN]] 设备数据。</p><hr><p><a href="https://iximiuz.com/en/posts/containers-distroless-images/" target="_blank" rel="noopener">What’s Inside Of a Distroless Container Image: Taking a Deeper Look</a></p><p>如何选择基础 [[Container]] [[image]] 一直是一个比较重要的考虑，比如很多人不推荐的 [[alpine]]，小而美，但是 [[musl]] 不那么美。很多人推荐使用标准发行版，但是又觉得大小太大不利于分发。 [[Distroless]] 是一个可以看到的方向，但是我个人在不能完全确定自己的项目中是否依赖了某些隐式的内容时，应该还是会使用标准发行版，比如[[Debian]] 或者 [[Fedora]]。</p><hr><p><a href="https://iximiuz.com/en/posts/containers-making-images-better/" target="_blank" rel="noopener">In Pursuit of Better Container Images: Alpine, Distroless, Apko, Chisel, DockerSlim, oh my!</a></p><p>博主在 [[Twitter]]  上发起了一些关于 [[Container]] [[image]] 的投票，一些人表面关注 CVE，实际上还是更关注镜像大小。 [[alpine]] 是目前大多数项目的选择，但是已经出现了一些替代品。</p><hr><p><a href="https://thenewstack.io/tips-to-make-your-on-call-process-less-stressful/" target="_blank" rel="noopener">Tips to Make Your On-Call Process Less Stressful</a></p><p>关于 [[On-Call]] 建立正确的心理预期：</p><ul><li>在 On-Call 之前，我需要知道所有组件是如何工作的：不，你不需要，遇到再看也是一样的；</li><li>遇到问题可能需要一个长期的解决方案：这不是你能决定的事情，通常是妥协的结果；</li><li>我应该自己解决这个问题：涉及到的组件越多，你越不可能独立解决问题，通常需要组内的其他人一起协助，不要不好意思，毕竟你节省的时间是你自己的。</li></ul><hr><p><a href="https://discord.com/blog/how-discord-supercharges-network-disks-for-extreme-low-latency" target="_blank" rel="noopener">HOW DISCORD SUPERCHARGES NETWORK DISKS FOR EXTREME LOW LATENCY</a></p><p>[[Discord]] 为了解决 [[GCP]] 磁盘稳定性的问题，通过 [[mdadm]] 来创建 md 设备，将多块 SSD 创建为 RAID0，再将 RAID0 设备和 非 SSD 磁盘创建 RAID1，并配置 <code>write-mostly</code> 参数，来让大多数写入到非 SSD 磁盘 。</p><hr><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://reorx.com/blog/2022-07-and-08-summary/" target="_blank" rel="noopener">2022年7月和8月总结</a></p><p>初中班主任的口头禅：身体是革命的本钱。</p><hr><p><a href="https://blog.zulip.com/author/tabbott/" target="_blank" rel="noopener">Why Slack’s free plan change is causing an exodus</a></p><p>Slack 免费策略修改导致用户流失。Slack 自身是一个缩写，全称是：Searchable Log of All Conversation and Knowledge。 作为一个 Knowledge ，现在的免费策略明显是不符合的。</p><hr><p><a href="https://daily.zhihu.com/story/9752630" target="_blank" rel="noopener">这些年来，原生家庭的影响是否被过度夸大了？</a></p><blockquote><p><strong>在中国数千年来的儒家父权文化和封建思想影响下，突然进入到人本主义或精神分析的框架讨论人格的构建，这其实是非常跳跃的一个过程，因为这两个文化框架本质上就有巨大的冲突</strong>。 <strong>原生家庭当然是直接影响到我们的“末梢神经”，但每个个体都只是时代洪流中的一粒沙，我们自己和我们的父母都是沙，我们都对自己的人生都有些无能为力。时代或社会洪流不会对我们低头让步，于是我们只能先和自己和解，再去尝试和父母以及时代和解。即孩子也是在独立地面对这个世界、向这个世界（包括父母）发起挑战、在输输赢赢中适应下来的。父母并不能完全掌握你的人生，即使在小时候，很多决定也是你自己性格使然造成的，然后通过和父母或其他什么相互影响越走越远。</strong></p></blockquote><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《真相捕捉 第二季》：真的好看，剧情紧张，期待接下来的更新，按照第一季的节奏，应该不会烂尾。P.S. 这季涉及到部分敏感话题。</p><p>《黑话律师》：难看，真的难看。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-09-04</title>
    <link href="https://zdyxry.github.io/2022/09/04/Weekly-Issue-2022-09-04/"/>
    <id>https://zdyxry.github.io/2022/09/04/Weekly-Issue-2022-09-04/</id>
    <published>2022-09-04T10:50:00.000Z</published>
    <updated>2022-11-07T02:06:46.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://daily.zhihu.com/story/9752308" target="_blank" rel="noopener">什么时候你第一次读懂了「云技术」？</a></p><p>通过具体的工业场景解释什么是云。</p><hr><p><a href="https://blog.shell909090.org/blog/archives/2886/" target="_blank" rel="noopener">wifi有关的一些问题</a></p><p>关于 Wifi 概念以及计算方式的讲解。</p><hr><p><a href="http://sunisdown.me/ke-kuo-zhan-fu-wu-she-ji-yuan-ze-checklist.html" target="_blank" rel="noopener">可扩展服务设计原则 checklist</a></p><p>开发应用的基本设计原则，包含基本原则、整体设计、自动化管理、依赖管理、发布周期、测试、审计、监控告警</p><hr><p><a href="https://tech.youzan.com/you-zan-tcpwang-luo-bian-cheng-zui-jia-shi-jian/" target="_blank" rel="noopener">有赞TCP网络编程最佳实践</a></p><p>在<code>net.ipv4.tcp_retries2</code>默认配置下，可能还是一直等到15min左右才能感知到网络异常。</p><hr><p><a href="https://www.yellow-bricks.com/2022/08/30/introducing-vsphere-8/" target="_blank" rel="noopener">Introducing vSphere 8!</a></p><p>问：当你安装了 vSphere 8，你实际安装了多少个 ESXi 和多少个虚拟机？</p><hr><p><a href="https://kubernetes.io/blog/2022/08/31/cgroupv2-ga-1-25/" target="_blank" rel="noopener">Kubernetes 1.25: cgroup v2 graduates to GA</a></p><p>[[kubernetes]] 正式支持 [[cgroup]] v2 。kubelet 和 container runtime 使用 systemd 来做 cgroup 管理。</p><blockquote><p>cgroup v2 offers several improvements over cgroup v1, such as the following:      </p><ul><li>Single unified hierarchy design in API  </li><li>Safer sub-tree delegation to containers  </li><li>Newer features like Pressure Stall Information  </li><li>Enhanced resource allocation management and isolation across multiple resources  <ul><li>Unified accounting for different types of memory allocations (network and kernel memory, etc)    </li><li>Accounting for non-immediate resource changes such as page cache write backs</li></ul></li></ul></blockquote><hr><p><a href="http://sunisdown.me/linux-io.html" title="Permalink to Linux IO" target="_blank" rel="noopener">Linux IO</a></p><p>Linux File I/O，Mmap，Driect I/O read/write，Asynchronous direct I/O</p><hr><p><a href="https://engineering.linkedin.com/blog/2022/operating-system-upgrades-at-linkedin-s-scale" target="_blank" rel="noopener">Operating system upgrades at LinkedIn’s scale</a></p><p>[[linkedin]] 关于如何进行系统升级 OSUA 的介绍。内部运行数十万台物理服务器，在服务器升级前，会将目标服务器上的服务进行驱逐，在服务控制组件中，定义每个服务可以容忍的故障比例，OSUA 会确保所有应用都可容忍后，再进行升级，否则等待。为了避免多个运维操作同时执行，内部开发了中心化的锁服务(多层级)，保证OSUA 操作独立。针对有状态应用(主要输数据层应用)，会调用外部组件 STORU 来触发集群管理组件，在预升级阶段进行数据迁移动作，减少升级影响。</p><hr><p><a href="https://colobu.com/2022/09/01/fizzbuzz-in-go/" target="_blank" rel="noopener">啊哈，一道有趣的Go并发题</a></p><p>[[LeetCode]] fizzbuzz 并发题。使用单一 Channel 加多个 Goroutine 实现。</p><hr><p><a href="https://jvns.ca/blog/2022/08/30/a-way-to-categorize-debugging-skills/" target="_blank" rel="noopener">Some ways to get better at debugging</a></p><p>阅读代码，了解系统，掌握工具，有足够的经验。</p><hr><p><a href="https://ali.sattari.me/posts/2021/what-should-be-on-a-sli-dashboard/" target="_blank" rel="noopener">What should be on a SLI dashboard</a></p><p>[[SLI]] Dashboard 应该如何设置。</p><hr><p><a href="https://www.gitpod.io/blog/gitpod-installer" target="_blank" rel="noopener">Why we moved from Helm to Gitpod Installer</a></p><p>[[Gitpod]] 从 [[Helm]] 切换到自己维护一个安装器。Helm 维护困难，很容易犯错，缺乏编辑器支持和静态检查支持。</p><hr><p><a href="https://shibumi.dev/posts/day-in-the-life-of-a-package-maintainer-reproducible-go-packages/" target="_blank" rel="noopener">Day in the life of a package maintainer: Reproducible Go packages</a></p><p>作为一个 [[Arch]] 包管理维护者要做的事情，构建 Reproducible 的 Golang 包。</p><hr><p><a href="https://metrist.io/blog/is-sre-just-ops-with-a-new-name/" target="_blank" rel="noopener">Is SRE Just Ops with a New Name?</a></p><p>关于类似的讨论真的太多了，我觉得很没有必要，就好像我司的 slogan 是 <code>Make IT Simple</code> ，我们最终让用户(无论是开发还是运维)感受到使用方便、快捷、高效就足够了。</p><hr><p><a href="https://brooker.co.za/blog/2022/09/02/ecdf.html" target="_blank" rel="noopener">Histogram vs eCDF</a></p><p>eCDF 比直方图更直观，比如在观察部分占比时，CDF 也可以直接放大局部而不影响整体。</p><hr><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://www.toobug.net/article/life/2022/what-does-epidemic-changed.html" target="_blank" rel="noopener">疫情改变了什么</a></p><blockquote><p><strong>疫情防控叠加经济下行，直接将很多人的需求打回了“生理需求”层次。</strong></p></blockquote><hr><p><a href="https://pudding.cool/2022/08/censorship/" target="_blank" rel="noopener">The Big Censored Theory</a></p><p>内容精彩，设计也精彩，赏心悦目。</p><hr><p><a href="https://www.kawabangga.com/posts/3671" target="_blank" rel="noopener">欧格玛教会与言论自由</a></p><p><a href="https://blog.cloudflare.com/terminating-service-for-8chan/" target="_blank" rel="noopener">Terminating Service for 8Chan</a></p><p><a href="https://blog.cloudflare.com/kiwifarms-blocked/" target="_blank" rel="noopener"># Blocking Kiwifarms</a></p><p><a href="https://blog.cloudflare.com/zh-cn/cloudflares-abuse-policies-and-approach-zh-cn/" target="_blank" rel="noopener">Cloudflare 的滥用处理政策和方法</a></p><p>我不理解，这让我困惑，包括很多人的言论让我恍惚，我需要一些输入来帮助我产生自己的思考。(如果大家有推荐的书籍请告诉我)</p><hr><p><a href="https://xargin.com/value-of-platform/" target="_blank" rel="noopener">平台到底有什么价值</a></p><blockquote><p>滴滴和美团在南京短兵相接的时候，运营的弱点完全暴露出来了，双方都是财大气粗，准备了几亿现金要砸在优惠券上的，然而美团的活动往往能够在几天内全面开展，而滴滴的活动却需要半个月~一个月时间开发才能完成。美团只花了很短的时间，就吃下了南京市非常大的市场份额。</p></blockquote><blockquote><p>滴滴在和别人正面竞争之后才发现虽然老板天天都在讲战役，真碰上牛叉对手了以后自己像是用大刀去砍大炮的小丑。这次滑铁卢一般的失败直接导致了滴滴解散了将近百人的运营技术部门，重新规划了新的运营系统。</p></blockquote><blockquote><p>内卷并不能卷出好的结果，平台建设能够带来的生产力提升是数量级的，加班只不过能让昏庸的领导开心而已。路线对了，才能过上好日子。</p></blockquote><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《壮志凌云2：独行侠》，被称为美国战狼，剧情走向完全可以预测，但还是很精彩。</p><p>《日班猎人》，这个剧情如果换成国产电影，那么评分估计朝着 4分去了，不理解现在还有6.5 的原因。</p><p>《脱口秀大会 第五季》，当脱口秀不能带给我快乐，反而让我气愤的时候，就不应该再继续看他了。还是期待线下的单口喜剧吧，争取今年能看一个专场。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>如何平(优）滑（雅）的抛弃 CentOS7</title>
    <link href="https://zdyxry.github.io/2022/08/28/%E5%A6%82%E4%BD%95%E5%8E%9F%E5%9C%B0%E5%8D%87%E7%BA%A7CentOS7/"/>
    <id>https://zdyxry.github.io/2022/08/28/如何原地升级CentOS7/</id>
    <published>2022-08-28T13:00:00.000Z</published>
    <updated>2022-11-07T02:06:46.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>CentOS 7 自身的生命周期截止到 2024年6月30日。在2020年底，CentOS 社区宣布修改现有的发布模式，将 CentOS 从作为 RHEL 的下游改为 CentOS Stream，即 RHEL 的上游，更导致 CentOS8的生命周期短的可怜，这让社区中原本就对 CentOS 不满的开发者/使用者不满，从而出现了抛弃 CentOS 转投其他发行版的情况。</p><p>大家选择使用 CentOS ，虽然都在说稳定，但是我理解更看重的是 RedHat 在身后背书，CentOS 作为 RHEL 的下游，所有的软件版本都是经过 RedHat 测试验证的，且后期维护也是有 RedHat 的身影在，不担心维护的问题。</p><p>CentOS 原有的模式也是有问题的，用户很难参与到 RHEL 的研发周期。用户发现了 CentOS 某个版本存在问题，想要给 CentOS 进行贡献，让 CentOS 下一个版本修复该问题。此时只有一条路，就是贡献给开源组件自身，但是这样也只是存在修复的可能，最终是否可能修复还是看 RedHat 开发人员的决定（毕竟 RHEL/CentOS 中存在大量开源组件自身不包含，但是 RHEL/CentOS 通过 rpm spec 中进行 Patch 的方式包含的 Patch）。在引入了 CentOS Stream 之后，用户就可以通过贡献给 CentOS 社区，来保证 CentOS 下一个版本包含该 Patch，至于 RHEL 是否包含，用户并不关心，那是 RedHat 关心的问题。</p><p>Fedora 更关注于上游社区最新的代码，包含最丰富的功能，作为先驱者；CentOS Stream 作为 RHEL 的上游，提供稳定可靠的持续交付版本，保证更多的贡献者可以参与进来；RHEL 给企业用户使用，有 RedHat 提供完整的维护服务。</p><p>在现有的模式下，CentOS Stream 已经与原有采用 CentOS 的用户初衷背离，已有的 CentOS7 用户需要寻找新的替代品，在国产化的浪潮下，选择的方向也发生了一定的变化。</p><h3 id="社区替代品"><a href="#社区替代品" class="headerlink" title="社区替代品"></a>社区替代品</h3><p>Rocky Linux</p><blockquote><p>Rocky Linux aims to function as a downstream build as CentOS had done previously, building releases after they have been added to the upstream vendor, not before.</p></blockquote><p>AlmaLinux</p><blockquote><p>AlmaLinux OS is replacing CentOS as the downstream rebuild of RedHat Enterprise Linux.</p></blockquote><p>在 CentOS 宣布策略改变之后，社区中出现了两个替代品，分别是 Rocky Linux 和 AlmaLinux，它俩的目的都是一样的，作为RHEL 的下游来构建发布，且发布模式和发布周期采用 CentOS 原有模式。</p><p>通过 AlmaLinux 官方提供的<a href="[https://wiki.almalinux.org/Comparison.html](https://wiki.almalinux.org/Comparison.html">发行版比较</a>)可以看到，AlmaLinux 和 Rocky Linux 两者对于用户来说没什么差别，如果一定要较真，那就是 AlmaLinux 大部分人员是来自 CloudLinux 公司，而 Rocky Linux 是 Greg 公司。</p><h3 id="国产替代品"><a href="#国产替代品" class="headerlink" title="国产替代品"></a>国产替代品</h3><p>Anolis OS（阿里巴巴）</p><blockquote><p>Anolis OS 8 是 OpenAnolis 社区推出的完全开源、中立、开放的发行版，它支持多计算架构，也面向云端场景优化，兼容 CentOS 软件生态。Anolis OS 8 旨在为广大开发者和运维人员提供稳定、高性能、安全、可靠、开源的操作系统服务。</p></blockquote><p>openEuler（华为）</p><blockquote><p>openEuler是一款开源操作系统。当前openEuler内核源于Linux，支持鲲鹏及其它多种处理器，能够充分释放计算芯片的潜能，是由全球开源贡献者构建的高效、稳定、安全的开源操作系统，适用于数据库、大数据、云计算、人工智能等应用场景。同时，openEuler是一个面向全球的操作系统开源社区，通过社区合作，打造创新平台，构建支持多处理器架构、统一和开放的操作系统，推动软硬件应用生态繁荣发展。</p></blockquote><p>银河麒麟操作系统</p><blockquote><p>银河麒麟高级服务器操作系统V10是针对企业级关键业务，适应虚拟化、云计算、大数据、工业互联网时代对主机系统可靠性、安全性、性能、扩展性和实时性等需求，依据CMMI5级标准研制的提供内生本质安全、云原生支持、自主平台深入优化、 高性能、易管理的新一代自主服务器操作系统</p></blockquote><p>在国产化浪潮下，如果产品需要满足信创标准，那么操作系统的选择需要考虑国产替代品，目前（个人了解）符合信创标准的操作系统只有银河麒麟，openEuler 和 Anolis OS 目前还无法完全通过信创评审。在这一系列的替代品中， Rocky Linux, AlmaLinux, Anolis OS 所采用的发布模式和版本控制方式，都维持 CentOS原有模式，即 8.1, 8.2, 8.3 发布方式。openEuler 和银河麒麟操作系统虽然也采用 RPM 作为包管理器并且大部分组件版本与社区中的 CentOS 8 相同，但是不能完全等价，这里需要注意。</p><h3 id="比较选择"><a href="#比较选择" class="headerlink" title="比较选择"></a>比较选择</h3><p>如果要满足信创要求，那么只能选择银河麒麟作为替代品；如果从使用角度考虑，选择 Rocky Linux/AlmaLinux/Anolis OS 是更好的选择，有良好的社区支持，版本控制也与 CentOS 保持一致，心智负担更低；如果从国产硬件支持考虑，openEuler 是不错的选择。</p><p>上述讨论的各个发行版，当前所采用的包管理器均为 RPM，所有软件均已 RPM 为粒度安装，在 RPM 之上，会存在 Yum/DNF 包含 RPM 依赖管理、冲突管理、升降级等功能的基于 RPM 的包管理器。其中 CentOS 7 系列所采用的基于RPM 的包管理器是 Yum，其他发行版当前维护版本所采用的基于 RPM 包管理器是 DNF(Dandified Yum)。</p><h2 id="升级转换"><a href="#升级转换" class="headerlink" title="升级转换"></a>升级转换</h2><p>在现有使用了 CentOS 7 的环境中，需要使用替代品将 CentOS 7 升级转换为目标发行版。</p><p>如果应用环境都是单体应用，且可以有下线维护时间，进行数据备份然后完整的重装 OS 是一个稳妥的选择。如果应用环境是集群，且大部分应用都已经容器化了，那么依次进行单节点重装 OS 需要认真测试验证，不同的发行版版本的默认系统参数可能存在差异，哪怕上层基础平台保证了版本一致（如 Kubernetes,containerd,runc 的版本一致），也可能导致异常情况。</p><p>如果选择不重装 OS，原地升级转换的话有两种方式：自动和手动。其中 Rocky Linux/AlmaLinux/Anolis OS 提供自动升级转换方式，openEuler 和银河麒麟可以采用手动转换方式。</p><h3 id="自动流程"><a href="#自动流程" class="headerlink" title="自动流程"></a>自动流程</h3><p>自动升级转换依赖于 <a href="[https://github.com/oamg/leapp](https://github.com/oamg/leapp">Leapp</a>)，Leapp 由 Redhat 员工开发的开源工具，Leapp 自身只是一个工作流框架，其中包含 Actor、Model、Message、Workflow 等概念，具体组件关系图如下，其中 workerflow 包含多个 phase，每个 phase 含有3个 stage：Before，Main，After，每个 stage 中包含多个 Actors，其中 Actors 之间没有严格的顺序，而是靠 Message 通信，Message 遵循 Model 的定义，如果 ActorA 依赖了 ActorB 产生的 MessageB，那么 ActorA 会在 ActorB 之后执行，没有 MessageB 依赖的 ActorC 会按照加载顺序执行，没有严格顺序依赖。</p><p>目前 Leapp 主要使用场景是用于 RedHat 系发行版升级、不同发行版之间的升级切换等。</p><p>在完整的升级流程中，使用统一定义的 Workflow，不同阶段（如预升级、升级、Firstboot）都是调用的同一个 Workflow，只是根据指定的不同的 Tag、参数来决定执行的 Phase 不同。</p><ul><li>预升级（preupgrade），进行环境信息的收集与检查，将检查结果以报告的形式提供给用户，这里进行的信息收集及检查项数量很大，包含了很多细节，除了包含一些基础组件的检查：CPU 架构、openssh 配置变更、PAM 模块变更、Driver 支持、NTP 变更等之外，还包含一些第三方应用的检查：SAP HANA、Memcached、宝塔等。</li><li>升级（upgrade），升级的主要动作，与预检查使用的是相同 Workflow。<ul><li>configuration_phase</li><li>FactsCollection</li><li>Checks</li><li>TargetTransactionFactsCollection，生成临时 minimal 环境，包含完整的目标版本的运行环境，用于使用目标版本的工具栈，比如 DNF、RPM 高级特性等，该环境还会用来生成下一步骤所需的 initramfs image</li><li>TargetTransactionCheck，通过上述生成的 minimal 环境，使用其中的 dnf 工具，dnf rhel-upgrade check 来检查当前节点是否可以进行升级</li><li>Reports</li><li>Download，升级所需软件包下载步骤， dnf rhel-upgrade download</li><li>InterimPreparation，生成下一步骤所需的 initramfs，在前述步骤中的minimal 环境中安装 dracut 相关工具包，<a href="https://github.com/oamg/leapp-repository/blob/master/repos/system_upgrade/common/actors/initramfs/upgradeinitramfsgenerator/files/generate-initram.sh" target="_blank" rel="noopener">使用 dracut</a> 生成 initramfs image，生成完成后调整系统启动项，将其置为第一个启动项</li></ul></li><li>临时环境升级（Interim Upgrade），真正执行 RPM 升级的步骤，与预检查使用的是相同的 Workflow<ul><li>在系统reboot 后，系统引导到前置步骤生成的 initramfs 中，系统正常引导，dracut hook 中，增加了两个 hook，分别是 <a href="https://github.com/oamg/leapp-repository/tree/master/repos/system_upgrade/common/actors/commonleappdracutmodules/files/dracut/85sys-upgrade-redhat" target="_blank" rel="noopener">85sys-upgrade-redhat</a> 和 <a href="https://github.com/oamg/leapp-repository/tree/master/repos/system_upgrade/common/actors/commonleappdracutmodules/files/dracut/90sys-upgrade" target="_blank" rel="noopener">90sys-upgrade</a>， 其中 85 是真正执行节点软件包升级的动作(leapp upgrade –resume），90 配置 systemd upgrade unit （与重启相关）</li><li>InitRamStart，移除启动项设置</li><li>LateTests</li><li>Preparation</li><li>RPMUpgrade，dnf rhel-upgrade upgrade 升级 RPM</li><li>Applications</li><li>ThirdPartyApplications</li><li>Finalization</li></ul></li><li>升级后动作（Firstboot），系统升级完成会，会自动 reboot 进入到目标版本系统中，此时会执行 Firstboot 阶段，在执行完成后，系统升级完成<ul><li>FirstBoot，执行清理动作，修改部分配置（NM）等</li></ul></li></ul><p>完整升级流程共执行 4次 Workflow，其中采用临时环境执行升级动作的目的是：升级动作执行工具链是目标环境对应版本的工具链。</p><h3 id="自动实现方式"><a href="#自动实现方式" class="headerlink" title="自动实现方式"></a>自动实现方式</h3><p>项目地址列表：</p><ul><li><a href="https://github.com/oamg/leapp" target="_blank" rel="noopener">https://github.com/oamg/leapp</a></li><li><a href="https://github.com/oamg/leapp-repository" target="_blank" rel="noopener">https://github.com/oamg/leapp-repository</a></li><li><a href="https://github.com/AlmaLinux/leapp-data" target="_blank" rel="noopener">https://github.com/AlmaLinux/leapp-data</a></li></ul><p>其中 leapp 是框架自身，leapp-repository 是 Leapp 的应用实现，也就是升级中所执行的 Actor 实现，leapp-data 是升级中所用到的基础配置信息。不同发行版会维护自己的 leapp-repository，比如Anolis OS 就维护了自己的 Git 仓库（在 Gitee 上），并针对性的增加了自己的检查项。在 Leapp 的架构中，因为最终的应用会以独立的插架形式安装，所以 Python 的 syspath 可能会发生变化，在查看代码的时候需要对应的修改一下路径地址。以 NTP 检查为例：</p><p>NTP 检查的 Actor 实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">from leapp.actors <span class="keyword">import</span> Actor</span><br><span class="line">from leapp.libraries.actor.checkntp <span class="keyword">import</span> check_ntp</span><br><span class="line">from leapp.models <span class="keyword">import</span> InstalledRedHatSignedRPM, NtpMigrationDecision, Report</span><br><span class="line">from leapp.tags <span class="keyword">import</span> ChecksPhaseTag, IPUWorkflowTag</span><br><span class="line"></span><br><span class="line">class CheckNtp(Actor):</span><br><span class="line">    <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    Check if ntp and/or ntpdate configuration needs to be migrated.</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line">    name = <span class="string">'check_ntp'</span></span><br><span class="line">    consumes = (InstalledRedHatSignedRPM,)</span><br><span class="line">    produces = (Report, NtpMigrationDecision)</span><br><span class="line">    tags = (ChecksPhaseTag, IPUWorkflowTag)</span><br><span class="line"></span><br><span class="line">    def process(self):</span><br><span class="line">        installed_packages = set()</span><br><span class="line"></span><br><span class="line">        signed_rpms = self.consume(InstalledRedHatSignedRPM)</span><br><span class="line">        <span class="keyword">for</span> rpm_pkgs in signed_rpms:</span><br><span class="line">            <span class="keyword">for</span> pkg in rpm_pkgs.items:</span><br><span class="line">                installed_packages.add(pkg.name)</span><br><span class="line"></span><br><span class="line">        self.produce(check_ntp(installed_packages))</span><br></pre></td></tr></table></figure><p> Actor 中调用的 <code>check_ntp</code> 函数实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># Check services from the ntp packages <span class="keyword">for</span> migration</span><br><span class="line">def check_ntp(installed_packages):</span><br><span class="line">    service_data = [(<span class="string">'ntpd'</span>, <span class="string">'ntp'</span>, <span class="string">'/etc/ntp.conf'</span>),</span><br><span class="line">                    (<span class="string">'ntpdate'</span>, <span class="string">'ntpdate'</span>, <span class="string">'/etc/ntp/step-tickers'</span>),</span><br><span class="line">                    (<span class="string">'ntp-wait'</span>, <span class="string">'ntp-perl'</span>, None)]</span><br><span class="line"></span><br><span class="line">    migrate_services = []</span><br><span class="line">    migrate_configs = []</span><br><span class="line">    <span class="keyword">for</span> service, <span class="keyword">package</span>, main_config in service_data:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">package</span> in installed_packages and \</span><br><span class="line">                check_service(<span class="string">'&#123;&#125;.service'</span>.format(service)) and \</span><br><span class="line">                (not main_config or is_file(main_config)):</span><br><span class="line">            migrate_services.<span class="built_in">append</span>(service)</span><br><span class="line">            <span class="keyword">if</span> main_config:</span><br><span class="line">                migrate_configs.<span class="built_in">append</span>(service)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> migrate_configs:</span><br><span class="line">        reporting.create_report([</span><br><span class="line">            reporting.Title(<span class="string">'&#123;&#125; configuration will be migrated'</span>.format(<span class="string">' and '</span>.join(migrate_configs))),</span><br><span class="line">            reporting.Summary(<span class="string">'&#123;&#125; service(s) detected to be enabled and active'</span>.format(<span class="string">', '</span>.join(migrate_services))),</span><br><span class="line">            reporting.Severity(reporting.Severity.LOW),</span><br><span class="line">            reporting.Groups([reporting.Groups.SERVICES, reporting.Groups.TIME_MANAGEMENT]),</span><br><span class="line">        ] + related)</span><br><span class="line"></span><br><span class="line">        # Save configuration files that will be renamed in the upgrade</span><br><span class="line">        config_tgz64 = get_tgz64(files)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        api.current_logger().info(<span class="string">'ntpd/ntpdate configuration will not be migrated'</span>)</span><br><span class="line">        migrate_services = []</span><br><span class="line">        config_tgz64 = <span class="string">''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    return NtpMigrationDecision(migrate_services=migrate_services, config_tgz64=config_tgz64)</span></span><br></pre></td></tr></table></figure><h3 id="手动流程"><a href="#手动流程" class="headerlink" title="手动流程"></a>手动流程</h3><p>对于 Linux 发行版来说，整体是由无数个 RPM 组成的，最终系统中看到的最小粒度就是 RPM，我们可以通过 RPM 的升级来完成整体的发行版的升级变更。但是对于部分 RPM 来说，RPM 之间的依赖阻碍了我们无法通过依次升级部分 RPM 的方式来完成完整的升级替换，其中一些关键组件，如 glibc、glib2、openssl 等等都是强依赖的，我们必须要找到一个方式来完成整体的升级。在 Yum 中，存在 <code>distribution-synchronization</code> 命令用来同步当前 OS 中所有的 RPM到目标 Repository 中的版本，但是用 Yum 可能会存在无法识别 rpmlib 的情况。RPM 作为基础包管理器，自身会存在部分高级特性以 rpmlib 的依赖形式提供，如果当前系统的包管理器无法识别 rpmlib，那么就会在同步过程中出现无法解决的依赖冲突。</p><p>举例：目标 RPM 为 dnf-4.2.23-6.oe1.noarch.rpm ，升级提示依赖 rpmlib(RichDependencies) &lt;= 4.12.0-1 冲突。这是因为 dnf-4.2.23 这个 RPM 在构建的阶段，所使用的 rpm 环境（可能是在 openEuler 20.03 或更高版本）比当前 OS 的 RPM 版本（CentOS 7）高，所以当前 rpm 无法满足这个依赖条件。</p><p>我们可以使用 DNF 的 <code>distro-sync</code> 并配合部分的 RPM 修改，来完成手动升级转换。流程如下：</p><ul><li>将当前 CentOS7 升级到 CentOS 7.x 系列最新版本；</li><li>停止节点上运行的所有应用</li><li>配置 CentOS7 Repository ，安装 DNF（DNF依赖于 glib2 的执行版本，但是未在 spec 中声明，需要单独升级 glib2）</li><li>移除 Yum 管理器，防止与 DNF 产生冲突</li><li>配置目标发行版 Repository</li><li>使用 <code>dnf distro-sync</code> 进行升级转换</li><li>使用 <code>dnf remove</code> 移除无用 RPM</li><li>重启主机生效</li></ul><h3 id="手动实现方式"><a href="#手动实现方式" class="headerlink" title="手动实现方式"></a>手动实现方式</h3><p>当前 CentOS7 包管理器是 Yum，在目标版本中包管理器是 DNF，在通过 Yum 安装 DNF ，在保证 Yum(DNF) Repository 配置是目标版本的前提下，使用 <code>dnf distro-sync</code> 命令来进行 RPM 的升级和同步，该命令会将当前 OS 已经安装的 RPM 与 Yum Repository 中的 RPM 进行匹配。 RPM 版本匹配存在以下几种情况：</p><ul><li>当前 RPM 版本低于目标 Repository 中包含的 RPM版本，则会升级；</li><li>当前 RPM 版本高于目标 Repository 中包含的 RPM 版本，则会降级；</li><li>当前 RPM 被目标 Repository 中包含的 RPM 所替代（指定 Obsolete），则会安装新 RPM，原有 RPM 被卸载（替代）；</li><li>当前 RPM 版本与目标 Repository 中包含的 RPM 版本相同，但 dist 等其他 RPM 元数据不同，则会重新安装；</li><li>当前 RPM 是被其他 RPM 依赖引入的，但是其他 RPM 已经被替代，则该 RPM 会被卸载；</li><li>当前 RPM 在目标 Repository 中不包含，则不会进行处理；</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过自动或者手动的方式，我们可以原地将 CentOS 7 升级转换为我们想要的目标发行版。社区的 Rocky Linux/AlmaLinux/Anolis OS 可以采用自动的方式完成 ，国产非等价替代的 openEuler 可以采用控制 Repository 的方式手动完成，减少发行版变更带来的工作量。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/upgrading_from_rhel_7_to_rhel_8/index" target="_blank" rel="noopener">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html-single/upgrading_from_rhel_7_to_rhel_8/index</a></li><li><a href="https://www.google.com/url?q=https://www.itzgeek.com/how-tos/linux/centos-how-tos/how-to-upgrade-centos-7-to-rocky-linux-8.html&amp;sa=D&amp;source=docs&amp;ust=1661663555017475&amp;usg=AOvVaw1uCCWoVaNbLfVkE6paJqA5" target="_blank" rel="noopener">https://www.google.com/url?q=https://www.itzgeek.com/how-tos/linux/centos-how-tos/how-to-upgrade-centos-7-to-rocky-linux-8.html&amp;sa=D&amp;source=docs&amp;ust=1661663555017475&amp;usg=AOvVaw1uCCWoVaNbLfVkE6paJqA5</a></li><li><a href="https://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/RPM_Guide/ch05s02.html" target="_blank" rel="noopener">https://docs.fedoraproject.org/en-US/Fedora_Draft_Documentation/0.1/html/RPM_Guide/ch05s02.html</a></li><li><a href="https://copyprogramming.com/howto/rpmlib-filedigests-dependency-error-on-suse" target="_blank" rel="noopener">https://copyprogramming.com/howto/rpmlib-filedigests-dependency-error-on-suse</a></li><li><a href="https://lists.fedoraproject.org/archives/list/devel@lists.fedoraproject.org/thread/VVVD6QQUARKZJ5RBV46IQBYMSKYPT4YO/" target="_blank" rel="noopener">https://lists.fedoraproject.org/archives/list/devel@lists.fedoraproject.org/thread/VVVD6QQUARKZJ5RBV46IQBYMSKYPT4YO/</a></li><li><a href="https://github.com/uyuni-project/uyuni/issues/4000" target="_blank" rel="noopener">https://github.com/uyuni-project/uyuni/issues/4000</a></li></ul>]]></content>
    
    <summary type="html">
    
      将 CentOS 7 原地升级转换为 Rocky Linux/AlmaLinux/Anolis OS/openEuler。
    
    </summary>
    
    
      <category term="Linux" scheme="https://zdyxry.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-08-28</title>
    <link href="https://zdyxry.github.io/2022/08/28/Weekly-Issue-2022-08-28/"/>
    <id>https://zdyxry.github.io/2022/08/28/Weekly-Issue-2022-08-28/</id>
    <published>2022-08-28T10:00:00.000Z</published>
    <updated>2022-11-07T02:06:46.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://speakerdeck.com/suiong_ng/steam-deck-linux-container-and-the-arch-community" target="_blank" rel="noopener">Steam Deck, Linux Container and the Arch Community</a></p><p>关于 [[Steam Deck]] OS 的介绍，底层是 [[Arch]] Linux，采用的是 A/B 升级方式，应用采用 [[Flatpak]] 方式进行安装升级(保证安全性)。现在关于这种 OS 比较轻，应用采用容器化的模式应该是很成熟了。</p><hr><p><a href="https://www.software.com/reports/code-time-report" target="_blank" rel="noopener">Global Code Time Report</a></p><p>编码时间报告。平均每天编码时间少于 1 小时，周三是编码时间最多的，很少有开发人员每天编码时间超过 2 小时。</p><hr><p><a href="https://www.netmeister.org/blog/ops-lessons.html" target="_blank" rel="noopener">(A few) Ops Lessons We All Learn The Hard Way</a></p><p>一些“经验”教训。比如：在某个你没有在意过的服务，会解析 DNS来完成某项工作。关掉 TCP 53 可能会有奇怪的事情发生。正在查看的源代码不是在生产中运行的代码。如果一周内没有完成故障复盘，那有可能永远也无法完成。没有人知道你在做什么。</p><hr><p><a href="https://www.usenix.org/conference/fast16/technical-sessions/presentation/harter" target="_blank" rel="noopener">Slacker: Fast Distribution with Lazy Docker Containers</a></p><p>76%的时间花费在镜像的拉取。容器真正运行需要的有效数据只占用镜像大小的 6%。</p><p>镜像大小中，低层级(&lt;9)的数据占到了镜像大小的一半以上。</p><hr><p><a href="https://blog.tianfeiyu.com/2022/06/30/kubernetes_descheduler/" target="_blank" rel="noopener">Kubernetes 中 Descheduler 组件的使用与扩展</a></p><p>Descheduler 通过触发 Pod 的驱逐，来保证集群内资源分布均衡，达到 DRS效果。作者提出了 Descheduler 改进后的评估方式。</p><hr><p><a href="https://endtimes.dev/why-your-website-should-be-under-14kb-in-size/" target="_blank" rel="noopener">WHY YOUR WEBSITE SHOULD BE UNDER 14KB IN SIZE</a></p><p>将网页大小保持在 14KB 以下可以保证加载速度。</p><p>大多数服务器 TCP 慢启动算法从发送 10 个 TCP 数据包开始。TCP 数据包的最大大小为<code>1500 bytes</code>.</p><p>这个最大值不是由 TCP 规范设置的，它来自<a href="https://en.wikipedia.org/wiki/Ethernet_frame" target="_blank" rel="noopener">以太网标准</a>。每个 TCP 数据包在其标头中使用<strong>40 个字节</strong><a href="https://en.wikipedia.org/wiki/IPv4#Packet_structure" target="_blank" rel="noopener">——16 个字节用于 IP</a>，另外<a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure" target="_blank" rel="noopener">24 个字节用于 TCP</a>。每个 TCP 数据包剩下<strong>1460 个字节。</strong><code>10 x 1460 = 14600 bytes</code>或大约 14kB。 [[QUIC]] 同样。</p><hr><p><a href="https://www.lastweekinaws.com/blog/sagemaker_is_responsible_for_my_surprise_bill/" target="_blank" rel="noopener">Amazon SageMaker Is Responsible for My Surprise Bill</a></p><p>AWS 账单真的太复杂了，复杂到我不去使用它。</p><hr><p><a href="https://www.infoworld.com/article/3669477/devs-don-t-want-to-do-ops.html" target="_blank" rel="noopener">Devs don’t want to do ops</a></p><p>关于开发人员和运维人员的讨论。事实上，根据<a href="https://hello-tanzu.vmware.com/state-of-kubernetes-2022/" target="_blank" rel="noopener">VMware 的《2022 年 Kubernetes 现状》报告</a>，776 名受访者中有 54% 的人表示，更好的开发人员效率是采用 Kubernetes 的关键原因，超过三分之一（37%）的人表示他们希望提高运维效率。</p><hr><p><a href="https://matt-rickard.com/the-value-is-in-the-api" target="_blank" rel="noopener">The Value is in the API</a></p><p>关注于接口设计比关注实现更重要。</p><hr><p><a href="https://matt-rickard.com/developer-velocity-checklist" target="_blank" rel="noopener">Designing Developer Velocity</a></p><p>如何提升开发效率，通常大家会从使用角度来进行分析，作者列出了一些最佳实践。</p><hr><p><a href="https://shkspr.mobi/blog/2022/08/the-point-of-a-dashboard-isnt-to-use-a-dashboard/" target="_blank" rel="noopener">The point of a dashboard isn’t to use a dashboard</a></p><p>Dashboard 的目的是可以让系统的所有组件都可以提供数据访问接口，让你知道你可以掌控这些原始数据。</p><hr><p><a href="https://datree.io/resources/kubernetes-readiness-and-liveness-probes-best-practices" target="_blank" rel="noopener">6 Best Practices for Effective Readiness and Liveness Probes</a></p><p>关于 [[kubernetes]] 的 [[Readiness]] 和 [[Liveness]] 最佳实践。</p><p>根据应用实际情况适当的调整参数：<code>initialDelaySeconds</code>，<code>timeoutSeconds</code>, <code>periodSeconds</code>, <code>successThreshold</code>, <code>failureThreshold</code></p><p>不要只检测 HTTP 200 返回码，应该检查应用所有的依赖，如数据库连接，缓存连接。</p><hr><p><a href="https://freeman.vc/notes/falling-for-kubernetes" target="_blank" rel="noopener">Falling for Kubernetes</a></p><p>有时候在公有云使用 [[kubernetes]] 服务是一个更好的选择，但是这个前提是有人帮你维护 [[kubernetes]]，如果是私有环境，维护应该还是一个大问题。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://xiaowenz.com/blog/2022/08/finance-management/" target="_blank" rel="noopener">不记账的个人财务管理说明书</a></p><p>个人日常会记录自己的每笔开销，每个月固定时间也会进行二次校正。但是我没有真正的进行预算的控制，只是每个月大概有个心理预期，可以尝试一下明确自己各项开销的预算设置，尝试一下。</p><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《非常律师禹英禑》，前半部很好，后半部不太行，父母的情感纠葛感觉完全没有必要，男主的存在或者动机显得有些突兀。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-08-21</title>
    <link href="https://zdyxry.github.io/2022/08/21/Weekly-Issue-2022-08-21/"/>
    <id>https://zdyxry.github.io/2022/08/21/Weekly-Issue-2022-08-21/</id>
    <published>2022-08-21T23:00:00.000Z</published>
    <updated>2022-11-07T02:06:46.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://linux.cn/article-14927-1.html" target="_blank" rel="noopener">与 CentOS 社区委员对话后 CentOS 时代</a></p><p>[[centos]] stream 之前的阶段，用户很难参与到 [[RHEL]] 的研发阶段，无法直接通过 [[centos]] 贡献代码，来保证下一个版本的 [[centos]] 包含自己所发现的问题修复，只能通过贡献给组件自身，然后由 RedHat 开发人员决定是否包含在下一个版本中。在 [[centos stream]] 之后的阶段，用户可以直接贡献给 [[centos]]，保证 [[centos]] 包含问题修复，至于 [[RHEL]] 是否修复，由 RedHat 自身决定。</p><p><strong>关于 Fedora、Stream，还有 RHEL 未来的发展计划是什么？</strong></p><ul><li>从社会组织的维度：  <ul><li><ol><li>Fedora：主题是如何提高对 Fedora 的贡献，如何使得社区更多样化；  </li></ol></li><li><ol start="2"><li>CentOS Stream：和 Fedora 差不多，提高社区贡献和使社区更多样化，另外就是发展 SIG（特殊兴趣小组），充分发挥 SIG 的作用；  </li></ol></li><li><ol start="3"><li>RHEL：进一步繁荣包括社区、合作伙伴、客户的 RHEL 生态  </li></ol></li></ul></li><li>从代码的维度：  <ul><li>Fedora：  <ul><li>集成上游社区最新最好的代码，功能最丰富，做业界的引领者；  </li><li>面向特定的场景，做特色的发行版，如 Fedora IoT 就是面向物联网场景的 Fedora 操作系统。  </li></ul></li><li>CentOS Stream：  <ul><li>RHEL 稳定可靠的持续交付版，用户可以提前看到即将发布的 RHEL 版本；  </li><li>基于稳定的代码基础，通过社区发展 SIG，在特定领域创新。  </li></ul></li><li>RHEL：  <ul><li>我们面向客户的销售团队有很多关于产品的介绍，但我今天不是来为产品做广告的。我相信红帽大中华区的同事们可以给您很好的支持。  </li></ul></li></ul></li></ul><hr><p><a href="https://chinese.catchen.me/2022/08/interview-question-ship-new-feature-or-refactor-old-code.html?utm_source=dlvr.it&amp;utm_medium=feed&amp;utm_campaign=catchen" target="_blank" rel="noopener">面试题：开发新功能和重构老代码之间怎么选？</a></p><p>对于所有商业公司来说，第一原理永远是商业，不是产品也不是技术。</p><hr><p><a href="https://coolshell.cn/articles/10804.html" target="_blank" rel="noopener">X-Y PROBLEM</a></p><p>1）有人想解决问题X2）他觉得Y可能是解决X问题的方法3）但是他不知道Y应该怎么做4）于是他去问别人Y应该怎么做？<strong>没有去问怎么解决问题X，而是去问解决方案Y应该怎么去实现和操作</strong>。<br>X-Y Problem最大的严重的问题就是：**在一个根本错误的方向上浪费他人大量的时间和精力。</p><hr><p><a href="https://www.hashicorp.com/blog/nomad-kubernetes-a-pragmatic-look-at-choosing-orchestrators" target="_blank" rel="noopener">Nomad, Kubernetes, and a Pragmatic Look at Choosing Orchestrators</a></p><p>什么场景下使用 Nomad，什么场景下使用 Kubernetes？</p><hr><p><a href="https://www.kawabangga.com/posts/4794" target="_blank" rel="noopener">用 Wireshark 分析 TCP 吞吐瓶颈</a></p><p>手把手教学</p><hr><p><a href="https://www.raychase.net/7087" target="_blank" rel="noopener">常见分布式应用系统设计图解（十四）：日志系统</a></p><p>日志系统组件设计。</p><hr><p><a href="https://blog.danslimmon.com/2019/05/03/no-observability-without-theory/" target="_blank" rel="noopener">No observability without theory</a></p><ul><li>Data is just data until theory makes it signal.The next time you need to build an observable system, or make a system more observable, take the time to consider not just what data the system produces, but how to surface a coherent theory of the system’s workings. Remember that observability is about delivering <em>meaning</em>, not just data.</li></ul><p>理论和数据是互相影响的关系，无论是缺少理论还是缺少数据，都无法让我们对系统进行很好的观测。在创建图表时，需要明确的知道这个图表的含义以及数值波动所产生的影响。在创建报警条目时，除了产生报警，还应该显示对应的图表和操作说明。</p><hr><p><a href="https://doordash.engineering/2022/08/09/how-to-handle-kubernetes-health-checks/" target="_blank" rel="noopener">How to Handle Kubernetes Health Checks</a></p><p>一次因为 K8s 健康检查错误配置导致的事故复盘。作者使用 Spring Boot 框架的默认健康检查配置作为应用的检查，有些与应用无关的异常导致了应用健康检查不通过，进而导致应用程序 Pod 被干掉。</p><p>应用默认的 Metric,Tracing, Log 都没有健康检查的记录，导致排查起来很困难，最终通过eBPF agent 的日志来辅助排查。</p><hr><p><a href="https://blog.symops.com/2022/08/10/pay-for-continuous-integration/" target="_blank" rel="noopener">SHOULD YOU PAY FOR CI/CD IN 2022?</a></p><p>我们是否应该为 CI/CD 付费？文中介绍了 CI/CD 的发展，提到自建 CI/CD 的维护工作是隐形的，我们很难准确的评估这部分的成本到底有多大。</p><hr><p><a href="https://carlosbecker.dev/posts/ssh-tips-and-tricks/" target="_blank" rel="noopener">SSH Tips and Tricks</a></p><p>关于 SSH 的一些技巧，其中<code>ControlMaster</code> 和 <code>ServerAliveInterval</code> 很有用。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://about.gitlab.com/handbook/leadership/1-1/#transitioning-1-1s" target="_blank" rel="noopener">The 1-1 Agenda</a></p><p>[[Gitlab]] 关于 1-1 的介绍。个人1-1 次数很少，每次也不知道聊些什么。</p><hr><p><a href="https://daily.zhihu.com/story/9751840" target="_blank" rel="noopener">这可能是知乎最全的一篇中东烤肉介绍</a></p><p>吃（虽然感觉烤肉好像味道都差不多）。</p><hr><p><a href="https://geekplux.com/newsletters/28" target="_blank" rel="noopener">社交网络名存实亡 -#28</a></p><p>我更在意的是人，是能真正产生对话的、能够进行美好事物分享的人。我的微信朋友圈是我认真维护的，大部分屏蔽掉了，剩下的都是会分享生活的，比如晒娃的、游玩的、分享想法的。“朋友”圈应该是朋友，不应该是一个圈。</p><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《分手的决心》</p><p>一部很美好的爱情电影。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-08-14</title>
    <link href="https://zdyxry.github.io/2022/08/14/Weekly-Issue-2022-08-14/"/>
    <id>https://zdyxry.github.io/2022/08/14/Weekly-Issue-2022-08-14/</id>
    <published>2022-08-14T13:00:00.000Z</published>
    <updated>2022-11-07T02:06:46.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://xuanwo.io/reports/2022-31/" target="_blank" rel="noopener">2022-31: Databend 的工程效率实践</a></p><p>[[Databend]] 效率工程介绍，使用 SaaS 来完成大部分工作，Self Host Github Runner 尽量使用 [[AWS]] 内部服务，来减免流量费用。</p><p>效率工程体会：</p><ul><li>摆正定位</li><li>渐进变更</li><li>公开透明</li></ul><hr><p><a href="https://eng.lyft.com/improving-the-experience-of-making-envoy-route-changes-2a25dc8e1d44" target="_blank" rel="noopener">Improving the Experience of Making Envoy Route Changes</a></p><p>[[Lyft]] 针对 [[envoy]] 配置方式进行的改进，原有存在的问题：</p><p>原有路由配置使用[[Jinja]] 模版进行维护，无法进行很好的语法检查和验证，现已替换为 [[Golang]]</p><p>原有 [[envoy]] API 在配置平面和控制平面都被引用，当 [[envoy]] 升级时，都需要考虑兼容性问题，现在只在控制平面引用</p><p>原有<a href="https://www.envoyproxy.io/docs/envoy/latest/operations/tools/route_table_check_tool#route-table-check-tool" target="_blank" rel="noopener">Route table check tool</a> 无法进行很好的分发（为啥一个 binary 会不好分发呢？），改为内部检查工具，并添加了 CI 检测结果。</p><hr><p><a href="https://www.manjusaka.blog/posts/2022/08/07/A-simple-introduction-about-cpu-and-memory-limit-in-docker/" target="_blank" rel="noopener">容器 CPU 和 Memory 限制行为简述</a></p><p>关于 CPU 和 Memory cgroup 基本配置参数介绍。</p><hr><p><a href="https://www.uber.com/en-SG/blog/avoiding-cpu-throttling-in-a-containerized-environment/" target="_blank" rel="noopener">Avoiding CPU Throttling in a Containerized Environment</a></p><p>[[cgroup]] 使用 cpuset 来避免 CPU throttling 。</p><hr><p><a href="https://blog.ediri.io/how-to-remove-a-stuck-namespace" target="_blank" rel="noopener">How to remove a stuck namespace</a></p><p>[[kubernetes]] 如何删除 namespace，通常是因为 [[Finalizers]] 。</p><hr><p><a href="https://zwischenzugs.com/2022/08/08/who-should-write-the-terraform/" target="_blank" rel="noopener">“Who Should Write the Terraform?”</a></p><p>应该谁来写 Terraform ？要根据实际组织情况来看，我理解最终期望是 Developer 来写。配合阅读 <a href="https://matt-rickard.com/developers-should-deploy-their-own-code" target="_blank" rel="noopener">Developers Should Deploy Their Own Code</a></p><hr><p><a href="https://www.hashicorp.com/state-of-the-cloud" target="_blank" rel="noopener">HashiCorp 2022 State of Cloud Strategy Survey</a></p><p>[[hashicorp]] 关于 Cloud 的调查。multi-cloud 已经是事实，大多数是独立的团队来维护 multi-cloud 资源。其中 94% 认为存在资源浪费的情况。</p><hr><p><a href="https://specbranch.com/posts/one-big-server/" target="_blank" rel="noopener">Use One Big Server</a></p><p>作者表达的观点是，使用一台顶配的服务器可以承担很多服务，垂直扩展的方便程度也远胜于水平扩展。如果从可用性角度，可以使用公有云，但不要完全的使用公有云，公有云的溢价是明显的。但这都是在业务场景规模很大的基础上，如果业务规模很小，那么按量付费是一个好的选择。</p><hr><p><a href="https://semaphoreci.com/blog/bad-microservices" target="_blank" rel="noopener">When Microservices Are a Bad Idea</a></p><p>什么时候应该进行[[微服务]] 设计？除非理由非常明确，否则不要这样做。</p><p>当现有程序还在运行良好的情况下，进行很好的模块拆分可能比直接拆分为微服务是一个更好的选择，前者本身也是后者的一部分。进行微服务设计的前提是基础设施足够完善。</p><hr><p><a href="https://iximiuz.com/en/posts/kubernetes-vs-virtual-machines/" target="_blank" rel="noopener">How Kubernetes Reinvented Virtual Machines (in a good sense)</a></p><p>从应用部署的角度来讲解为什么我们需要[[容器]] 和 [[kubernetes]]。之前还有从应用发布的角度（binary -&gt; tar -&gt; rpm/deb -&gt; container）来讲解为什么需要[[容器]]。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://daily.zhihu.com/story/9751475" target="_blank" rel="noopener">打工人为什么会集体落入“狗屎工作”陷阱？</a></p><blockquote><p><a href="https://book.douban.com/subject/35929434/" target="_blank" rel="noopener">《 毫无意义的工作》</a></p></blockquote><blockquote><p><strong>毕竟，我们已经处在一个“狗屎工作”泛滥的时代。而如果这种“狗屎性”来自于一种体系性的力量，带有一点略微不可抗的时代性色彩，那我们就更加需要对自己的工作有更多的反思。</strong><br>最后，也是格雷伯在本书结尾时递上的一碗“鸡汤”：<br><strong>“大部分人喜欢在抽象层面谈论自由，甚至声称自由是最重要的事情……但很少有人去思考自由的生活具体意味着什么。”</strong><br><strong>因此这本书的目的不是提出解决方案，而是倡导大家去思考和讨论真正的自由，对“正常”有更多的反思。</strong><br>“狗屁工作是一扇窗”。<br>它既外看社会，也内观人生。</p></blockquote><hr><p><a href="https://mp.weixin.qq.com/s/3AJ32QiIFz-5xzWiiyCHIA" target="_blank" rel="noopener">Shopee 衰落幕后：一家最像中国大厂的东南亚巨头的全球化乱局</a></p><p>[[Shopee]] 的观察文章</p><hr><p><a href="https://daily.zhihu.com/story/9751613" target="_blank" rel="noopener">《甜蜜蜜》明明是一部悲剧爱情电影，为什么片名要叫「甜蜜蜜」？</a></p><p>小人物的爱情总是甜蜜的。</p><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《应得的权利》</p><p>这本书是在阅读 [[《从零开始的女性主义》]] 和 [[《职场妈妈不下班》]] 之后的第三本关于女性主义的书，相比前两本，这本书讲述的场景更多，让人产生思考也更多，更系统的描述了男性与女性在日常生活中所面临场景的不同，以及男性拥有了哪些不属于自己的权利。当我们在觉得一件事情理所当然的时候，我们就应该反问自己，为什么。比如为什么大家觉得男性会更能忍受痛苦(从而导致在表述相同痛苦时，女性很难得到同等对待)？为什么上司敬酒大部分女性会迫于“社会规则”压力去敬酒？为什么性别相关的恶性犯罪新闻经常使用被动句？作为男性，当面对这类事情发生时，我可以做些什么？</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-08-07</title>
    <link href="https://zdyxry.github.io/2022/08/07/Weekly-Issue-2022-08-07/"/>
    <id>https://zdyxry.github.io/2022/08/07/Weekly-Issue-2022-08-07/</id>
    <published>2022-08-07T23:59:00.000Z</published>
    <updated>2022-11-07T02:06:46.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://xuanwo.io/reports/2022-30/" target="_blank" rel="noopener">2022-30: 如何维护一个开源项目</a></p><p>明确自己的项目预期，后续的发展路线以及如何与开发者沟通。</p><hr><p><a href="https://thenewstack.io/how-our-bare-metal-cloud-keeps-up-with-all-the-new-os-releases/" target="_blank" rel="noopener">How Our Bare Metal Cloud Keeps up with All the New OS Releases</a></p><p>[[Equinix]] 如何进行发行版的快速验证工作的介绍。之前一直是手动测试验证(无法想象)，现在通过 [[BuildKite]] ，通过 DSL 来描述 OS 内容，使用 [[virt-customize]] 来进行配置改动，改动完整后，推送到 S3，进行自动化测试，最终推送给客户。</p><p>采用 [[Buildkite]] 的原因：</p><ul><li>支持动态 pipeline，可以进行条件判断</li><li>允许 pipeline 进行交互输入</li><li>可以自定义运行形态(环境)</li><li>不同架构可以共用一套 Pipeline</li></ul><p>[[BuildKite]] 学习成本不低。</p><hr><p><a href="https://www.kawabangga.com/posts/4756" target="_blank" rel="noopener">程序 Hot reload config 的实现方式</a></p><ul><li>监听文件(我自己比较常用的方式)</li><li>每次都reload</li><li>监听HUP 信号</li></ul><hr><p><a href="https://snyk.io/blog/10-kubernetes-security-context-settings-you-should-understand/" target="_blank" rel="noopener">10 Kubernetes Security Context settings you should understand</a></p><p>关于 [[kubernetes]] 安全配置的一些方法(感觉大部分人都用不上)</p><hr><p><a href="https://aeon.co/essays/downtime-is-not-an-option-meet-the-stewards-of-the-cloud" target="_blank" rel="noopener">The people of the cloud</a></p><p>云计算的另一个视角：工作在 IDC 的人们</p><hr><p><a href="https://blog.1password.com/1password-cli-easier-dns-management/" target="_blank" rel="noopener">How the 1Password CLI makes DNS management easier</a></p><p>使用 [[1Password]] 配合 <a href="https://stackexchange.github.io/dnscontrol/" target="_blank" rel="noopener">DNSControl</a> 管理域名</p><hr><p><a href="https://stanislas.blog/2021/08/firecracker/" target="_blank" rel="noopener">Using Firecracker and Go to run short-lived, untrusted code execution jobs</a></p><p>使用 [[Firecracker]] 来运行一些短生命周期的不可信任务。预先置备了VM pool，通过在 VM 中运行 Agent 来接收 Job，Job 执行完成后 VM 销毁，会自动置备新的 VM 加入到 VM pool 中。</p><hr><p><a href="https://libyear.com/" target="_blank" rel="noopener">libyear</a></p><p>我们经常面对维护的项目依赖老旧的情况，平时很少去主动的更新依赖，当等到不得不更新的时候，通常要投入的精力非常大。其中我觉得一个比较重要的原因是我们无法评估当前项目的依赖管理是否处于一个相对”健康“ 的状态， [[libyear]] 提出通过一种可以量化的数字来检查当前项目的依赖情况，通过比较项目中每一个依赖当前版本与最新版本的发布时间差值之和，来评估项目状态。</p><p>按照 libyear 的算法，项目中的依赖越多， libyear 越大，感觉 libyear 可以作为一个参考，实际应用选择一个比例值比较好，比如平均依赖年限小于 3 ？</p><hr><p><a href="https://xkln.net/blog/icmp-ping-and-traceroute--what-i-wish-i-was-taught/" target="_blank" rel="noopener">ICMP, Ping, and Traceroute - What I Wish I Was Taught</a></p><p>关于 [[ICMP]]， [[Ping]]， [[Traceroute]] 的实验和解释。</p><hr><p><a href="https://www.swyx.io/jobs-of-js-build-tools" target="_blank" rel="noopener">The Many Jobs of JS Build Tools</a></p><p>关于前端构建工具的介绍</p><hr><p><a href="https://leebriggs.co.uk/blog/2022/07/20/nobody-knows-what-declarative-is" target="_blank" rel="noopener">Why does nobody seem to know what imperative and declarative actually mean?</a></p><p>关于[[声明式]] 和 [[命令式]] 的讨论。<strong>命令式有<a href="https://en.wikipedia.org/wiki/Control_flow" target="_blank" rel="noopener">控制流</a>，而声明式没有。</strong></p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://daily.zhihu.com/story/9751345" target="_blank" rel="noopener">有氧运动真的会掉肌肉吗？</a></p><p><strong>总结起来，[[有氧运动]]对肌肉的抑制，除了总热量因素外，还应该补充的几个层面是：</strong></p><ul><li>有氧运动消耗了的大多是糖，而不是脂肪；</li><li>糖类不足，会激活 AMPK、抑制肌肉合成；</li><li>糖类不足，人体分解肌肉（糖异生）来获得糖，用糖类配脂肪氧化，从而获得能量维持生存。</li></ul><hr><p><a href="https://twitter.com/coolXiao/status/1554667451203276801" target="_blank" rel="noopener">9个写作技巧</a></p><ul><li>删掉“我觉得”，“我认为”，“我相信”，写出来的本身就代表个人观点，不需要重申</li><li>先写标题，写了标题就有了主旨，不会发散</li><li>短句很好，但是可以长短结合(虽然我还是觉得断句更好)</li><li>三合音，不经意的押韵可以起到奇妙的效果</li><li>CTA：call to action，告诉读者如何行动</li><li>一寸相框：先写下眼前已经明确的，最想说的电子，不需要考虑全文最后的呈现</li><li>简单和清晰</li><li>不说副词，不要用副词描绘情势，用更生动的叙述替代</li><li>填满画布，在写草稿时，应该一鼓作气，先填满画布</li></ul><hr>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-07-31</title>
    <link href="https://zdyxry.github.io/2022/07/31/Weekly-Issue-2022-07-31/"/>
    <id>https://zdyxry.github.io/2022/07/31/Weekly-Issue-2022-07-31/</id>
    <published>2022-07-31T23:59:00.000Z</published>
    <updated>2022-11-07T02:06:46.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://sichengingermay.com/how-to-do-system-design-interview/" target="_blank" rel="noopener">一些 System Design 面试的建议</a></p><p>明确需求；定义系统接口和业务 Entity；画一个架构图；讨论具体细节。</p><hr><p><a href="https://www.etsy.com/codeascraft/a-checklist-manifetsy" target="_blank" rel="noopener">A Checklist Manifetsy</a></p><p>维护自己的检查清单可以对所做内容更有掌控感。</p><hr><p><a href="https://medium.com/@tophatengblog/alerts-what-are-they-good-for-fe085e9ab4db" target="_blank" rel="noopener">Alerts, what are they good for?</a></p><p>如何设置报警规则？在我司通常是依靠经验拍脑袋。作者提出了一个可以量化的规则来 评估规则：</p><p>影响：越严重则数值越大</p><p>频率：发生频率越高，则数值越大</p><p>可恢复性：如果涉及到的问题所需要手动工作量越大，则数值越大</p><p>最终计算方式为<code>(i+f)*r</code> ，作者给出了数值建议：</p><blockquote><p><strong>1–19</strong> ignore<br><strong>20–49</strong> alert<br><strong>50–79</strong> evaluate the event. is it rated properly and if yes, what improvements can be made if any. The below example of US East 1 going down is a worse case scenario that relies on DR however, with good monitoring, can be detected and actioned<br><strong>80–100</strong> IMHO, any event with this scoring should NOT exist and if it does, we are in dire trouble</p></blockquote><hr><p><a href="https://blog.shell909090.org/blog/archives/2885/" target="_blank" rel="noopener">为什么浮点运算不精确</a></p><hr><p><a href="https://gist.github.com/richhickey/1563cddea1002958f96e7ba9519972d9" target="_blank" rel="noopener">Open Source is Not About You</a></p><p>关于[[开源]] 的讨论</p><hr><p><a href="https://jakub-m.github.io/2022/07/17/laport-clocks-formal.html" target="_blank" rel="noopener">User settings, Lamport clocks and lightweight formal methods</a></p><p>辅助阅读：<a href="https://www.codedump.info/post/20220703-weekly-21/" target="_blank" rel="noopener">周刊（第21期）：Lamport时钟介绍</a></p><hr><p><a href="https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture/" target="_blank" rel="noopener">The RED Method: key metrics for microservices architecture</a></p><p>[[weaveworks]] 关于设置监控指标的分类方法 <code>RED</code>：</p><p>Rate，服务每秒请求数</p><p>Errors，每秒失败的请求数</p><p>Duration，每个请求耗时分布</p><hr><p><a href="https://www.brendangregg.com/usemethod.html" target="_blank" rel="noopener">The USE Method</a></p><p>Utilization：以一定时间间隔内的百分比表示。例如，“一个磁盘以 90% 的利用率运行”。</p><p>Saturation：作为队列长度。例如，“CPU 的平均运行队列长度为 4”。</p><p>Errors：错误事件的计数。</p><hr><p><a href="https://eng.uber.com/vertical-cpu-scaling/" target="_blank" rel="noopener">Vertical CPU Scaling: Reduce Cost of Capacity and Increase Reliability</a></p><p>通过合理计算 Pod 的 CPU 使用率和预期可以容忍的可能故障，来计算最终分配给 Pod 的CPU core。</p><p>The reason for this is that responsibilities within a storage cluster can change over time, and all pods must therefore be allocated sufficient resources so that they can become the busiest pod in the cluster.</p><p>采集过去14天 Pod 的 CPU 利用率，在这些数据中，提取每8小时 P99 数值，选择利用率最高的 Pod 作为集群基准，利用率最高的 Pod 数据中的第三高作为最终用于计算额度的数值。Quota = Peak usage / Utilization target。</p><hr><p><a href="https://jiajunhuang.com/articles/2022_07_28-git_flows.md.html" target="_blank" rel="noopener">三种git流程以及发版模型</a></p><p>多种 Git 开发流程对比。</p><hr><p><a href="https://jvns.ca/blog/2022/07/28/toy-remote-login-server/" target="_blank" rel="noopener">A toy remote login server</a></p><p>实现一个简单的远程登录 Server，需要注意 tty 的使用，相关阅读可以看之前关于 tty 的介绍。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://www.theengineeringmanager.com/qa/how-do-i-get-better-at-giving-feedback/" target="_blank" rel="noopener">How do I get better at giving feedback?</a></p><p>如何更好的进行反馈？（觉得还是看人。</p><hr><p><a href="https://daily.zhihu.com/story/9751019" target="_blank" rel="noopener">有哪些外行觉得丑但其实很厉害的画？</a> </p><p>厉不厉害不知道，丑是真的丑。。。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-07-24</title>
    <link href="https://zdyxry.github.io/2022/07/24/Weekly-Issue-2022-07-24/"/>
    <id>https://zdyxry.github.io/2022/07/24/Weekly-Issue-2022-07-24/</id>
    <published>2022-07-24T18:55:00.000Z</published>
    <updated>2022-11-07T02:06:46.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://www.chenshaowen.com/blog/hijack-docker-io-req-to-private-repository.html#22-%E9%83%A8%E7%BD%B2-dockerio-%E7%9A%84%E4%BB%A3%E7%90%86-registry" target="_blank" rel="noopener">如何劫持 docker.io 的镜像流量到私有仓库</a></p><p>通过修改Client 受信证书将 docker.io 流量转发到内部其他 registry。<br>问题：所有 Client 都需要进行证书配置。如果证书这环节出了问题，会引发较大安全问题。</p><p><a href="https://www.codedump.info/post/20220710-weekly-22/" target="_blank" rel="noopener">周刊（第22期）：图解一致性模型</a></p><p>通过发布朋友圈作为示例来描述：顺序一致性、线性一致性、因果一致性。</p><p>顺序一致性条件：</p><p>条件1：每个进程的执行顺序要和该进程的程序执行顺序保持一致。</p><p>条件2：对变量的读写要表现得像FIFO一样先入先出，即每次读到的都是最近写入的数据。</p><p>线性一致性条件，在顺序一致性的基础上，增加：</p><p>条件3：不同进程的事件，如果在时间上不重叠，即不是并发事件，那么要求这个先后顺序在重排之后保持一致。</p><p>因果一致性是更弱的一致性，只要满足<code>happen-before</code>关系即可。由于<code>happen-before</code>关系实际上是由Lamport时钟定义的，这是一种逻辑时钟，所以不同的读者看到的先后顺序可能会有点<code>反直觉</code>，但是只要满足<code>happen-before</code>关系就是正确的。</p><p><a href="https://tech.meituan.com/2022/07/14/cicd-pipeline.html" target="_blank" rel="noopener">工程效能CI/CD之流水线引擎的建设实践</a></p><p>美团内部 CI/CD 发展过程。在 jenkins 阶段遇到了调度瓶颈、资源管理瓶颈，Jenkins 多集群方式管理困难，转为自研。</p><p><a href="https://spf13.com/p/spf13-google/" target="_blank" rel="noopener">spf13 Google –&gt;</a></p><p>spf13 从 [[Google]] 离职加入了Two Sigma</p><blockquote><p>When I first joined there was so much to learn about both Go and working within Google. My learning had slowed down dramatically. I was torn. I loved the team and the work we were doing, but was feeling personally stagnant.</p></blockquote><p><a href="https://coolshell.cn/articles/22263.html" target="_blank" rel="noopener">从一次经历谈 TIME_WAIT 的那些事</a></p><p>通过设置 <code>SO_LINGER</code> 为 0 来避免 TIME_WAIT 过多情况。<a href="https://github.com/tevino/tcp-shaker" target="_blank" rel="noopener">https://github.com/tevino/tcp-shaker</a></p><p><a href="https://statuspal.io/blog/2022-06-22-dns-incidents-like-cloudflares-could-turn-your-status-page-useless-here-is-how-to-prevent-it/" target="_blank" rel="noopener">DNS Incidents Like Cloudflare’s Could Turn your Status Page Useless; Here is How to Prevent It</a></p><p>很多公司使用<code>status.yourcompany.com</code> 来展示自己的服务状态，但是这可能会因为 DNS 问题而导致可用性变差，建议使用独立的 DNS 服务器并且使用 <code>yourcompany-status.com</code> 。</p><p>举例：</p><ul><li><p><a href="https://metastatus.com/" target="_blank" rel="noopener">https://metastatus.com/</a></p></li><li><p><a href="https://api.twitterstat.us/" target="_blank" rel="noopener">https://api.twitterstat.us/</a></p></li><li><p><a href="https://www.cloudflarestatus.com/" target="_blank" rel="noopener">https://www.cloudflarestatus.com/</a></p></li></ul><p><a href="https://shkspr.mobi/blog/2022/07/dns-esoterica-why-you-cant-dig-switzerland/" target="_blank" rel="noopener">DNS Esoterica - Why you can’t dig Switzerland</a></p><p>DNS 冷知识： <code>The default query class (IN for internet) is overridden by the -c option.  class is any valid class, such as HS for Hesiod records or CH for Chaosnet records.</code></p><p><a href="https://www.netmeister.org/blog/dns-size.html" target="_blank" rel="noopener">DNS Response Size</a></p><p>关于 DNS 请求响应大小的验证，通过不断地调整 DNS 解析大小来理解完整的请求流程。</p><p>DNS Packet Size限制在 512Byte 么？可以通过 <code>UDP payload size</code> 允许更大 size，当 size 更大时，会遇到 MTU 限制。更大的时候会自动切换到 TCP 进行重试，这个时候限制是 IP Packet Size 2^16=65535： <code>65536 bytes for DNS overhead + payload.</code> 。理论上我们可以设置的 A 记录大概在 4k 左右(4092)。</p><p><a href="https://blog.min.io/nutanix-objects-violates-minios-open-source-license/" target="_blank" rel="noopener">Nutanix Objects Violates MinIO’s Open Source License</a></p><p>MinIO 发表声明 Nutanix 违反了 AGPL v3协议。Hackernews 关于事件的讨论： <a href="https://news.ycombinator.com/item?id=32148007" target="_blank" rel="noopener">https://news.ycombinator.com/item?id=32148007</a></p><p><a href="https://twitter.com/sidpalas/status/1549026569535963136?s=12&amp;t=klOsSoeDfEW9Ra6ESp68HA" target="_blank" rel="noopener">Why does Kubernetes even exist?</a></p><p>为什么 Kubernetes 被需要，软件部署管理发展过程图示</p><p><a href="https://jvns.ca/blog/2021/09/24/new-tool--an-nginx-playground/" target="_blank" rel="noopener">New tool: an nginx playground</a></p><p>如何实现一个 Nginx playground：</p><ul><li>写入 nginx 配置</li><li>创建 net namespace</li><li>在 namespace 中分别运行 nginx 和 go-httpbin</li><li>执行 curl/http 命令并将结果返回给用户</li></ul><p><a href="https://jvns.ca/blog/2022/07/20/pseudoterminals/" target="_blank" rel="noopener">What happens when you press a key in your terminal?</a></p><p>项目地址： <a href="https://github.com/jvns/goterm/blob/master/main.go" target="_blank" rel="noopener">https://github.com/jvns/goterm/blob/master/main.go</a></p><p>通过 xterm.js 和 goterm 来学习在输入按键时，发生了什么。</p><p>在使用终端模拟器(比如 SecureCRT) 时，我们通常可以选择 V100、Xterm或者 ANSI 不同的终端序列/终端类型。</p><p>ANSI转义序列：<strong>ANSI转义序列（ANSI escape sequences）</strong>是一种<a href="https://zh.wikipedia.org/w/index.php?title=%E5%B8%A6%E5%86%85%E4%BF%A1%E5%8F%B7&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">带内信号</a>的<a href="https://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%BA%8F%E5%88%97" target="_blank" rel="noopener">转义序列</a>标准，用于控制视频文本<a href="https://zh.wikipedia.org/wiki/%E7%B5%82%E7%AB%AF" target="_blank" rel="noopener">终端</a>上的光标位置、颜色和其他选项。在文本中嵌入确定的字节序列，大部分以<a href="https://zh.wikipedia.org/wiki/%E9%80%80%E5%87%BA%E9%94%AE" target="_blank" rel="noopener">ESC</a><a href="https://zh.wikipedia.org/wiki/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6" target="_blank" rel="noopener">转义字符</a>和”[“字符开始，终端会把这些字节序列解释为相应的指令，而不是普通的<a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81" target="_blank" rel="noopener">字符编码</a>。</p><p><a href="https://www.kawabangga.com/posts/4728" target="_blank" rel="noopener">Coredns 源码解析：启动流程</a></p><p>Coredns 启动流程介绍，Coredns 自身使用 caddy 作为框架来实现，在实现流程上混杂着 caddy 和 coredns 自身逻辑。</p><p><a href="https://matt-rickard.com/commit-messages-dont-matter/" target="_blank" rel="noopener">Commit Messages Don’t Matter</a></p><p>我理解作者表达的是如果把 commit msg 作为主要的文档不合适，而不是 commit msg 不重要，一个良好的 commit msg 可以帮助 reviewer 和后续改动相关代码的人快速了解之前改动背景原因(可能不是很详细)，而不需要去查看相关的设计文档或 Ticket 了解细节。</p><p><a href="http://charap.co/how-to-read-computer-science-systems-papers-using-shampoo-algorithm/" target="_blank" rel="noopener">HOW TO READ COMPUTER SCIENCE (SYSTEMS) PAPERS USING SHAMPOO ALGORITHM</a></p><p>Q：如何阅读 CS Paper？A： 按阶段重复阅读。阅读论文是一个非线性的过程，在阅读的过程中，如果在某一章节没有理解，那么重复阅读是比较好的选择，在重复阅读的同时，需要提出问题以确保我们理解了这一章节的内容。</p><p>在阅读的过程中，我们要尽可能的慢下来，在阅读过程中同步进行笔记记录可能是一个好的方式。</p><p><a href="https://www.youtube.com/watch?v=-DbbIZzFHIY" target="_blank" rel="noopener">Roman Khavronenko | Open-source strategy at VictoriaMetrics</a></p><p>[[VictoriaMetrics]] 创始人讲述 VictoriaMetrics 如何起步，为什么开源，如何找到自己的用户，在开源过程中做了哪些事情来帮助社区快速成长。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://basicappleguy.com/basicappleblog/999month" target="_blank" rel="noopener">$9.99/MONTH</a></p><ul><li>每个月花费在订阅软件上的钱有多少？可能平时吃喝开销会及时感知，但是软件上的开销很容易就被忽略掉。我自己用了一款付费软件来记录自己每个月为软件付费(是的，我为了记录又买了一个软件)，目前每个月的开销是 91元。</li></ul><p><a href="https://www.foodaily.com/articles/27497" target="_blank" rel="noopener">糖，不那么伟大的作品丨青山资本2022年中消费报告</a></p><p>美国对国民的糖摄入推荐量为每日男性36克，女性25克，实际上他们的摄入平均数为70克。中国居民膳食指南表示，糖的摄入量每天最好不超过25克，但一听可乐就能轻松超过30多克糖。</p><p>GI（glycemic index）值指摄取某种食物后对人体血糖上升影响的速度。低GI食物在肠胃中停留更久，吸收率更低，更能增加饱腹感，降低进食欲望。高GI食物则会让血糖升高更快，胰岛素分泌增加，饿得更快。长此以往，不仅会让胰岛素过于兴奋，还抑制脂肪分解，促进脂肪合成。虽然胃里的食物其实足够了，但饥饿感带来的难以控制的加餐，使得摄入能量远超身体实际需要的。</p><p><a href="https://www.notion.so/2022-07-24-150c9e8f32744d7297a2124a1677e4bc" target="_blank" rel="noopener">坚持跑步对身体到底好不好？</a></p><p><strong>仅跑步 10 分钟，就能增加大脑中流向双侧前额叶皮层各个位点的局部血流量，从而有益于心理健康、增强执行能力</strong>。</p><p>“我们的研究表明，<strong>仅需 6 个月的锻炼，就有可能逆转衰老对血管的影响。在 21 岁 -69 岁不同年龄段的健康人群中，普遍能观察到这些益处。</strong>这强调了<strong>改变生活方式以减缓衰老相关风险</strong>的重要性，特别是在年龄较大、基础较弱的人群中，开始跑步也似乎永远不会太晚。”</p><p><a href="https://www.zhihu.com/question/383416202/answer/2584564433" target="_blank" rel="noopener">用了很久的全拼改为双拼值得吗？</a></p><p>优势：确定性(每次输入两个按键来完成一个文字的输入)；快(只需要输入2个按键)；</p><p>劣势：多平台适配；学习成本；</p><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><p>《职场妈妈不下班》： 婚姻中男性与女性对于家务劳动的付出的探讨，介绍了多个不同家庭的婚姻生活示例，来讲解不同类型/态度的人对于家庭生活付出的想法，想法的成因(往往是人原生家庭影响)。婚姻生活就是不断妥协的结果，几乎是一种潜规则，你不说，我不说，日子就继续这样过下去。原生家庭对于一个人的影响是看得见的，影响时间也远远超出一代人的范围。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-07-17</title>
    <link href="https://zdyxry.github.io/2022/07/18/Weekly-Issue-2022-07-17/"/>
    <id>https://zdyxry.github.io/2022/07/18/Weekly-Issue-2022-07-17/</id>
    <published>2022-07-18T22:03:36.000Z</published>
    <updated>2022-11-07T02:06:46.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><p><a href="https://www.kawabangga.com/posts/4718" target="_blank" rel="noopener">Side Project 成本最小化运维</a></p><p>现成的 SaaS &gt; 基于库实现 &gt; 自己从软件方面实现 &gt; 使用新的开源项目额外部署系统来实现。现在的各个 SaaS 已经非常成熟了，大部分场景都可以涵盖到，不建议把时间花费在运维维护工作上。</p><p><a href="https://www.nakivo.com/blog/the-number-of-cores-per-cpu-in-a-virtual-machine/" target="_blank" rel="noopener">Setting the Number of Cores per CPU in a Virtual Machine</a></p><p>关于 [[vmware]] ESXi 虚拟机 CPU 配置说明</p><ul><li>When you define the number of logical processors (vCPUs) for a VM, prefer the cores-per-socket configuration. Continue until the count exceeds the number of CPU cores on a single NUMA node on the ESXi server. Use the same logic until you exceed the amount of memory that is available on a single NUMA node of your physical ESXi server.</li><li>Sometimes, the number of logical processors for your VM configuration is more than the number of physical CPU cores on a single NUMA node, or the amount of RAM is higher than the total amount of memory available for a single NUMA node. Consider dividing the count of logical processors (vCPUs) across the minimum number of NUMA nodes for optimal performance.</li><li>Don’t set an odd number of vCPUs if the CPU count or amount of memory exceeds the number of CPU cores. The same applies in case memory exceeds the amount of memory for a single NUMA node on a physical server.</li><li>Don’t create a VM that has a number of vCPUs larger than the count of physical processor cores on your physical host.</li></ul><p><a href="https://www.ewams.net/?date=2020/04/17&amp;view=sockets_vs_cores_for_esxi_which_is_better" target="_blank" rel="noopener">Sockets vs Cores for ESXi VMs, which is better? Part 1</a></p><p>关于 ESXi CPU 配置说明，结论是 socket 数量与 core 数量对于 CPU 性能几乎没有影响。</p><ul><li>Surprised to say, at least with this testing configuration, <strong>there appears to be no impact to virtual machine performance with different cores and socket configurations</strong>. Now NUMA might get you, depending on your application workload profile, so be careful. Y-cruncher obviously performs better the more vCPUs it has, but an 8-sockets-2-cores-per-socket system is going to perform the same as a VM with 4-sockets-4-cores-per-socket and the same as 1-socket-16-cores-per-socket since they all equal 16 vCPUs.</li></ul><p><a href="https://wklken.me/posts/2022/07/08/better-code-5-flexible-api.html" target="_blank" rel="noopener">Better Code: 关于接口的灵活性</a></p><p>在暴露接口的时候要尽量克制，谨慎。</p><p><a href="https://dilbertblog.typepad.com/the_dilbert_blog/2007/06/the_day_you_bec.html" target="_blank" rel="noopener">The Day You Became A Better Writer</a></p><p>最关键的技巧是保持简洁。简洁的表达是有说服力的。一个五句话就能讲出来的不错的观点，比一个高明的一百句话的长篇大论，能说服更多的人。</p><p>简洁意味着去掉多余的词。如果你可以只写“他高兴”就不要写“他很高兴”。你觉得这个“很”字增加了一些效果。它没有。删减你的句子。</p><p>（以）幽默（为目的的）写作和商业写作有诸多相似。它也需要简洁。最大的区别在于词汇的选择。为了风趣，当你可以用“牛饮”就别说“喝”。</p><p>你的第一句要抓住读者。回顾一下我这篇文章的第一句话。我重写了好多次。它让你好奇，这是关键。</p><p>写短的句子。别在一句话里放好几个想法。读者可不像你想得那么聪明。</p><p>去了解大脑是如何组织想法的。 比起“球被男孩击打了”， 读者能更快地理解“男孩击打了球”。这两句话意思一样，但是理解主语先于动作会更容易。所有大脑都这样工作。（注意，我没说“这就是所有大脑工作的方式”）。</p><p><a href="https://dev.to/techschoolguru/a-complete-overview-of-ssl-tls-and-its-cryptographic-system-36pd" target="_blank" rel="noopener">A complete overview of SSL/TLS and its cryptographic system</a></p><p>关于 SSL/TLS 的介绍，图文并茂。</p><p><a href="https://cloud.google.com/blog/topics/developers-practitioners/how-google-got-to-rolling-linux-releases-for-desktops" target="_blank" rel="noopener">How Google got to rolling Linux releases for Desktops</a></p><p>Google 如何从 Ubuntu LTS 切换到基于 Debian 的滚动升级发行版；</p><p>在维护 LTS版本时，每两年都要花费一年的大部分时间来处理升级冲突和测试；</p><p>切换到滚动升级后，为了避免上游不稳定而导致内部重复工作，通过尽早的介入上游工作(也可以更好的回馈社区)，来保证上游稳定性；</p><p><a href="https://matt-rickard.com/hotellings-law-differentiation/" target="_blank" rel="noopener">Hotelling’s Law and Differentiation</a></p><p><strong>竞争对手彼此靠近以最大化市场份额</strong></p><p><a href="https://shuxiao.wang/posts/housing-load-is-a-bully/" target="_blank" rel="noopener">房贷是对普通人的欺负</a></p><ul><li><p>普通人对超过自己日常生活的数字是没有概念的。</p><p>  所以我觉得房贷就是肉食者、银行和房地产商联手对普通人的欺负，欺负他们无法理解太大的数，造下全天下都要买房的大势，利用他们的贪婪和无知，诓骗他们背上沉重而漫长的房贷，拿走这群普通到略显傻逼的人一生所能积攒的全部财富，唯独给他们留下一个很食之无味弃之可惜的旧房子。</p><p>  那普通人就一点错也没有了吗，也是有的，无知和贪婪都是其罪，不过这就是另一个话题了。</p></li></ul><p><a href="https://ieftimov.com/posts/how-to-make-reviewers-love-your-big-pull-requests/" target="_blank" rel="noopener">How to Make Reviewers Love Your Big Pull Requests</a></p><p>保证提交的代码质量；</p><p>清晰的 commit msg；</p><p><a href="https://www.pauline-vos.nl/atomic-commits/" target="_blank" rel="noopener">Atomic commits will help you git legit.</a></p><p>保证每个 commit 都是原子的，包含完整上下文的。</p><p><a href="https://www.docker.com/blog/image-rebase-and-improved-remote-cache-support-in-new-buildkit/" target="_blank" rel="noopener">Image rebase and improved remote cache support in new BuildKit</a></p><p>关于 BUILDKIT 中的 <code>--link</code> 使用及示例，可以大大缩短构建时间。</p><p><a href="https://slack.engineering/remote-development-at-slack/" target="_blank" rel="noopener">Remote Development at Slack</a></p><p>[[Slack]] 远程开发环境介绍</p><ul><li>痛点：拉取代码耗时，环境不统一，无法及时构建</li><li>改进：采用 AWS ASG 自动扩展实例，开发人员采用 VSCode 进行远程开发。</li><li>现状：开发环境成本翻倍；90% 切换到远程开发模式；内部效率提高明显。</li></ul><p><a href="https://github.com/choria-io/appbuilder" target="_blank" rel="noopener">CHORIA APP Builder</a></p><p>在产品运维工作中，会包含大量的命令行、Shell 脚本、命令行拼接，比如 <code>kubectl blablabla | jq balblabla</code> ，通常我们会通过文档或者 Wiki 来提供使用说明，但是会面临一些问题：</p><ul><li>暴露的命令又臭又长</li><li>变量参数传递不统一，部分支持环境变量，部分不支持，是否补全支持全靠命令行自身</li></ul><p>这个工具提供了一种通用的方式来统一暴露入口</p><p>可能问题：</p><ul><li>交互式命令处理？</li><li>命令边界模糊，什么应该是命令行内实现，什么应该放到 appbuilder 配置中？</li><li>在 YAML 中写 Shell 好像没好到哪里去？</li></ul><p><a href="https://blog.symops.com/2022/07/07/prevent-ransomware-s3-object-lock/" target="_blank" rel="noopener">PROTECT YOUR DATA FROM RANSOMWARE WITH S3 OBJECT LOCK</a></p><p>可以使用 S3 版本控制和对象锁来避免勒索病毒。</p><p><a href="https://raesene.github.io/blog/2022/07/03/lets-talk-about-kubernetes-on-the-internet/" target="_blank" rel="noopener">Let’s talk about Kubernetes on the Internet</a></p><p>扫描互联网上暴露的 Kubernetes，大部分是 EKS，AKS，GKE 暴露的。</p><p>有相当一部分 K8s 集群运行的版本是不再维护版本。</p><p><a href="https://architecturenotes.co/fallacies-of-distributed-systems/#the-network-is-reliable" target="_blank" rel="noopener">Fallacies of Distributed Systems</a></p><p>描述了在进行系统设计时常见的错误假设：</p><ul><li>网络是可靠的</li><li>延迟为零</li><li>带宽无限</li><li>网络是安全的</li><li>网络拓扑不会改变</li><li>你可以控制一切</li><li>传输成本为零</li><li>网络(消息)是同质的</li></ul><p><a href="https://www.seekret.io/blog/a-practical-guide-to-capturing-production-traffic-with-ebpf/" target="_blank" rel="noopener">A Practical Guide to Capturing Production Traffic with eBPF</a></p><p>使用 Golang 来演示 eBPF 如何抓取所需要的信息。</p><p><a href="https://github.com/seek-ret/ebpf-training" target="_blank" rel="noopener">https://github.com/seek-ret/ebpf-training</a></p><p><a href="https://unix.stackexchange.com/questions/5260/is-there-truth-to-the-philosophy-that-you-should-sync-sync-sync-sync" target="_blank" rel="noopener">Is there truth to the philosophy that you should sync; sync; sync; sync?</a></p><p>现在还真的需要 <code>sync;sync;sync;</code> 么？</p><p>也许这只是一个都市传说。</p><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《点球成金》，针对魔球理论的讲述，体育带给人的感动总是很直接。</p><p>《从零开始的女性主义》，起因是最近针对相关话题讨论真的多，而自己对相关背景了解太少，没有自己的想法和理解，果然还是读书带来的历史背景介绍比零散的文章/播客好不少。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Pocket 数据分析和总结</title>
    <link href="https://zdyxry.github.io/2022/07/05/Pocket-%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%92%8C%E6%80%BB%E7%BB%93/"/>
    <id>https://zdyxry.github.io/2022/07/05/Pocket-数据分析和总结/</id>
    <published>2022-07-05T19:50:44.000Z</published>
    <updated>2022-11-07T02:06:46.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>自己一直使用 pocket 作为稍后阅读收藏夹，最近觉得 Pocket 的搜索结果不能满足我的需求，于是寻找替代品，最终打算用 Notion Web Clipper 配合 Notion 来作为替代，自己虽然是 Notion 的 Team Plan 但是一直没找到合适的场景使用 Notion ，主要是觉得 Notion 的数据不可控，所以无法作为一个笔记软件来用，但是如果作为只信息管理工具应该是足够的，试用了几天觉得也满足需求，于是开始把 Pocket 数据迁移到 Notion 中。在迁移过程中，发现 Pocket API 中的数据比较多，于是打算简单分析下自己这么多年使用的数据，看看能否发现什么。数据是我自己的 Pocket 数据，通过官方 API 获取的，时间跨度从 2017年12月29日持续到 2022年6月28日。</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><ul><li>已读比例：63%  <ul><li>未读 774  </li><li>已读 1370  </li></ul></li></ul><hr><ul><li>收藏链接 404 比例  <ul><li>未读 774，其中链接无法访问数量 35，4.5%  </li><li>已读 1370，其中链接无法访问数量 88，6.4%  </li></ul></li></ul><hr><ul><li>条目添加标签（tag）比例  <ul><li>未读 774， 其中添加标签数量 247，31.9%  </li><li>已读 1370， 其中添加标签数量 686，50%  </li></ul></li></ul><hr><ul><li>平均每天添加稍后阅读条目：1.3 篇  </li><li>平均每天阅读条目：0.9 篇</li></ul><hr><ul><li>阅读时间  <ul><li>最长阅读耗时：999 天  </li><li>最短阅读耗时：9s  </li><li>平均阅读耗时：109天  </li><li>最长未读间隔：1649 天  </li></ul></li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>已读比例符合我的预期，最开始使用 Pocket 的时候，通常会将其作为一个“收藏夹”，而不是一个“阅读列表”，所以会导致添加的条目并不是一篇文章，哪怕“稍后” 也不会轻易的读完，后期已经将收藏类的需求放到了笔记中，这种症状缓解了很多。  </li><li>404 比例，之前在Twitter 上单独说过，如果一篇文章没有及时阅读，在现在的网络时代，要随时做好它消失不见的准备，虽然现在已经有很多 WebArchive 的方式，但终归是不方便。这也是我对 Pocket 不满意的一点，我用了这么久都没有搞清楚什么页面它会保存文字，什么页面会只保存一个链接。还是要及时阅读，即使不能阅读，也最好保存完整页面便于后续整理。  </li><li>平时使用过程经常面临一个困扰：我记忆中看过一篇文章，但是我找不到它。此时我会尝试各种我认为的关键词去找，但是往往是搜索不到，看这个 tag 比例 也能看出一些端倪，现在我会针对每一个阅读条目都添加标签（一个或者多个），来尽量减少这种情况出现。</li><li>平均每天添加 1.3 篇，但是平均下来每天阅读没有达到 1 篇，最终导致 Pocket 列表越来越长，哪怕自己在 Todo List 中添加了一个周期性任务来提醒自己每周清理，也没有办法。  </li><li>阅读时间很有迷惑性，在第一点已经提到我的 Pocket 很多时候作为一个“收藏夹”的作用，导致很多条目注定不会被阅读，持续几年没读的情况很多。最长阅读耗时999 天，这是因为我前段时间发现了 Pocket 有一个 random URL，访问该 URL 会自动跳转到自己 Pocket 列表中随机一个条目，借着这个机制清理了不少陈年条目。  </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;自己一直使用 pocket 作为稍后阅读收藏夹，最近觉得 Pocket 的搜索结果不能满足我的需求，于是寻找替代品，最终打算用 Notion
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MacOS 使用 Hammerspoon 进行窗口管理</title>
    <link href="https://zdyxry.github.io/2022/06/18/MacOS-%E4%BD%BF%E7%94%A8-Hammerspoon-%E8%BF%9B%E8%A1%8C%E7%AA%97%E5%8F%A3%E7%AE%A1%E7%90%86/"/>
    <id>https://zdyxry.github.io/2022/06/18/MacOS-使用-Hammerspoon-进行窗口管理/</id>
    <published>2022-06-18T10:47:07.000Z</published>
    <updated>2022-11-07T02:06:46.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近把公司电脑从 Windows 换到了 MacOS， 在重新配置 OS 阶段，发现在 MacOS 上进行窗口管理比较痛苦，自己之前的个人 MaCOS 一直使用的是Moom 来进行管理，但是使用功能很有限，加上现在 MacOS 自身的窗口提示会与 Moom 冲突，所以决定更换一个。我个人对于窗口管理的需求就是方便的在不同显示器切换，焦点窗口全屏、半屏、1/3 屏转换快速。对于平铺式窗口管理觉得学习成本和适应成本可能有些高，不打算折腾，之前看到 disksing 使用 Hammerspoon 进行窗口管理的文章： <a href="https://disksing.com/desktop-layout/" target="_blank" rel="noopener">适合程序员的桌面窗口管理方案</a> ，打算尝试一下。</p><h2 id="Hammerspoon"><a href="#Hammerspoon" class="headerlink" title="Hammerspoon"></a>Hammerspoon</h2><p>Hammerspoon 是一个开源的自动化工具，可以实现很多功能，包含不限于：窗口管理、桌面管理、Wifi 触发器、时钟管理等等，所有功能都是通过 Lua 语言来实现的。用户可以自己编写 Lua，或者使用 Spoons 中提供的一些 Lua 模块来简化配置。</p><p>官网包含了一个简单的 Window resize 示例，还是比较好理解的，先找到当前focuse 窗口，然后找到当前窗口大小，调整大小为目标值，重新设置窗口：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hs.hotkey.bind(&#123;<span class="string">"cmd"</span>, <span class="string">"alt"</span>, <span class="string">"ctrl"</span>&#125;, <span class="string">"Left"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> win = hs.window.focusedWindow()</span><br><span class="line">  <span class="keyword">local</span> f = win:frame()</span><br><span class="line">  <span class="keyword">local</span> screen = win:screen()</span><br><span class="line">  <span class="keyword">local</span> <span class="built_in">max</span> = screen:frame()</span><br><span class="line"></span><br><span class="line">  f.x = <span class="built_in">max</span>.x</span><br><span class="line">  f.y = <span class="built_in">max</span>.y</span><br><span class="line">  f.w = <span class="built_in">max</span>.w / <span class="number">2</span></span><br><span class="line">  f.h = <span class="built_in">max</span>.h</span><br><span class="line">  win:setFrame(f)</span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure><h2 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h2><p>在 Github 上可以看到很多 Hammerspoon 的示例，目前写的比较完善的有以下几个：</p><ul><li><a href="https://github.com/ashfinal/awesome-hammerspoon" target="_blank" rel="noopener">https://github.com/ashfinal/awesome-hammerspoon</a></li><li><a href="https://github.com/wangshub/hammerspoon-config" target="_blank" rel="noopener">https://github.com/wangshub/hammerspoon-config</a></li><li><a href="https://github.com/S1ngS1ng/HammerSpoon" target="_blank" rel="noopener">https://github.com/S1ngS1ng/HammerSpoon</a></li></ul><p>虽然 Hammerspoon 提供了很多功能，但是我不想用它来实现很多功能，毕竟 AllinOne 我（没）不（什）是（么）很（好）喜（下）欢（场）。目前还没有使用 MacOS 存在一个常用的布局，所以先实现一些快捷键来满足需求就好。这里使用的 Spoon 包含两个：WinWin 和 ModalMgr。也不打算进行配置拆分，所有配置都在 init.lua 中写明，具体配置如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">hs.hotkey.alertDuration = <span class="number">0</span></span><br><span class="line">hs.hints.showTitleThresh = <span class="number">0</span></span><br><span class="line">hs.window.animationDuration = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">hsreload_keys = hsreload_keys <span class="keyword">or</span> &#123;&#123;<span class="string">"cmd"</span>, <span class="string">"shift"</span>, <span class="string">"ctrl"</span>&#125;, <span class="string">"R"</span>&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">string</span>.<span class="built_in">len</span>(hsreload_keys[<span class="number">2</span>]) &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    hs.hotkey.bind(hsreload_keys[<span class="number">1</span>], hsreload_keys[<span class="number">2</span>], <span class="string">"重新加载配置!"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> hs.reload() <span class="keyword">end</span>)</span><br><span class="line">    hs.alert.show(<span class="string">"配置文件已经重新加载！ "</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">hs.loadSpoon(<span class="string">"ModalMgr"</span>)</span><br><span class="line">hs.loadSpoon(<span class="string">"WinWin"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> spoon.WinWin <span class="keyword">then</span></span><br><span class="line">    spoon.ModalMgr:new(<span class="string">"resizeM"</span>)</span><br><span class="line">    <span class="keyword">local</span> cmodal = spoon.ModalMgr.modal_list[<span class="string">"resizeM"</span>]</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'escape'</span>, <span class="string">'退出 '</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.ModalMgr:deactivate(&#123;<span class="string">"resizeM"</span>&#125;) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'Q'</span>, <span class="string">'退出'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.ModalMgr:deactivate(&#123;<span class="string">"resizeM"</span>&#125;) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'tab'</span>, <span class="string">'键位提示'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.ModalMgr:toggleCheatsheet() <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'A'</span>, <span class="string">'向左移动'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepMove(<span class="string">"left"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepMove(<span class="string">"left"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'D'</span>, <span class="string">'向右移动'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepMove(<span class="string">"right"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepMove(<span class="string">"right"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'W'</span>, <span class="string">'向上移动'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepMove(<span class="string">"up"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepMove(<span class="string">"up"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'S'</span>, <span class="string">'向下移动'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepMove(<span class="string">"down"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepMove(<span class="string">"down"</span>) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'H'</span>, <span class="string">'左半屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"halfleft"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'L'</span>, <span class="string">'右半屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"halfright"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'K'</span>, <span class="string">'上半屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"halfup"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'J'</span>, <span class="string">'下半屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"halfdown"</span>) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'Y'</span>, <span class="string">'屏幕左上角'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"cornerNW"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'O'</span>, <span class="string">'屏幕右上角'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"cornerNE"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'U'</span>, <span class="string">'屏幕左下角'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"cornerSW"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'I'</span>, <span class="string">'屏幕右下角'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"cornerSE"</span>) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'F'</span>, <span class="string">'全屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"fullscreen"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'C'</span>, <span class="string">'居中'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"center"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'G'</span>, <span class="string">'左三分之二屏居中分屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"centermost"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'Z'</span>, <span class="string">'展示显示'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"show"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'V'</span>, <span class="string">'编辑显示'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"shows"</span>) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'X'</span>, <span class="string">'二分之一居中分屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"center-2"</span>) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'='</span>, <span class="string">'窗口放大'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:moveAndResize(<span class="string">"expand"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:moveAndResize(<span class="string">"expand"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'-'</span>, <span class="string">'窗口缩小'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:moveAndResize(<span class="string">"shrink"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:moveAndResize(<span class="string">"shrink"</span>) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">'ctrl'</span>, <span class="string">'H'</span>, <span class="string">'向左收缩窗口'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepResize(<span class="string">"left"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepResize(<span class="string">"left"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">'ctrl'</span>, <span class="string">'L'</span>, <span class="string">'向右扩展窗口'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepResize(<span class="string">"right"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepResize(<span class="string">"right"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">'ctrl'</span>, <span class="string">'K'</span>, <span class="string">'向上收缩窗口'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepResize(<span class="string">"up"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepResize(<span class="string">"up"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">'ctrl'</span>, <span class="string">'J'</span>, <span class="string">'向下扩镇窗口'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepResize(<span class="string">"down"</span>) <span class="keyword">end</span>, <span class="literal">nil</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stepResize(<span class="string">"down"</span>) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'left'</span>, <span class="string">'窗口移至左边屏幕'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveToScreen(<span class="string">"left"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'right'</span>, <span class="string">'窗口移至右边屏幕'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveToScreen(<span class="string">"right"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'up'</span>, <span class="string">'窗口移至上边屏幕'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveToScreen(<span class="string">"up"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'down'</span>, <span class="string">'窗口移动下边屏幕'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveToScreen(<span class="string">"down"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'space'</span>, <span class="string">'窗口移至下一个屏幕'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveToScreen(<span class="string">"next"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'B'</span>, <span class="string">'撤销最后一个窗口操作'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:undo() <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'R'</span>, <span class="string">'重做最后一个窗口操作'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:redo() <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'['</span>, <span class="string">'左三分之二屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"mostleft"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">']'</span>, <span class="string">'右三分之二屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"mostright"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">','</span>, <span class="string">'左三分之一屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"lesshalfleft"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'.'</span>, <span class="string">'中分之一屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"onethird"</span>) <span class="keyword">end</span>)</span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'/'</span>, <span class="string">'右三分之一屏'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:stash() spoon.WinWin:moveAndResize(<span class="string">"lesshalfright"</span>) <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    cmodal:bind(<span class="string">''</span>, <span class="string">'t'</span>, <span class="string">'将光标移至所在窗口中心位置'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span> spoon.WinWin:centerCursor() <span class="keyword">end</span>)</span><br><span class="line"></span><br><span class="line">    hsresizeM_keys = hsresizeM_keys <span class="keyword">or</span> &#123;<span class="string">"alt"</span>, <span class="string">"R"</span>&#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">string</span>.<span class="built_in">len</span>(hsresizeM_keys[<span class="number">2</span>]) &gt; <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        spoon.ModalMgr.supervisor:bind(hsresizeM_keys[<span class="number">1</span>], hsresizeM_keys[<span class="number">2</span>], <span class="string">"进入窗口管理模式"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">            spoon.ModalMgr:deactivateAll()</span><br><span class="line">            spoon.ModalMgr:activate(&#123;<span class="string">"resizeM"</span>&#125;, <span class="string">"#B22222"</span>)</span><br><span class="line">        <span class="keyword">end</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spoon.ModalMgr.supervisor:enter()</span><br></pre></td></tr></table></figure><p>目前尝试增加应用切换窗口自动处理，但是 M1 上的 Hammerspoon 模块会 hang，还没搞清楚怎么回事，后续有时间再看看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近把公司电脑从 Windows 换到了 MacOS， 在重新配置 OS 阶段，发现在 MacOS 上进行窗口管理比较痛苦，自己之前的个人 
      
    
    </summary>
    
    
      <category term="MacOS" scheme="https://zdyxry.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>Celery/Kombu MongoDB 连接异常调查记录</title>
    <link href="https://zdyxry.github.io/2022/05/09/Celery-Kombu-MongoDB-%E8%BF%9E%E6%8E%A5%E5%BC%82%E5%B8%B8%E8%B0%83%E6%9F%A5%E8%AE%B0%E5%BD%95/"/>
    <id>https://zdyxry.github.io/2022/05/09/Celery-Kombu-MongoDB-连接异常调查记录/</id>
    <published>2022-05-09T14:44:42.000Z</published>
    <updated>2022-11-07T02:06:46.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>产品组件 JobCenter 使用 Celery 实现异步任务中心，同时会运行 job-center-worker （celery worker） 和 job-center-scheduler(celery beat) 两个进程，使用 MongoDB 作为 Backend 存储 message 等信息（Celery 官方已说明不再维护对 MongoDB 的支持）。其中 MongoDB 配置了 ReplicaSet 保证高可用。</p><p>近期 Celery/Kombu 中遇到了 <a href="https://github.com/celery/kombu/issues/1504#event-6304977800" target="_blank" rel="noopener"><code>No free channel ids</code> 问题</a>，经过排查在这个 <a href="https://github.com/celery/kombu/commit/1c2b9723851db3caa913b8da19d6ccad447f3568" target="_blank" rel="noopener">PR</a> 中解决了该问题，在考虑 cherry-pick 的工作量和可维护性考虑，最终将产品中的 celery 和 kombu 组件从 3.x 统一升级到了 4.x 版本。</p><p>测试同学反馈近期在进行可靠性测试时，发现将 MongoDB 节点的存储网络 <code>ifdown</code> 会导致 JobCenter hang. 针对该问题进行调查。</p><h2 id="调查"><a href="#调查" class="headerlink" title="调查"></a>调查</h2><h3 id="Celery"><a href="#Celery" class="headerlink" title="Celery"></a>Celery</h3><p>先尝试复现该问题，首先尝试 ifdown Primary 节点存储网络，现象复现；尝试 ifdown Secondary 节点存储网络，无法复现；<br>尝试 stop MongoDB service 替代 ifdown，Primary 或 Secondary 均无法复现。推测与 MongoDB 连接处理有关。</p><p>观察现象复现的日志，在存储网络异常时，日志无任何输出，在存储网络恢复正常后，可以看到 Celery 记录在尝试连接 Broker （MongoDB）时发生了异常，尝试重连。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">[2022-05-07 10:13:01,362: WARNING/MainProcess] consumer: Connection to broker lost. Trying to re-establish the connection...</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/celery/worker/consumer/consumer.py"</span>, line 318, <span class="keyword">in</span> start</span><br><span class="line">    blueprint.start(self)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/celery/bootsteps.py"</span>, line 119, <span class="keyword">in</span> start</span><br><span class="line">    step.start(parent)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/celery/worker/consumer/consumer.py"</span>, line 596, <span class="keyword">in</span> start</span><br><span class="line">    c.loop(*c.loop_args())</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/celery/worker/loops.py"</span>, line 121, <span class="keyword">in</span> synloop</span><br><span class="line">    connection.drain_events(timeout=2.0)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/connection.py"</span>, line 315, <span class="keyword">in</span> drain_events</span><br><span class="line">    <span class="built_in">return</span> self.transport.drain_events(self.connection, **kwargs)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/transport/virtual/base.py"</span>, line 963, <span class="keyword">in</span> drain_events</span><br><span class="line">    get(self._deliver, timeout=timeout)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/utils/scheduling.py"</span>, line 56, <span class="keyword">in</span> get</span><br><span class="line">    <span class="built_in">return</span> self.fun(resource, callback, **kwargs)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/transport/virtual/base.py"</span>, line 1001, <span class="keyword">in</span> _drain_channel</span><br><span class="line">    <span class="built_in">return</span> channel.drain_events(callback=callback, timeout=timeout)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/transport/virtual/base.py"</span>, line 745, <span class="keyword">in</span> drain_events</span><br><span class="line">    <span class="built_in">return</span> self._poll(self.cycle, callback, timeout=timeout)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/transport/virtual/base.py"</span>, line 402, <span class="keyword">in</span> _poll</span><br><span class="line">    <span class="built_in">return</span> cycle.get(callback)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/utils/scheduling.py"</span>, line 56, <span class="keyword">in</span> get</span><br><span class="line">    <span class="built_in">return</span> self.fun(resource, callback, **kwargs)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/transport/virtual/base.py"</span>, line 405, <span class="keyword">in</span> _get_and_deliver</span><br><span class="line">    message = self._get(queue)</span><br><span class="line">  File <span class="string">"/usr/lib/python2.7/site-packages/kombu/transport/mongodb.py"</span>, line 141, <span class="keyword">in</span> _get</span><br><span class="line">    remove=True,</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/site-packages/pymongo/collection.py"</span>, line 2315, <span class="keyword">in</span> find_and_modify</span><br><span class="line">    allowable_errors=[_NO_OBJ_ERROR])</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/site-packages/pymongo/collection.py"</span>, line 205, <span class="keyword">in</span> _command</span><br><span class="line">    read_concern=read_concern)</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/site-packages/pymongo/pool.py"</span>, line 218, <span class="keyword">in</span> <span class="built_in">command</span></span><br><span class="line">    self._raise_connection_failure(error)</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.7/site-packages/pymongo/pool.py"</span>, line 346, <span class="keyword">in</span> _raise_connection_failure</span><br><span class="line">    raise error</span><br><span class="line">AutoReconnect: connection closed</span><br><span class="line">[2022-05-07 10:13:01,363: WARNING/MainProcess] Restoring 1 unacknowledged message(s)</span><br></pre></td></tr></table></figure><p>对应 Celery 代码在 worker/consumer/consumer.py，Blueprint 是 Celery 启动入口，可以看到在 <code>blueprint.start(self)</code> 阶段进行了异常处理，针对 <code>self.connection_errors</code> 来触发重连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">CONNECTION_RETRY = <span class="string">"""\</span></span><br><span class="line"><span class="string">consumer: Connection to broker lost. \</span></span><br><span class="line"><span class="string">Trying to re-establish the connection...\</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">    blueprint = self.blueprint</span><br><span class="line">    <span class="keyword">while</span> blueprint.state != CLOSE:</span><br><span class="line">        maybe_shutdown()</span><br><span class="line">        <span class="keyword">if</span> self.restart_count:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                self._restart_state.step()</span><br><span class="line">            <span class="keyword">except</span> RestartFreqExceeded <span class="keyword">as</span> exc:</span><br><span class="line">                crit(<span class="string">'Frequent restarts detected: %r'</span>, exc, exc_info=<span class="number">1</span>)</span><br><span class="line">                sleep(<span class="number">1</span>)</span><br><span class="line">        self.restart_count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            blueprint.start(self)</span><br><span class="line">        <span class="keyword">except</span> self.connection_errors <span class="keyword">as</span> exc:</span><br><span class="line">            <span class="comment"># If we're not retrying connections, no need to catch</span></span><br><span class="line">            <span class="comment"># connection errors</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.app.conf.broker_connection_retry:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">            <span class="keyword">if</span> isinstance(exc, OSError) <span class="keyword">and</span> exc.errno == errno.EMFILE:</span><br><span class="line">                <span class="keyword">raise</span>  <span class="comment"># Too many open files</span></span><br><span class="line">            maybe_shutdown()</span><br><span class="line">            <span class="keyword">if</span> blueprint.state != CLOSE:</span><br><span class="line">                <span class="keyword">if</span> self.connection:</span><br><span class="line">                    self.on_connection_error_after_connected(exc)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    self.on_connection_error_before_connected(exc)</span><br><span class="line">                self.on_close()</span><br><span class="line">                blueprint.restart(self)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_connection_error_before_connected</span><span class="params">(self, exc)</span>:</span></span><br><span class="line">    error(CONNECTION_ERROR, self.conninfo.as_uri(), exc,</span><br><span class="line">          <span class="string">'Trying to reconnect...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_connection_error_after_connected</span><span class="params">(self, exc)</span>:</span></span><br><span class="line">    warn(CONNECTION_RETRY, exc_info=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.connection.collect()</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><code>self.connection_errors</code> 对应的其实是 Kombu 中 Transport 定义的 ，可以在 <code>kombu/kombu/transport/mongodb.py</code> 中查看，在当前版本中，定义为 <code>pymongo.errors.ConnectionFailure</code> ，pymongo 中常见的网络连接异常 <code>AutoReconnect</code> 或 <code>NetworkTimeout</code> 均继承自 <code>ConnectionFailure</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transport</span><span class="params">(virtual.Transport)</span>:</span></span><br><span class="line">    Channel = Channel</span><br><span class="line"></span><br><span class="line">    can_parse_url = <span class="keyword">True</span></span><br><span class="line">    polling_interval = <span class="number">1</span></span><br><span class="line">    default_port = DEFAULT_PORT</span><br><span class="line">    connection_errors = (</span><br><span class="line">        virtual.Transport.connection_errors + (errors.ConnectionFailure, )</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>从目前来看，Celery 可以正确处理 kombu 上报的异常，但是在存储网络异常时，Kombu 没有抛出异常，于是问题调查从 Celery 转到 Kombu。</p><h3 id="Kombu"><a href="#Kombu" class="headerlink" title="Kombu"></a>Kombu</h3><p>主要看 MongoDB Transport 关于建立连接部分的处理，代码执行路径依次是： <code>client</code> -&gt; <code>_create_client</code> -&gt; <code>_open</code> -&gt; <code>_parse_uri</code> ，其中 <code>_open</code> 是真正建立连接的处理，连接所采用的参数是在 <code>_parse_uri</code> 返回的，<code>_parse_uri</code> 最终调用的是 <code>pymongo.uri_parser.parse_uri</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_open</span><span class="params">(self, scheme=<span class="string">'mongodb://'</span>)</span>:</span></span><br><span class="line">    hostname, dbname, options = self._parse_uri(scheme=scheme)</span><br><span class="line"></span><br><span class="line">    conf = self._prepare_client_options(options)</span><br><span class="line">    conf[<span class="string">'host'</span>] = hostname</span><br><span class="line"></span><br><span class="line">    env = _detect_environment()</span><br><span class="line">    <span class="keyword">if</span> env == <span class="string">'gevent'</span>:</span><br><span class="line">        <span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">        monkey.patch_all()</span><br><span class="line">    <span class="keyword">elif</span> env == <span class="string">'eventlet'</span>:</span><br><span class="line">        <span class="keyword">from</span> eventlet <span class="keyword">import</span> monkey_patch</span><br><span class="line">        monkey_patch()</span><br><span class="line"></span><br><span class="line">    mongoconn = MongoClient(**conf)</span><br><span class="line">    database = mongoconn[dbname]</span><br><span class="line"></span><br><span class="line">    version_str = mongoconn.server_info()[<span class="string">'version'</span>]</span><br><span class="line">    version = tuple(map(int, version_str.split(<span class="string">'.'</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> version &lt; (<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">        <span class="keyword">raise</span> VersionMismatch(E_SERVER_VERSION.format(version_str))</span><br><span class="line">    <span class="keyword">elif</span> self.ttl <span class="keyword">and</span> version &lt; (<span class="number">2</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">raise</span> VersionMismatch(E_NO_TTL_INDEXES.format(version_str))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> database</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_parse_uri</span><span class="params">(self, scheme=<span class="string">'mongodb://'</span>)</span>:</span></span><br><span class="line">    <span class="comment"># See mongodb uri documentation:</span></span><br><span class="line">    <span class="comment"># http://docs.mongodb.org/manual/reference/connection-string/</span></span><br><span class="line">    client = self.connection.client</span><br><span class="line">    hostname = client.hostname</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hostname.startswith(scheme):</span><br><span class="line">        hostname = scheme + hostname</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hostname[len(scheme):]:</span><br><span class="line">        hostname += self.default_hostname</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> client.userid <span class="keyword">and</span> <span class="string">'@'</span> <span class="keyword">not</span> <span class="keyword">in</span> hostname:</span><br><span class="line">        head, tail = hostname.split(<span class="string">'://'</span>)</span><br><span class="line">        credentials = client.userid</span><br><span class="line">        <span class="keyword">if</span> client.password:</span><br><span class="line">            credentials += <span class="string">':'</span> + client.password</span><br><span class="line">        hostname = head + <span class="string">'://'</span> + credentials + <span class="string">'@'</span> + tail</span><br><span class="line"></span><br><span class="line">    port = client.port <span class="keyword">if</span> client.port <span class="keyword">else</span> self.default_port</span><br><span class="line">    parsed = uri_parser.parse_uri(hostname, port)</span><br><span class="line">    dbname = parsed[<span class="string">'database'</span>] <span class="keyword">or</span> client.virtual_host</span><br><span class="line">    <span class="keyword">if</span> dbname <span class="keyword">in</span> (<span class="string">'/'</span>, <span class="keyword">None</span>):</span><br><span class="line">        dbname = self.default_database</span><br><span class="line">    options = &#123;</span><br><span class="line">        <span class="string">'auto_start_request'</span>: <span class="keyword">True</span>,</span><br><span class="line">        <span class="string">'ssl'</span>: self.ssl,</span><br><span class="line">        <span class="string">'connectTimeoutMS'</span>: (int(self.connect_timeout * <span class="number">1000</span>)</span><br><span class="line">                             <span class="keyword">if</span> self.connect_timeout <span class="keyword">else</span> <span class="keyword">None</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    options.update(parsed[<span class="string">'options'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hostname, dbname, options</span><br></pre></td></tr></table></figure><p>假设我们连接参数是 <code>mongodb://192.168.1.1:27017,192.168.1.2:27017/yiran</code> ，那么 <code>pymongo.uri_parser.parse_uri</code> 解析的结果会是： <code>{&#39;username&#39;: None, &#39;nodelist&#39;: [(&#39;192.168.1.1&#39;, 27017), (&#39;192.168.1.2&#39;, 27017)], &#39;database&#39;: &#39;yiran&#39;, &#39;collection&#39;: None, &#39;password&#39;: None, &#39;options&#39;: {}}</code> 。</p><p>socketTimeoutMS在我们的环境中，MongoDB 的 URI 中并没有指定 options，所以 <code>pymongo.uri_parser.parse_uri</code> 结果的 <code>options</code> 为空。最终连接所使用的 <code>options</code> 就是在 <code>_parse_uri</code> 中定义的 options ，其中类变量 <code>connect_timeout</code> 在 Channel 定义为 None，所以最终 Kombu 建立 MongoDB 连接并没有设置 <code>socketTimeoutMS</code>，如果不设置 <code>socketTimeoutMS</code> ，默认是 None，永久等待。当网络出现异常时，直观看到的现象会是 hang 住。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Channel</span><span class="params">(virtual.Channel)</span>:</span></span><br><span class="line">    <span class="string">"""MongoDB Channel."""</span></span><br><span class="line"></span><br><span class="line">    supports_fanout = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Mutable container. Shared by all class instances</span></span><br><span class="line">    _fanout_queues = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Options</span></span><br><span class="line">    ssl = <span class="keyword">False</span></span><br><span class="line">    ttl = <span class="keyword">False</span></span><br><span class="line">    connect_timeout = <span class="keyword">None</span></span><br><span class="line">    capped_queue_size = <span class="number">100000</span></span><br><span class="line">    calc_queue_size = <span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="Celery-与-Kombu-参数传递"><a href="#Celery-与-Kombu-参数传递" class="headerlink" title="Celery 与 Kombu 参数传递"></a>Celery 与 Kombu 参数传递</h3><p>现在观察到连接参数不符合预期，为什么之前的 3.x 版本没有问题？切换到 3.x 分支查看对应的代码，可以看到大体逻辑都是类似的，关于 options 的处理，3.x 存在一行 ： <code>options.update(client.transport_options)</code> ，这里的 client 在函数最开始赋值，对应的是 <code>self.connection.client</code> ，<code>self.connection</code> 是 Transport 构造传入的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_parse_uri</span><span class="params">(self, scheme=<span class="string">'mongodb://'</span>)</span>:</span></span><br><span class="line">    <span class="comment"># See mongodb uri documentation:</span></span><br><span class="line">    <span class="comment"># http://docs.mongodb.org/manual/reference/connection-string/</span></span><br><span class="line">    client = self.connection.client</span><br><span class="line">    hostname = client.hostname</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hostname.startswith(scheme):</span><br><span class="line">        hostname = scheme + hostname</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hostname[len(scheme):]:</span><br><span class="line">        hostname += DEFAULT_HOST</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> client.userid <span class="keyword">and</span> <span class="string">'@'</span> <span class="keyword">not</span> <span class="keyword">in</span> hostname:</span><br><span class="line">        head, tail = hostname.split(<span class="string">'://'</span>)</span><br><span class="line"></span><br><span class="line">        credentials = client.userid</span><br><span class="line">        <span class="keyword">if</span> client.password:</span><br><span class="line">            credentials += <span class="string">':'</span> + client.password</span><br><span class="line"></span><br><span class="line">        hostname = head + <span class="string">'://'</span> + credentials + <span class="string">'@'</span> + tail</span><br><span class="line"></span><br><span class="line">    port = client.port <span class="keyword">if</span> client.port <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">else</span> DEFAULT_PORT</span><br><span class="line"></span><br><span class="line">    parsed = uri_parser.parse_uri(hostname, port)</span><br><span class="line"></span><br><span class="line">    dbname = parsed[<span class="string">'database'</span>] <span class="keyword">or</span> client.virtual_host</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> dbname <span class="keyword">in</span> (<span class="string">'/'</span>, <span class="keyword">None</span>):</span><br><span class="line">        dbname = <span class="string">'kombu_default'</span></span><br><span class="line"></span><br><span class="line">    options = &#123;</span><br><span class="line">        <span class="string">'auto_start_request'</span>: <span class="keyword">True</span>,</span><br><span class="line">        <span class="string">'ssl'</span>: client.ssl,</span><br><span class="line">        <span class="string">'connectTimeoutMS'</span>: (int(client.connect_timeout * <span class="number">1000</span>)</span><br><span class="line">                             <span class="keyword">if</span> client.connect_timeout <span class="keyword">else</span> <span class="keyword">None</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    options.update(client.transport_options)</span><br><span class="line">    options.update(parsed[<span class="string">'options'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hostname, dbname, options</span><br></pre></td></tr></table></figure><p><code>connection</code> 对应的就是 Kombu 中的 <code>Connection</code> ，Kombu 对外隐藏了 Transport ，Celery 在初始化阶段，会建立连接，调用路径是 <code>celery/app/base.py:Celery._connection</code> -&gt; <code>celery/app/amqp.py:AMQP.Connection</code> -&gt; <code>kombu/connection.py:Connection</code> 。传递参数 <code>transport_options</code> 就是在 Celery app 声明时配置的参数，具体可配置参数可以参考文档： <a href="https://docs.celeryq.dev/en/stable/userguide/configuration.html。" target="_blank" rel="noopener">https://docs.celeryq.dev/en/stable/userguide/configuration.html。</a></p><p>在我们的场景中，声明了以下参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BROKER_TRANSPORT_OPTIONS = &#123;</span><br><span class="line">    &quot;connect&quot;: False,</span><br><span class="line">    &quot;maxPoolSize&quot;: 5 if &quot;worker&quot; in process_cmdline else 2,</span><br><span class="line">    &quot;socketTimeoutMS&quot;: 5000,</span><br><span class="line">    &quot;connectTimeoutMS&quot;: 5000,</span><br><span class="line">    &quot;serverSelectionTimeoutMS&quot;: 5000,</span><br><span class="line">    &quot;w&quot;: 0,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Kombu 使用 MongoDB Transport 时，最终会带有这些参数创建 MongoDB 连接，所以不会出现此问题说描述的现象。</p><h2 id="Celery-改动背景"><a href="#Celery-改动背景" class="headerlink" title="Celery 改动背景"></a>Celery 改动背景</h2><p>@rmihael 上报了一个问题： <a href="https://github.com/celery/celery/issues/1047" target="_blank" rel="noopener">Celery events are not removed from MongoDB broker #1047</a> ，表示在使用 Celery Flower（Celery 监控组件）后，<code>messages</code> 中的事件不会清除，导致占用了大量的 MongoDB 存储空间。该 Issue 中讨论最终决定使用 MongoDB TTL 来解决此问题。</p><p>在 Kombu 4.x 开发周期中，@daevaorn 提交了 <a href="https://github.com/celery/kombu/pull/537" target="_blank" rel="noopener">MongoDB TTL support and refactorings #537</a> 用来支持 MongoDB TTL，在该 PR 中包含了大量与 TTL 无关的 commit，并且包含了一定的重构，commit 如下：</p><ul><li>Complete unit tests suit for MongoDB transport</li><li>Optional TTL support for MongoDB transport. AMQP TTL headers: x-messa… </li><li>Rearrange methods at MongoDB channel class</li><li>Another MongoDB transport clean up and refactor. Use of transport opt… </li><li>Opt-out for queue size calculation</li><li>Use natural sort for more FIFO semantic</li><li>Fix docstrings</li></ul><p>其中 <code>Optional TTL support for MongoDB transport.</code> 是最关键的改动，忽略 TTL 的改动，主要看建立 MongoDB 连接的改动。在 <code>Channel</code> Class 中新增了一些类变量用于标识当前配置，在 <code>_parse_uri</code> 中，将 SSL,connectTImeoutMS 从 <code>client</code> 替换为了 <code>self</code> ，并删除了 <code>options.update(client.transport_options)</code> 。其中删除了 <code>options.update(client.transport_options)</code> 是导致这个问题的关键。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> class Channel(virtual.Channel):</span><br><span class="line">     _client = None</span><br><span class="line">     supports_fanout = True</span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+    # Mutable containers. Shared by all class instances</span></span><br><span class="line">     _fanout_queues = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+    # Options</span></span><br><span class="line"><span class="addition">+    connect_timeout = None</span></span><br><span class="line"><span class="addition">+    ssl = False</span></span><br><span class="line"><span class="addition">+    capped_queue_size = 100000</span></span><br><span class="line"><span class="addition">+    ttl = False</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+    from_transport_options = (</span></span><br><span class="line"><span class="addition">+        virtual.Channel.from_transport_options</span></span><br><span class="line"><span class="addition">+        + ('connect_timeout', 'ssl', 'ttl', 'capped_queue_size'))</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">     def __init__(self, *vargs, **kwargs):</span><br><span class="line">         super(Channel, self).__init__(*vargs, **kwargs)</span><br><span class="line">         ...</span><br><span class="line"></span><br><span class="line">         ...</span><br><span class="line"></span><br><span class="line">    def _parse_uri(self, scheme='mongodb://'):</span><br><span class="line">        ...</span><br><span class="line">         options = &#123;</span><br><span class="line">             'auto_start_request': True,</span><br><span class="line"><span class="deletion">-            'ssl': client.ssl,</span></span><br><span class="line"><span class="deletion">-            'connectTimeoutMS': (int(client.connect_timeout * 1000)</span></span><br><span class="line"><span class="deletion">-                                 if client.connect_timeout else None),</span></span><br><span class="line"><span class="addition">+            'ssl': self.ssl,</span></span><br><span class="line"><span class="addition">+            'connectTimeoutMS': (int(self.connect_timeout * 1000)</span></span><br><span class="line"><span class="addition">+                                 if self.connect_timeout else None),</span></span><br><span class="line">         &#125;</span><br><span class="line"><span class="deletion">-        options.update(client.transport_options)</span></span><br><span class="line">         options.update(parsed['options'])</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Celery Kombu 代码管理感觉有些不清晰，在多个分支上想要对比非常困难。必要组件升级大版本进行全集测试是必要的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;产品组件 JobCenter 使用 Celery 实现异步任务中心，同时会运行 job-center-worker （celery work
      
    
    </summary>
    
    
      <category term="Python" scheme="https://zdyxry.github.io/tags/Python/"/>
    
      <category term="Celery" scheme="https://zdyxry.github.io/tags/Celery/"/>
    
  </entry>
  
</feed>
