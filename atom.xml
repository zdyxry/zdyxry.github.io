<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yiran&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zdyxry.github.io/"/>
  <updated>2023-02-26T12:56:35.185Z</updated>
  <id>https://zdyxry.github.io/</id>
  
  <author>
    <name>yiran</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Weekly Issue 2023-02-26</title>
    <link href="https://zdyxry.github.io/2023/02/26/Weekly-Issue-2023-02-26/"/>
    <id>https://zdyxry.github.io/2023/02/26/Weekly-Issue-2023-02-26/</id>
    <published>2023-02-26T19:00:00.000Z</published>
    <updated>2023-02-26T12:56:35.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://matt-rickard.com/nix-and-the-last-war" target="_blank" rel="noopener">Nix Is Fighting The Last War</a></p><p>[[Nix]] 注定是一个小众的解决方式。</p><hr><p><a href="https://www.kawabangga.com/posts/4925" target="_blank" rel="noopener">Tcpdump 从 TCP_option_address 中根据真实 IP 过滤 | 卡瓦邦噶！</a></p><p>[[tcpdump]] 抓取 [[LVS]] 转发前的真实 IP 地址。</p><hr><p><a href="https://www.levels.fyi/blog/scaling-to-millions-with-google-sheets.html" target="_blank" rel="noopener">How Levels.fyi scaled to millions of users with Google Sheets as a backend</a></p><p>早起通过[[Google]][[Sheets]] 配合 [[Lambda]] 和 API Gateway 快速验证产品可行性，后续根据需要来切换到后端服务加数据库形式。</p><hr><p><a href="https://www.youtube.com/watch?v=4WuYGcs0t6I" target="_blank" rel="noopener">FOSDEM 2023 - I was wrong about Flatpak, AppImage, and Snap (Containerised Apps Presentation) - YouTube</a></p><p>讨论了AppImage、Snap和 Flatpak ，2017年以及现状，结论是使用 Flatpak 让生活更美好。</p><hr><p><a href="https://moelove.info/2023/02/19/K8S-%E7%94%9F%E6%80%81%E5%91%A8%E6%8A%A5-Cilium-%E5%92%8C-Istio-%E7%9A%84%E6%96%B0%E7%89%88%E6%9C%AC%E5%B8%A6%E6%9D%A5%E4%BC%97%E5%A4%9A%E6%96%B0%E7%89%B9%E6%80%A7/" target="_blank" rel="noopener">K8S 生态周报| Cilium 和 Istio 的新版本带来众多新特性 | MoeLove</a></p><blockquote><p>containerd v1.6.18 发布<br>修复了 CVE-2023-25153，在导入OCI镜像时，某些文件没有对读取的字节数进行限制。如果一个恶意制作的镜像包含了一个非常大的文件，且没有对其进行限制，可能会导致拒绝服务攻击；</p></blockquote><p>最近内部遇到的一个问题，使用<a href="https://github.com/containers/image/blob/10858b2058d8c0c709bb2489e1cb7773d1d09216/storage/storage_dest.go#L191-L195" target="_blank" rel="noopener">containers/image</a> 这个库，在进行 layer 写入的时候没有 sync，可能会导致 dirty page 太多进而导致程序触发 [[OOM]]。这个场景在配合 xfs 的时候出现问题，ext4 正常。</p><hr><p><a href="https://hynek.me/til/copyright-years/" target="_blank" rel="noopener">You Can Stop Updating Copyright Attribution Years</a></p><p>每次更新代码的时候都要考虑是不是更新[[Copyright]]，越来越多项目部写具体年份了。<br>[[LinuxFoundation]] 针对[[Copyright]] 有具体的博客讲解：<a href="https://www.linuxfoundation.org/blog/blog/copyright-notices-in-open-source-software-projects" target="_blank" rel="noopener">Copyright Notices in Open Source Software Projects - Linux Foundation</a></p><hr><p><a href="https://www.parca.dev/docs/parca-agent-design#cpu-sampling-frequency" target="_blank" rel="noopener">Design | Parca</a></p><p>[[Parca]] Agent 关于[[CPU]] 采样频率设置  </p><blockquote><p>We sample at 19Hz (19 times per second) because it is a prime number, and primes are good to avoid collisions with other things that may be happening periodically on a machine. In particular, 100 samples per second means every 10ms which is a frequency that may very well be used by user code, so a CPU profile could show a periodic workload on-CPU 100% of the time which is misleading as it would produce a skewed profile.<br>19 is close to 20 which would have been a natural choice just for lowering profiling overhead, and it’s easier to reason about, e.g., we could take roughly 80 samples per second on 4-CPU machine.</p></blockquote><hr><p><a href="https://www.kawabangga.com/posts/4935" target="_blank" rel="noopener">针对进程设置路由规则 | 卡瓦邦噶！</a></p><p>[[iptables]] , [[LD_PRELOAD]], 代码中直接修改。评论中提到其他实现方式：把进程放到独立的 network namespace ，然后配合 iptables + route；或者 iptables –uid-owner 匹配 Mark，将不同的进程用不同的 UID 运行，[[Istio]] 采用了这种方式。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://hayami.typlog.io/ueno" target="_blank" rel="noopener">对于上野千鹤子的对话视频，我非常非常愤怒 - hayami’s blog</a></p><blockquote><p>而这会让人觉得，这么多前人后人前仆后继浴血奋战薪火相传，结果讨论的东西简直梦回清朝裹脚布，我裹上去之后还一个劲在问吾与裹脚布谁美？</p></blockquote><p>视频中的双方不在一个层面上，上野千鹤子只要用真诚就已经秒杀对方了。</p><hr><p><a href="https://mp.weixin.qq.com/s/MLHMIphuF5HS02ZhfNzcuA" target="_blank" rel="noopener">抢教授话筒的中学生——“大词过敏症”正在这代年轻人中退潮</a></p><blockquote><p>但有没有可能，这些都是错误的呢？有没有可能，你个人好好学习这件事情，既无法显著的改善你的个人命运、也对国家崛起这样的大事能起到的推动作用微乎其微，而只关乎你个人的性格、修养、见识与灵魂呢？<br>而这，也许才是教育的本意 ，我们是普通人，一个现实是：普通人读书并不太可能为自己或为国家的命运起到什么“翻天覆地”的大推动、大变化。<strong>能培养一个独立、善良、理性而能享受自己平凡的生活和思维乐趣的普通公民，就已经是教育的成功了。</strong></p></blockquote><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《当我们不再理解世界》，刚开始看，还没有什么感受。</p><p>《千寻小姐》，有村架纯的新电影，视角和故事都很平淡，但是这种平淡的故事也很少有人拍，有点像《西瓜》的感觉。</p><p>《模范出租车》，非典典型的韩国类型片，目前按照剧情看可能没有什么可反转的地方，当做下饭剧还不错。</p>]]></content>
    
    <summary type="html">
    
      FPS游戏太难了，用手柄玩就更难了。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2023-02-19</title>
    <link href="https://zdyxry.github.io/2023/02/19/Weekly-Issue-2023-02-19/"/>
    <id>https://zdyxry.github.io/2023/02/19/Weekly-Issue-2023-02-19/</id>
    <published>2023-02-19T19:00:00.000Z</published>
    <updated>2023-02-26T12:56:35.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://github.com/ublue-os" target="_blank" rel="noopener">uBlue · GitHub</a><br>计划基于[[Fedora]][[coreos]] 的发行版，依托于 [[ostree]] 的 [[NativeContainer]] 能力，可以很方便的使用 [[Container]]来构建自己的 Desktop。</p><hr><p><a href="https://fosdem.org/2023/schedule/event/vai_blkhash_fast_disk/" target="_blank" rel="noopener">FOSDEM 2023 - blkhash - fast disk image checksums</a></p><p>用来计算[[image]] checksum 的工具，比 [[SHA]] 更快，支持 format 探测等。</p><hr><p><a href="https://newsletter.pragmaticengineer.com/p/real-world-eng-8" target="_blank" rel="noopener">https://newsletter.pragmaticengineer.com/p/real-world-eng-8</a></p><p>[[Khan]] 将内部服务从 [[Python]] 迁移至 [[Golang]]的过程和思考，根本需求是[[Python2]] 的问题，100 人规模的开发团队，共花费 3.5 年时间完成重写。</p><blockquote><p><em>Moving to Go will undeniably be more effort than moving to Python 3, but the performance win alone makes it worth it.</em></p></blockquote><hr><p><a href="https://betterprogramming.pub/can-we-stop-with-those-horrible-system-overview-dashboards-already-5ea10a28fecf" target="_blank" rel="noopener">Can We Stop With Those Horrible “System Overview” Dashboards Already? | by Boris Cherkasky | Jan, 2023 | Better Programming</a></p><p>[[Dashboard]] 配置问题。（我们内部产品在出现问题时，大家的关注点完全不同，想要查看 Dashboard 获取有用的信息通常需要自己去从零创建图表。。</p><hr><p><a href="https://www.dolthub.com/blog/2022-11-28-go-os-exec-patterns/" target="_blank" rel="noopener">Some Useful Patterns for Go’s os/exec | DoltHub Blog</a></p><p>使用 [[Golang]]调用[[os/exec]]的示例，配合 [[Shell]] 使用必备。</p><hr><p><a href="https://lucumr.pocoo.org/2023/2/17/the-killing-ai/" target="_blank" rel="noopener">I Think AI Would Kill my Wife | Armin Ronacher’s Thoughts and Writings</a></p><p>对于[[Bing]][[ChatGPT]]的思考，随着用户越来越多，最近流传的聊天记录有点超过了我的想象。</p><hr><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://www.zlovezl.cn/articles/programming-is-still-hard-after-14-years/" target="_blank" rel="noopener">https://www.zlovezl.cn/articles/programming-is-still-hard-after-14-years/</a></p><p>有目标的持续学习是很重要的，无论各个方面。</p><hr><p><a href="https://medium.com/@croath/%E4%BD%8E%E6%88%90%E6%9C%AC%E4%BD%93%E9%AA%8C%E7%94%9F%E6%88%90-ai-%E5%B0%8F%E5%A7%90%E5%A7%90%E7%85%A7%E7%89%87-85ffa7c13cd7" target="_blank" rel="noopener">低成本体验生成 AI 小姐姐照片. 前言 | by Croath Liu | Feb, 2023 | Medium</a></p><p>如何个人体验[[AI]] 生成照片，推荐使用[[Vultr]] 的服务。关键点是如何选择合适的 prompt，文中最后提到通过 [[ChatGPT]]来生成关键词让我没想到。</p><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《足利女童连续失踪事件》，看完了，以为是类似桶川的有结局的故事，结果并没有，类似的事件还不知道有多少。</p><p>《非常保镖》，毛骗团队小成本电影。</p><p>《菜单》，标签中有喜剧、惊悚、恐怖。但跟喜剧不沾边，大家对美食的追求到底是啥？可能你去过十几次的店铺，你都记不得其中的一道菜的名字，按照小红书的方式，更多的可能是拍照，表示我来过。</p>]]></content>
    
    <summary type="html">
    
      茑屋书店把之前摆放书籍的地方换成了盲盒，心情复杂。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2023-02-12</title>
    <link href="https://zdyxry.github.io/2023/02/12/Weekly-Issue-2023-02-12/"/>
    <id>https://zdyxry.github.io/2023/02/12/Weekly-Issue-2023-02-12/</id>
    <published>2023-02-12T19:00:00.000Z</published>
    <updated>2023-02-26T12:56:35.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://reorx.com/makers-daily/002-thoughts-on-generative-ai/" target="_blank" rel="noopener">Some random thoughts on Generative AI | Reorx’s Forge</a></p><p>[[ChatGPT]] 大大降低了大家的使用门槛，只要你有想法，就可以快速POC。</p><p><a href="https://www.digitalocean.com/blog/cloud-backup-best-practices-startups-smbs" target="_blank" rel="noopener">Cloud Backup Best Practices for SMBs</a></p><p>云应用的[[备份]]实践，借机推广[[Snapshooter]]。</p><p><a href="https://dott.love/writing/design-engineering" target="_blank" rel="noopener">设计师如何入门前端</a>   </p><blockquote><p>最后我想说，无论是设计工具还是[[前端]]代码，都只是实现创意的工具。最终能够限制创意的，只有不够开放和好奇的大脑。</p></blockquote><hr><p><a href="https://moelove.info/2022/12/07/Kubernetes-%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86%E7%B3%BB%E5%88%97%E4%B8%80/" target="_blank" rel="noopener">Kubernetes 证书管理系列（一） | MoeLove</a></p><p>[[证书]]管理是个非常麻烦的事情，[[openssl]] 的命令行也是用过的命令工具里面比较难用的几个之一了。</p><hr><p><a href="https://www.digitalocean.com/blog/cloud-backup-best-practices-startups-smbs" target="_blank" rel="noopener">Cloud Backup Best Practices for SMBs</a></p><p>云应用的[[备份]]实践，借机推广[[Snapshooter]]。</p><hr><p><a href="https://supabase.com/blog/chatgpt-supabase-docs" target="_blank" rel="noopener">Supabase Clippy: ChatGPT for Supabase Docs</a></p><p>[[Supabase]] 在文档网站提供[[ChatGPT]] 功能，来辅助用户搜索。如何构建：将完整文档拆分为多份，使用 [[OpenAI]] API 将其作为输入，使用[[pgvector]] 存储到[[Postgres]] 中，获取用户问题，在[[Postgres]] 中获取问题相关的文档，讲这些文档作为[[GPT-3]] 上下文，返回给用户。</p><hr><p><a href="https://squaredup.com/blog/slight-reliability/bad-observability/" target="_blank" rel="noopener">Bad Observability - SquaredUp</a></p><p>关于可观测需要避开的点：</p><blockquote><p>Forgetting the customer;<br>Environment inconsistency;<br>Not understanding your ecosystem;<br>No consistent trace ID;<br>The big dumb metric;<br>Bad sampling intervals;<br>Misunderstanding metrics;<br>Lazy synthetic transactions;<br>A plague of dashboards;<br>Unnecessary alerts;<br>Hoarding data;<br>Disconnected data;<br>Throwing tools at a problem;<br>Mandating tools;<br>The chosen few;  </p></blockquote><hr><p><a href="https://www.threatmark.com/dockerized-redis-performance-on-centos-7-5-2/" target="_blank" rel="noopener">Dockerized Redis performance on CentOS 7.5 | ThreatMark | Anti Fraud</a></p><p>[[Seccomp]] 对 [[redis]] benchmark 的影响。</p><hr><p><a href="https://xxchan.github.io/cs/2023/02/08/profiling-101.html" target="_blank" rel="noopener">Profiling 101 - XX’s Blog</a></p><p>[[Profiling]]  101。 对于如何在[[Python]] 环境中进行有效的性能排查一直没有掌握。</p><hr><p><a href="https://lucumr.pocoo.org/2023/2/9/everybody-is-complex/" target="_blank" rel="noopener">Everybody is More Complex Than They Seem | Armin Ronacher’s Thoughts and Writings</a></p><blockquote><p>The most important lesson for me was loving myself and the path I’m on, and how utterly destructive it can be to myself to not be in balance about my true goals and desires.</p></blockquote><hr><p><a href="https://mp.weixin.qq.com/s/ERggKUosAYIkAKN0DEmKhw" target="_blank" rel="noopener">天工开物 #5 我的 Linux 开发机</a></p><p>[[Linux]][[开发机]] 配置，选择的发行版是 [[Garuda]]。 感觉目前因为[[企业微信]][[微信]][[腾讯会议]] 等等类似的软件，一台 PC 的情况下还是没办法只使用 [[Linux]]。打算等我的 PC 到了之后尝试一下 [[WSL2]]，看看现状如何。文中提到的云服务器比较贵的事情，最近发现如果只是实验性质的工作，可以考虑[[竞价实例]]，价格很友好。</p><hr><p><a href="https://xargin.com/winter-is-coming/" target="_blank" rel="noopener">下一次工业革命近在眼前了</a></p><p>最近关于 [[AI]] 的讨论热度太高了，感觉跟之前的[[元宇宙]] 不同，后者是虚无缥缈的，前者现在是实实在在有可以让你感到震撼的能力了。</p><hr><p><a href="https://ferd.ca/the-law-of-stretched-cognitive-systems.html" target="_blank" rel="noopener">The Law of Stretched [Cognitive] Systems</a></p><p>有些悲观，但也是现实？</p><blockquote><p>Every system is stretched to operate at its capacity ; as soon as there is some improvement, for example in the form of new technology, it will be exploited to achieve a new intensity and tempo of activity.</p></blockquote><hr><p><a href="https://medium.com/chick-fil-atech/enterprise-restaurant-compute-f5e2fd63d20f" target="_blank" rel="noopener">Enterprise Restaurant Compute. by the CFA Enterprise Restaurant… | by Brian Chambers | chick-fil-atech | Jan, 2023 | Medium</a></p><p>[[Edge Computing]] 具体场景处理。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://b.brave2049.com/wei-shen-me-zai-dang-xia-yao-jin-shen-zuo-chu-mai-fang-jue/" target="_blank" rel="noopener">为什么在当下要谨慎做出买房决策？ – 基地文稿站</a>     </p><p>[[房子]] 是[[资产]]还是[[负债]] ？</p><hr><p><a href="https://zhuanlan.zhihu.com/p/595625553" target="_blank" rel="noopener">年度扯淡 2022 - 知乎</a></p><p>老板的年终总结。</p><hr><p><a href="https://matt-rickard.com/what-wont-changed" target="_blank" rel="noopener">What Won’t Change</a></p><p>未来 10 年什么会发生改变？什么不会？</p><hr><p><a href="https://reorx.com/essays/2023/02/life-vs-life-in-english/" target="_blank" rel="noopener">思考生活与生命在英语中的区别 | Reorx’s Forge</a></p><p>由一句话的翻译引发的思考。</p><blockquote><p>关于“掌控时间”的说法，可能你想强调的是时间管理或自律这个概念吧，单说字面翻译 DeepL 更好一些，master 更接近 manipulate 的含义。二是“生活”如果是指物质层面，英语一般习惯用 ^^standard of living^^ 描述，精神层面 ^^quality (质量) of life^^ 用得多。<br>再就是“生命价值”这个概念，中文里可以说价值多还是少，而英文里 life value 更偏重价值观，对应的是忠诚、正义这样的词，所以这个翻译不是很恰当。然而 value of life 也不行，这个词是形容一条命值多少钱的。我觉得 ^^self actualization^^ 更符合这个语境。<br>最后就是两个细节，回到汉语的思维模式，“使我的生活变得更好”显然没有“改善我的生活”更地道，英语也是一样的，像 improve/enhance 这些词自带改变的含义。还有中文的“不仅/还”是隐含的递进关系，强调后面的部分，字面对应的 not only 在关系强调上要若一些。</p></blockquote><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《足利女童连续失踪事件》，刚开始看，作者面对社会上的“既定事实”还可以去进行质疑，佩服。</p><p>《魔翡翠》，经典老片。</p>]]></content>
    
    <summary type="html">
    
      周末还是应该多走走，上海去苏州真的是方便。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2023-02-04</title>
    <link href="https://zdyxry.github.io/2023/02/04/Weekly-Issue-2023-02-04/"/>
    <id>https://zdyxry.github.io/2023/02/04/Weekly-Issue-2023-02-04/</id>
    <published>2023-02-04T19:00:00.000Z</published>
    <updated>2023-02-26T12:56:35.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://world.hey.com/dhh/the-only-thing-worse-than-cloud-pricing-is-the-enterprisey-alternatives-854e98f3" target="_blank" rel="noopener">The only thing worse than cloud pricing is the enterprisey alternatives</a>    </p><p>涉及到金钱的东西总是让人头大。企业服务的定价确实很玄幻，透明度很低。</p><hr><p><a href="https://github.com/lensapp/lens/issues/6823" target="_blank" rel="noopener">OpenLens 6.3.0 - No Logs or Shell buttons · Issue #6823 · lensapp/lens · GitHub</a></p><p>[[Lens]] 删除了部分功能引发了大家对其所有权的担忧，官方在推 Desktop 版本。</p><hr><p><a href="https://www.brendangregg.com/blog/2017-08-08/linux-load-averages.html" target="_blank" rel="noopener">Linux Load Averages: Solving the Mystery</a></p><p>[[Linux]][[负载]] 解释说明，其中关于<code>TASK_UNINTERRUPTIBLE</code> 的历史进行了调查，文章末尾提供了 <a href="https://www.brendangregg.com/USEmethod/use-linux.html" target="_blank" rel="noopener">性能检查列表</a></p><hr><p><a href="https://blog.lucode.net/network-stack/problem-of-performance-degrading-in-linux-src-port-selecting.html" target="_blank" rel="noopener">协议栈源端口选择性能衰减问题 - 撸代码 - LuCode.net</a></p><blockquote><p>自kernel 4.2开始，端口资源的分配策略改了，目前奇数端口留给<code>bind</code>，偶数端口留给<code>connect</code>为了均衡资源的占用，但是显然，这种策略不适合本文所述的特殊场景，并且对于<code>bind</code>而言，也存在性能衰减的问题。</p></blockquote><blockquote><p>依次尝试去获取，当然每次获取的起点是随机的。很明显，当我们完全占用偶数组的端口后，所有后续的<code>connect</code>调用，所需的源端口应该位于奇数组中，然而该函数依旧会尝试完整遍历偶数组资源，这也就是<code>__inet_check_established</code>耗时占比这么高的原因。</p></blockquote><hr><p><a href="https://www.hashicorp.com/blog/introducing-hermes-an-open-source-document-management-system" target="_blank" rel="noopener">Introducing Hermes, An Open Source Document Management System</a></p><p>[[hashicorp]] 开源的基于 [[Google Workspace]] 的文档管理系统。</p><hr><p><a href="https://ipotato.me/article/74" target="_blank" rel="noopener">iPotato | Fly.io 初体验之博客搬家</a></p><p>把[[Python]] 博客放到[[<a href="http://fly.io/" target="_blank" rel="noopener">Fly.io</a>]] 上运行。提到了 [[<a href="http://fly.io/" target="_blank" rel="noopener">Fly.io</a>]]的招聘流程很有趣。    </p><blockquote><p>通过他们官网的<a href="https://fly.io/docs/hiring/hiring/" target="_blank" rel="noopener">招聘流程介绍</a>，可以看到他们的“面试”过程很有趣，这里的面试打了引号是因为他们其实并没有面试这一步，而是通过做 2 到 3 个挑战题的方式第一阶段通关后直接加入他们的公司 Slack 和他们的工程师工作一天，一切顺利的话就会给你发 Offer。从这样一个细节来看，除去好用的产品外，这也真的是一家有趣的公司。</p></blockquote><hr><p><a href="https://matt-rickard.com/future-is-not-evenly-distributed" target="_blank" rel="noopener">Future is Not Evenly Distributed</a></p><p>其中许多技术趋势仍然有很大的增长，还需要进行很多其他的工作来扩大用户。</p><hr><p><a href="https://findthatmeme.com/blog/2023/01/08/image-stacks-and-iphone-racks-building-an-internet-scale-meme-search-engine-Qzrz7V6T.html" target="_blank" rel="noopener">Image Stacks and iPhone Racks - Building an Internet Scale Meme Search Engine | FindThatMeme.com Blog</a></p><p>作者使用二手 &amp; 闲置的 iPhone SE 创建了一个 OCR 的服务集群。现在手机性能已经过剩了，作为一个独立的可接入终端（4G，WIFI），有很多需求都可以通过手机运行 App 来完成，是时候学学 Flutter 了。</p><hr><p><a href="https://jiajunhuang.com/articles/2023_02_03-mysql.md.html" target="_blank" rel="noopener">为什么要把复杂的联表操作拆成多个单表查询？ - Jiajun的编程随想</a>   </p><blockquote><p>让缓存的效率更高。应用程序中，简单查询对应的代码也会更简单，也就更好设计缓存，应用程序可以拆开来，缓存其中的结果，以便 下次使用复用;<br>将查询分解后，执行单个查询可以减少锁的竞争;<br>在应用层做联接，可以更容易对数据库进行拆分，更容易做到高性能和可扩展;<br>查询本身的效率可能也会有所提升;<br>可以减少对冗余记录的访问，MySQL联表操作可能会访问很多数据，并且可能是重复的访问  </p></blockquote><hr><p><a href="https://hashnode.com/post/i-am-mitchell-hashimoto-founder-and-cto-of-hashicorp-ask-me-anything-cjr6ptyne003qdjs29mz7m3hv" target="_blank" rel="noopener">I am Mitchell Hashimoto, Founder and CTO of HashiCorp. Ask me anything! - Hashnode</a></p><p>[[hashicorp]] CTO 针对社区部分提问进行回复，包含了开源社区，个人管理和公司管理。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://www.imbytecat.com/a7dda0b3249b448d8d5f322cc0f4467b" target="_blank" rel="noopener">土耳其 iCloud 上车指南</a></p><p>[[iCloud]] 家庭共享可以跨区。</p><blockquote><p>因此我将我的主号即美区账号作为家庭创建者，再 <strong>通过 iMessage 邀请土区账号</strong>（似乎其他方式会失败），由土区账号来共享 iCloud 订阅给家庭。</p></blockquote><hr><p><a href="https://thedecisionlab.com/biases/mental-accounting" target="_blank" rel="noopener">Mental Accounting - The Decision Lab</a></p><p>[[心理账户]]：塞勒认为，每个人都有心理账户，通过该心理账户来进行各种各样的经济<a href="https://zh.m.wikipedia.org/wiki/%E5%86%B3%E7%AD%96" target="_blank" rel="noopener">决策</a>。通过心理账户，可以解释人的不理性经济决策。</p><blockquote><p>比如，我们会把工资划归到靠辛苦劳动日积月累下来的“勤劳致富”账户中；把年终奖视为一种额外的恩赐，放到“奖励”账户中；而把买彩票赢来的钱，放到“天上掉下的馅饼”账户中。</p></blockquote><hr><p><a href="http://www.paulgraham.com/simply.html" target="_blank" rel="noopener">Write Simply</a>    </p><p>使用简单的单词和句子来写作，避免花里胡哨。</p><hr><p><a href="https://pengx17.vercel.app/posts/my-logseq-contributions" target="_blank" rel="noopener">My Story as a Logseq Contributor | pengx17</a></p><p>[[logseq]]从一个用户到贡献者的故事。</p><hr><p><a href="https://xiaowenz.com/blog/2023/02/card-network-in-china/" target="_blank" rel="noopener">银行卡组织和中国卡市场的前世今生。 - Xiaowen.Z Deployed</a></p><p>[[银行卡组织]] 的介绍和历史梳理。</p><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《TypeScript入门与实战》，利用春节假期看完了。</p><p>《狂飙》，大热剧，确实跟大家说的一样，看到 26集就可以了。</p><p>《伊藤润二狂热：日本恐怖故事》，恐怖，部分故事有套路，但还是很吓人。</p>]]></content>
    
    <summary type="html">
    
      平平无奇的一周。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2023-01-29</title>
    <link href="https://zdyxry.github.io/2023/01/29/Weekly-Issue-2023-01-29/"/>
    <id>https://zdyxry.github.io/2023/01/29/Weekly-Issue-2023-01-29/</id>
    <published>2023-01-29T19:00:00.000Z</published>
    <updated>2023-02-26T12:56:35.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://www.zsythink.net/archives/1199" target="_blank" rel="noopener">iptables详解（1）：iptables概念-朱双印博客</a>   </p><p>[[朱双印]] 关于 [[iptables]] 的基本介绍。</p><hr><p><a href="https://www.linkedin.com/posts/david-masover-253a597_opentowork-activity-7023167482353881089-zI0U/" target="_blank" rel="noopener">领英上的David Masover: #opentowork | 747 条评论</a>    </p><p>来自 [[Google]]真实事件，真正的 [[SRE]]，和这种人工作应该很幸福。</p><hr><p><a href="https://nova.moe/docker-attestation/" target="_blank" rel="noopener">为什么镜像可以 pull 下来但是在 manifest inspect 的时候提示 no such manifest？—— Docker Buildx Attestations 检修记</a>    </p><p>[[Buildkit]] 新特性引发的兼容性问题。     </p><blockquote><p>Buildx v0.10 enables support for a minimal SLSA Provenance attestation, which requires support for OCI-compliant multi-platform images. This may introduce issues with registry and runtime support (e.g. GCR and Lambda). You can optionally disable the default provenance attestation functionality using provenance: false.</p></blockquote><hr><p><a href="https://www.yellow-bricks.com/2023/01/24/disable-the-re-registering-of-ha-disabled-vms-on-other-hosts/" target="_blank" rel="noopener">Disable the re-registering of HA disabled VMs on other hosts! | Yellow Bricks</a>     </p><p>[[ESXi]] 虚拟机[[HA]]das.reregisterrestartdisabledvms<br>：当 vSphere HA 在特定 VM 上停用时，此选项可确保 VM 在发生故障后在另一台主机上注册。这使您可以启动该 VM，而无需手动重新注册它。</p><hr><p><a href="https://matt-rickard.com/what-doesnt-fit-in-git" target="_blank" rel="noopener">What Doesn’t Fit in Git</a></p><p>什么不应该放到 [[git]]中，比如 container image。其中提到了配置文件，理由是如果你部署了一个 Deployment，并且配置了 auto-scale group，现在因为流量变化，导致副本数发生变化，是否要同步更新到配置文件中？现在[[GitOps]] 的用户应该是很多的，搜了一下没有搜到最佳实践是啥。。</p><hr><p><a href="https://zu1k.com/posts/tutorials/p2p/fediverse/" target="_blank" rel="noopener">谈谈 Mastodon、Fediverse 和 ActivityPub - zu1k</a></p><p>越来越多的用户抛弃了 [[Twitter]] 去了 [[Mastodon]]。</p><hr><p><a href="https://linbudu.top/prisma-02" target="_blank" rel="noopener">【Prisma，下一代ORM，不仅仅是ORM（下篇） | Linbudu’s Blog</a>    </p><p>介绍 [[Prisma]] 相关内容，其中的 [[github]] 仓库中有不少示例。</p><hr><p><a href="https://blog.goodjack.tw/2023/01/use-makefile-to-manage-workflows-for-web-projects.html" target="_blank" rel="noopener">寫 Web 也可以用 Makefile：好好管理你的環境流程 | 小克’s 部落格</a></p><p>[[Makefile]] 就属于那种不喜欢但又到处都有的东西。</p><hr><p><a href="https://fanlv.fun/2022/06/02/golang-pprof-mem/" target="_blank" rel="noopener">一次线上内存使用率异常问题排查</a></p><p>从[[TCMalloc]] 到 [[mmap]] ，到 [[Golang]] 中的内存分配都有说明，最后判定问题是内存已经 GC，但是没有归还给操作系统(scavenging)。</p><hr><p><a href="http://www.myriptide.com/smart-cache-cn/" target="_blank" rel="noopener">GraphQL 客户端缓存的正确打开方式 | Riptide</a>   </p><p>[[GraphQL]] 客户端缓存处理。</p><hr><p><a href="https://world.hey.com/dhh/hardware-is-fun-again-b819d0b4" target="_blank" rel="noopener">Hardware is fun again</a></p><blockquote><p>We’re exploring moving both caching and job queuing at Basecamp to NVMe instead of RAM. The latency is now close enough that the advantages of abundant, fast NVMe storage wins. We just bought some 12TB NVMe Gen 4 cards for $2,390. 12TB! Using the new <a href="https://www.servethehome.com/e1-and-e3-edsff-to-take-over-from-m-2-and-2-5-in-ssds-kioxia/" target="_blank" rel="noopener">E1/E3 NVMe form factor</a>, we’re now looking at the possibility of a petabyte’s worth of NVMe storage in a single rack server for around $200K. That’s bananas!</p></blockquote><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://www.bilibili.com/video/BV16Y4y1o7nj/" target="_blank" rel="noopener">人人都想功成名就 但可能碌碌无为才是常态 五年 好遗憾啊_哔哩哔哩_bilibili</a>    </p><blockquote><p>“一个电话就可以让我们8个人一整年的努力化为一场空”。</p></blockquote><p>最近几年冲浪冲不动了，经常去小鸡词典上面搜索相关的梗，结果没有了。</p><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《三体Ⅲ》，终于看完了，真是长啊。</p><p>《仙症》，东北文艺复兴，郑执的短篇小说，其中看着很有感触，东三省的状态都是差不多的。</p><p>《满江红》，反转太多，最后的几个反转太容易猜出了。</p><p>《流浪地球2》，大场面，视听效果满分。</p><p>《2001太空漫游》，看不懂。</p>]]></content>
    
    <summary type="html">
    
      Prisma 真不错啊。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2023-01-22</title>
    <link href="https://zdyxry.github.io/2023/01/22/Weekly-Issue-2023-01-22/"/>
    <id>https://zdyxry.github.io/2023/01/22/Weekly-Issue-2023-01-22/</id>
    <published>2023-01-22T19:00:00.000Z</published>
    <updated>2023-02-26T12:56:35.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://colobu.com/2023/01/20/The-refactoring-of-the-%E2%80%9CVery-efficient-Code%E2%80%9D-from-Dutch-DigiD-App/" target="_blank" rel="noopener">重构荷兰政府那个那个非常有效的代码</a><br>最近的热门讨论，编写一个根据百分比生成进度条的函数。</p><hr><p><a href="https://matt-rickard.com/cloud-spend-breakdown" target="_blank" rel="noopener">Cloud Spend Breakdown</a><br>[[37Signals]] 发布了2022 公有云服务的账单，其中关于数据存储和数据相关服务占比达到了70% ，这部分是最难迁移出来了，期待后续。</p><hr><p><a href="https://opensourcewatch.beehiiv.com/p/what-s-what-with-wolfi-the-linux-undistribution-and-arm" target="_blank" rel="noopener">What’s what with Wolfi, the Linux “undistribution,” and ARM | Open Source Watch</a><br>对[[Wolf]] 项目的介绍，用来应对供应链攻击。</p><hr><p><a href="https://klo.dev/state-of-infrastructure-from-code-2023/" target="_blank" rel="noopener">State of Infrastructure-from-Code 2023 - Klotho</a><br>[[IaC]] 之后谈论[[IfC]] ，在IaC 场景下，开发人员通常需要考虑业务应用程序和基础设施两种应用。<br>[[IfC]] 通过分析业务应用代码来推断所需的基础资源，然后自动创建并维护，不需要手动指定。目前已有的方向是通过 SDK、通过代码注释、两者结合、通过新的编程语言实现。预测 [[IfC]] 会在之后愈发流行。<br>[[IfC]] 创建的资源如何管理？如何保证应用程序没有滥用资源？</p><hr><p><a href="https://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go" target="_blank" rel="noopener">How to use interfaces in Go | jordan orelli</a><br>关于 [[Golang]] [[interface]] 使用上的总结。</p><hr><p><a href="https://chriswarrick.com/blog/2023/01/15/how-to-improve-python-packaging/" target="_blank" rel="noopener">How to improve Python packaging, or why fourteen tools are at least twelve too many | Chris Warrick</a><br>关于 [[Python]][[package]] 的详细介绍文章，并对比了 [[JavaScript]] 和 [[.NET]] 生态，来吐槽 Python 的一团糟。</p><hr><p><a href="https://oilbeater.com/2023/01/15/how-remote-coding-improve-productivity/" target="_blank" rel="noopener">烧钱工作法 —— 远程开发是怎样提升我的效率？| Oilbeater 的自习室</a><br>通过 [[Jetbrains]] [[gateway]] 配置 [[GCP]] 的 Spot 实例进行远程开发，因为 GCP 是实时计费，所以作者会（被迫）集中注意力到当前工作。</p><blockquote><p>不过最直接的感受并不是以上那些，当启动机器的脚本启动后我这边就感觉点起了一个烧钱的火炉，由于 GCP 的计算资源是按秒计费的，那种感觉真的就是实时烧钱。所以基本上火炉一开就什么都顾不上了，注意里全部集中到了当前的任务上，根本不想分心。这段时间别人找我就根本不想理；要是有什么操作或者思路的错误导致耽误时间了，就想抽自己；之前懒得弄的一些脚本自动化，和一些工具的高效使用技巧，快捷键什么的也都开始研究了。由于这种被烧着工作的感觉过于刺激，有时候一些不想干又必须干的工作，并不是必须远程开发，比如文档什么的，我也会先把钱烧起来，然后就很刺激的完成了。</p></blockquote><hr><p><a href="https://www.kawabangga.com/posts/4894" target="_blank" rel="noopener">用 BPF 动态追踪 Python 程序 | 卡瓦邦噶！</a>   </p><blockquote><p>在网上查询和 Python 有关的 BPF 内容大部分都是“如何通过 Python（BCC）来使用 BPF”，而不是“如何用 BPF 去 profile Python 代码”。</p></blockquote><hr><p><a href="https://medium.com/geekculture/a-retrospective-of-working-with-bare-metal-kubernetes-or-to-there-and-back-1868c0356eff" target="_blank" rel="noopener">A 5,5 years retrospective of working with Bare Metal Kubernetes, or To there and back | Geek Culture</a><br>使用 [[Bare Metal]] 管理 [[kubernetes]] 集群的回顾。作者选择[[kubespray]] 来部署集群，在早期使用感受是较好的，但是随着集群规模越来越大，[[kubespray]] 耗时随着节点数成正比，[[kubespray]] 带来的灵活性超出了作者想要的预期，带来的维护性翻倍，作者采用[[kubeadm]] 来重新实现自己所需的 ansible playbook。<br>在管理过程中，随着对测试集群的要求，作者对各个公有云的 [[kubernetes]]服务置备方式进行了调研，最终目的是想要拉起置备 [[kubernetes]] 集群的操作，保证环境一致。</p><hr><p><a href="https://victoriametrics.com/blog/benchmark-100m/" target="_blank" rel="noopener">Monitoring benchmark: how to generate 100 million samples/s of production-like data</a><br>[[VictoriaMetrics]]如何进行监控数据 [[benchmark]]。数据集并不是完全随机的，博客中使用温度和电压举例。最后直接使用[[node-exporter]] 作为数据源，通过部署多个副本来提供实时数据。通过 [[VictoriaMetrics]]的一些优化配置，最后可以达到 2GB/s 的数据写入速度。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://reorx.com/essays/2023/01/what-hots-means-to-me/" target="_blank" rel="noopener">《风暴英雄》对我的意义 | Reorx’s Forge</a><br>游戏对我们意味着什么？带给了我们什么？</p><p>最近[[暴雪]]和[[网易]]合作到期，国服要关闭了，我玩暴雪的游戏不多，炉石传说无论是自己玩还是看直播，都是陪着我从大学到工作。</p><hr><p><a href="https://imtx.me/blog/one-year-experience-of-m1-pro-macbook-pro/" target="_blank" rel="noopener">M1 Pro 的 MacBook Pro 之一年体验记 | I’m TualatriX</a><br>家里的是年迈的 2017 MacBook Pro，电池已经不行了，在考虑如何处理。</p><hr><p><a href="https://www.indigox.me/feynman-technique-in-practice/" target="_blank" rel="noopener">费曼学习法实践 / INDIGO 的信息获取与知识输出方法论</a><br>如何平衡输入和输出的关系。</p><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《三体Ⅰ》，《三体Ⅱ》，最近《三体》动画和剧集都开始上线了，朋友中经常谈论这个，但是我一直没看过，趁着假期，先把小说读了。</p><p>《北京浮生记》，看到推上有人推荐，玩了玩，中关村水货大亨，靠着水货手机发家致富。</p><p>《相残》，很难描述，看完了很困惑，不理解，为什么。</p>]]></content>
    
    <summary type="html">
    
      2023 年来了，新年快乐，希望大家都能身体健康。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2023-01-15</title>
    <link href="https://zdyxry.github.io/2023/01/15/Weekly-Issue-2023-01-15/"/>
    <id>https://zdyxry.github.io/2023/01/15/Weekly-Issue-2023-01-15/</id>
    <published>2023-01-15T19:00:00.000Z</published>
    <updated>2023-02-26T12:56:35.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://deploy.equinix.com/developers/guides/kubernetes-with-kubeadm/" target="_blank" rel="noopener">Deploy Kubernetes on Equinix Metal - Kubeadm via Userdata and Cloud-config</a>   </p><p>[[Equinix]] 通过 [[cloud-init]] 配合 [[kubeadm]] 部署 [[kubernetes]] 集群。</p><hr><p><a href="https://buf.build/blog/buf-curl" target="_blank" rel="noopener">Buf | Introducing buf curl - Call your gRPC endpoints with the simplicity of buf</a>   </p><p>[[bufbuild]] 的 [[grpc]] 命令行。</p><hr><p><a href="https://blog.upbound.io/scaling-kubernetes-to-thousands-of-crds/" target="_blank" rel="noopener">Scaling Kubernetes to Thousands of CRDs</a>   </p><p>[[Crossplane]] 管理上千个 [[CRD]] 遇到的问题和改进方式。（现在好像一个 [[kubernetes]] 集群里面的 CRD 上百也不稀奇。</p><hr><p><a href="https://kodango.com/simple-bash-programming-skills" target="_blank" rel="noopener">简洁的 Bash Programming 技巧 - 团子的小窝</a>   </p><p>[[Bash]] 中 <code>--</code> 后面的参数不会被当做选项解析。</p><hr><p><a href="https://sacra.com/p/docker-plg-pivot/" target="_blank" rel="noopener">How Docker 2.0 went from $11M to $135M in 2 years</a>    </p><p>[[docker]] 公司靠着[[Dockerhub]] 和 [[Desktop]] 收费实现收益。（但现在替代品已经很多了</p><hr><hr><p><a href="https://github.com/sourcegraph/conc" target="_blank" rel="noopener">GitHub - sourcegraph/conc: Better structured concurrency for go</a>   </p><p>列举了一些常见的 [[Golang]]并发场景。</p><hr><p><a href="https://whyk8s.substack.com/p/why-not-dns" target="_blank" rel="noopener">Why not DNS?</a>   </p><p>为什么 [[k8s]]不直接通过 [[DNS]] 来配置 service 至 pod，而是通过 cluster-ip？避免缓存。</p><hr><p><a href="https://vladimir.varank.in/notes/2023/01/go-runtime-vs-cfs-quota/" target="_blank" rel="noopener">Go runtime vs CFS quota - Vladimir Varankin</a>  </p><p>[[Golang]] runtime 无法感知 资源限制，如果用默认的 <code>runtime.GOMAXPROCS</code> 可能会导致应用更早的触发节流，可以考虑使用 <a href="https://github.com/uber-go/automaxprocs" target="_blank" rel="noopener">GitHub - uber-go/automaxprocs: Automatically set GOMAXPROCS to match Linux container CPU quota.</a> 来自动配置。</p><hr><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://github.com/superleeyom/blog/issues/53" target="_blank" rel="noopener">2022年终总结之我的买房经历 · Issue #53 · superleeyom/blog · GitHub</a>   </p><p>[[长沙]]买房经历。</p><hr><p><a href="https://gail.com/" target="_blank" rel="noopener">gail.com FAQ</a>     </p><blockquote><p>A: In 2020 this page received a total of 5,950,012 hits, which is an average of 16,257 per day. Looking at just unique hits, we received a total of 1,295,284, for an average of 3,539 unique hits per day. Occasionally, we get Twitter-bombed and may get several tens of thousands of visitors a day. As an example, on July 21st 2020 we received 109,316 hits.</p></blockquote><hr><p><a href="https://oldj.net/article/2023/01/09/note-app-and-writing-app/" target="_blank" rel="noopener">笔记软件与写作软件的不同 - oldj’s blog</a>    </p><p>笔记和写作从需求上看是不同的场景，用 [[logseq]] 来写一篇文章感觉痛苦，有时候甚至不如一个独立的 markdown 编辑器来的爽快。</p><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《开夜车》，新加坡的鬼片，无趣。  </p><p>《下辈子我再好好过 第三季》，更新到第三季了，比较期待女主的结局。</p><p>《斑马》，傅真的长篇小说，开头比较苦，后面关于个人情感的变化比较有趣。同事推荐了傅真的其他小说，说是都不错。</p>]]></content>
    
    <summary type="html">
    
      三个字，等过年。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>2022 年读书记录</title>
    <link href="https://zdyxry.github.io/2022/12/31/2022-%E5%B9%B4%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/"/>
    <id>https://zdyxry.github.io/2022/12/31/2022-年读书记录/</id>
    <published>2022-12-31T15:00:00.000Z</published>
    <updated>2023-02-26T12:56:35.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="年终总结"><a href="#年终总结" class="headerlink" title="年终总结"></a>年终总结</h2><ul><li><a href="https://zdyxry.github.io/2016/12/31/2016%E5%B9%B4%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/">2016</a><ul><li>计划读 5 本，实际读 13 本。</li></ul></li><li><a href="https://zdyxry.github.io/2017/12/31/2017%E5%B9%B4%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/">2017</a><ul><li>计划 32 本，实际读完 23 本。</li></ul></li><li><a href="https://zdyxry.github.io/2018/12/30/2018%E5%B9%B4%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/">2018</a><ul><li>计划 30 本，实际25本。</li></ul></li><li><a href="https://zdyxry.github.io/2019/12/09/2019%E5%B9%B4%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/">2019</a><ul><li>计划 30 本，实际 43 本。</li></ul></li><li><a href="https://zdyxry.github.io/2020/12/28/2020%E5%B9%B4%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/">2020</a><ul><li>计划 30 本，实际 40 本。</li></ul></li><li><a href="https://zdyxry.github.io/2021/12/31/2021-%E5%B9%B4%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/">2021</a><ul><li>计划 50 本，实际 47 本。</li></ul></li><li>2022<ul><li>计划 50本，实际 45 本。</li></ul></li></ul><h2 id="已读"><a href="#已读" class="headerlink" title="已读"></a>已读</h2><ol><li>《候场》</li><li>《你不知道的JavaScript（上卷）》</li><li>《工作、消费主义和新穷人》</li><li>《开端》</li><li>《海边的房间》</li><li>《投资中最简单的事》</li><li>《认知觉醒》</li><li>《大话设计模式》</li><li>《啤酒事典》</li><li>《卧底经济学1》</li><li>《Python工匠》</li><li>《全职高手》</li><li>《一日三秋》</li><li>《Kubernetes网络权威指南：基础、原理与实践》</li><li>《心理罪》</li><li>《远程工作革命》</li><li>《假面的告白》</li><li>《历史深处的忧虑》</li><li>《诡秘之主》</li><li>《JavaScript权威指南（原书第7版）》</li><li>《幽默感》</li><li>《NUTANIX超融合基础架构权威指南》</li><li>《置身事内》</li><li>《分析与思考》</li><li>《决胜B端》</li><li>《搞定》</li><li>《潜规则（修订版）》</li><li>《从零开始的女性主义》</li><li>《如何阅读一本书》</li><li>《职场妈妈不下班》</li><li>《将夜（全十册）》</li><li>《应得的权利》</li><li>《大道朝天》</li><li>《暴雨下在病房里》</li><li>《Terraform：多云、混合云环境下实现基础设施即代码（第2版）》</li><li>《毫无意义的工作》</li><li>《士兵突击》</li><li>《可能性的艺术》</li><li>《九州·缥缈录》</li><li>《关于那个人的备忘录》</li><li>《人类的群星闪耀时》</li><li>《克拉拉与太阳》</li><li>《社会工程》</li><li>《100 Go Mistakes and How to Avoid Them》</li><li>《李淼罪案故事：如坠深渊》</li></ol>]]></content>
    
    <summary type="html">
    
      今年看了一些小说和社科类书籍。
    
    </summary>
    
    
      <category term="Book" scheme="https://zdyxry.github.io/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>2022 新冠感染记录</title>
    <link href="https://zdyxry.github.io/2022/12/27/2022-%E6%96%B0%E5%86%A0%E6%84%9F%E6%9F%93%E8%AE%B0%E5%BD%95/"/>
    <id>https://zdyxry.github.io/2022/12/27/2022-新冠感染记录/</id>
    <published>2022-12-27T21:01:41.000Z</published>
    <updated>2023-02-26T12:56:35.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新冠感染记录"><a href="#新冠感染记录" class="headerlink" title="新冠感染记录"></a>新冠感染记录</h2><h3 id="Day0-2022-12-18"><a href="#Day0-2022-12-18" class="headerlink" title="Day0 2022/12/18"></a>Day0 2022/12/18</h3><p>浑身酸痛，发烧，无法睡觉。</p><h3 id="Day1-2022-12-19"><a href="#Day1-2022-12-19" class="headerlink" title="Day1 2022/12/19"></a>Day1 2022/12/19</h3><p>抗原阳性，体温 38.2，嗓子痛，吃了 999 感冒灵，一整天都在昏睡。</p><h3 id="Day2-2022-12-20"><a href="#Day2-2022-12-20" class="headerlink" title="Day2 2022/12/20"></a>Day2 2022/12/20</h3><p>体温 38.4，嗓子痛，吃了 999 感冒灵，一整天都在昏睡。</p><h3 id="Day3-2022-12-21"><a href="#Day3-2022-12-21" class="headerlink" title="Day3 2022/12/21"></a>Day3 2022/12/21</h3><p>抗原阳性，体温 36.6，嗓子痛，精神没有恢复，身体感觉还不错。</p><h3 id="Day4-2022-12-22"><a href="#Day4-2022-12-22" class="headerlink" title="Day4 2022/12/22"></a>Day4 2022/12/22</h3><p>抗原阳性，体温 36.6。恢复上班，感觉效率不太高。</p><h3 id="Day5-2022-12-23"><a href="#Day5-2022-12-23" class="headerlink" title="Day5 2022/12/23"></a>Day5 2022/12/23</h3><p>抗原阳性，体温 36.6，感觉效率恢复了，开始轻微咳嗽。</p><h3 id="Day6-2022-12-24"><a href="#Day6-2022-12-24" class="headerlink" title="Day6 2022/12/24"></a>Day6 2022/12/24</h3><p>抗原阳性，体温 36.2，咳嗽，有痰。</p><h3 id="Day7-2022-12-25"><a href="#Day7-2022-12-25" class="headerlink" title="Day7 2022/12/25"></a>Day7 2022/12/25</h3><p>抗原阳性，体温 36.4，开始流鼻涕，有痰。</p><h3 id="Day8-2022-12-26"><a href="#Day8-2022-12-26" class="headerlink" title="Day8 2022/12/26"></a>Day8 2022/12/26</h3><p>抗原阳性，体温 36.5，流鼻涕，有痰。</p><h3 id="Day9-2022-12-27"><a href="#Day9-2022-12-27" class="headerlink" title="Day9 2022/12/27"></a>Day9 2022/12/27</h3><p>抗原弱阳性，体温 36.2， 流鼻涕，有痰。</p><h3 id="Day10-2022-12-28"><a href="#Day10-2022-12-28" class="headerlink" title="Day10 2022/12/28"></a>Day10 2022/12/28</h3><p>抗原阴性，体温 36.2，流鼻涕，有痰。</p>]]></content>
    
    <summary type="html">
    
      没躲过去。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>《100 Go Mistakes and How to Avoid Them》摘要</title>
    <link href="https://zdyxry.github.io/2022/12/24/%E3%80%8A100%20Go%20Mistakes%20and%20How%20to%20Avoid%20Them%E3%80%8B%E6%91%98%E8%A6%81/"/>
    <id>https://zdyxry.github.io/2022/12/24/《100 Go Mistakes and How to Avoid Them》摘要/</id>
    <published>2022-12-24T09:00:00.000Z</published>
    <updated>2023-02-26T12:56:35.193Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Go-Simple-to-learn-but-hard-to-master"><a href="#1-Go-Simple-to-learn-but-hard-to-master" class="headerlink" title="1. Go: Simple to learn but hard to master"></a>1. Go: Simple to learn but hard to master</h3><ul><li>Go is a modern programming language that enables developer productivity, which is crucial for most companies today. </li><li>Go is simple to learn but not easy to master. This is why we need to deepen our knowledge to make the most effective use of the language. </li><li>Learning via mistakes and concrete examples is a powerful way to be proficient in a language. This book will accelerate our path to proficiency by exploring 100 common mistakes. </li></ul><h3 id="2-Code-and-project-organization"><a href="#2-Code-and-project-organization" class="headerlink" title="2. Code and project organization"></a>2. Code and project organization</h3><ul><li>Avoiding shadowed variables can help prevent mistakes like referencing the wrong variable or confusing readers. </li><li>Avoiding nested levels and keeping the happy path aligned on the left makes building a mental code model easier. </li><li>When initializing variables, remember that init functions have limited error handling and make state handling and testing more complex. In most cases, initializations should be handled as specific functions. </li><li>Forcing the use of getters and setters isn’t idiomatic in Go. Being pragmatic and finding the right balance between efficiency and blindly following certain idioms should be the way to go. </li><li>Abstractions should be discovered, not created. To prevent unnecessary complexity, create an interface when you need it and not when you foresee needing it, or if you can at least prove the abstraction to be a valid one. </li><li>Keeping interfaces on the client side avoids unnecessary abstractions. </li><li>To prevent being restricted in terms of flexibility, a function shouldn’t return interfaces but concrete implementations in most cases. Conversely, a function should accept interfaces whenever possible. </li><li>Only use any if you need to accept or return any possible type, such as json. Marshal. Otherwise, any doesn’t provide meaningful information and can lead to compile-time issues by allowing a caller to call methods with any data type.</li><li>Relying on generics and type parameters can prevent writing boilerplate code to factor out elements or behaviors. However, do not use type parameters prematurely, but only when you see a concrete need for them. Otherwise, they introduce unnecessary abstractions and complexity. </li><li>Using type embedding can also help avoid boilerplate code; however, ensure that doing so doesn’t lead to visibility issues where some fields should have remained hidden. </li><li>To handle options conveniently and in an API-friendly manner, use the functional options pattern. </li><li>Following a layout such as project-layout can be a good way to start structuring Go projects, especially if you are looking for existing conventions to standardize a new project. </li><li>Naming is a critical piece of application design. Creating packages such as common, util, and shared doesn’t bring much value for the reader. Refactor such packages into meaningful and specific package names. </li><li>To avoid naming collisions between variables and packages, leading to confusion or perhaps even bugs, use unique names for each one. If this isn’t feasible, use an import alias to change the qualifier to differentiate the package name from the variable name, or think of a better name. </li><li>To help clients and maintainers understand your code’s purpose, document exported elements. </li><li>To improve code quality and consistency, use linters and formatters.</li></ul><h3 id="3-Data-types"><a href="#3-Data-types" class="headerlink" title="3. Data types"></a>3. Data types</h3><ul><li>When reading existing code, bear in mind that integer literals starting with 0 are octal numbers. Also, to improve readability, make octal integers explicit by prefixing them with 0o.</li><li>Because integer overflows and underflows are handled silently in Go, you can implement your own functions to catch them.</li><li>Making floating-point comparisons within a given delta can ensure that your code is portable.</li><li>When performing addition or subtraction, group the operations with a similar order of magnitude to favor accuracy. Also, perform multiplication and division before addition and subtraction.</li><li>Understanding the difference between slice length and capacity should be part of a Go developer’s core knowledge. The slice length is the number of available elements in the slice, whereas the slice capacity is the number of elements in the backing array.</li><li>When creating a slice, initialize it with a given length or capacity if its length is already known. This reduces the number of allocations and improves performance. The same logic goes for maps, and you need to initialize their size.</li><li>Using copy or the full slice expression is a way to prevent append from creating conflicts if two different functions use slices backed by the same array. However, only a slice copy prevents memory leaks if you want to shrink a large slice.</li><li>To copy one slice to another using the copy built-in function, remember that the number of copied elements corresponds to the minimum between the two slice’s lengths.</li><li>Working with a slice of pointers or structs with pointer fields, you can avoid memory leaks by marking as nil the elements excluded by a slicing operation.</li><li>To prevent common confusions such as when using the encoding/json or the reflect package, you need to understand the difference between nil and empty slices. Both are zero-length, zero-capacity slices, but only a nil slice doesn’t require allocation.</li><li>To check if a slice doesn’t contain any element, check its length. This check works regardless of whether the slice is nil or empty. The same goes for maps.</li><li>To design unambiguous APIs, you shouldn’t distinguish between nil and empty slices.</li></ul><h3 id="4-Control-structures"><a href="#4-Control-structures" class="headerlink" title="4. Control structures"></a>4. Control structures</h3><ul><li>The value element in a range loop is a copy. Therefore, to mutate a struct, for example, access it via its index or via a classic for loop (unless the element or the field you want to modify is a pointer).</li><li>Understanding that the expression passed to the range operator is evaluated only once before the beginning of the loop can help you avoid common mistakes such as inefficient assignment in channel or slice iteration.</li><li>Using a local variable or accessing an element using an index, you can prevent mistakes while copying pointers inside a loop.</li><li>To ensure predictable outputs when using maps, remember that a map data structure<br>– Doesn’t order the data by keys<br>– Doesn’t preserve the insertion order<br>– Doesn’t have a deterministic iteration order<br>– Doesn’t guarantee that an element added during an iteration will be produced during this iteration  </li><li>Using break or continue with a label enforces breaking a specific statement. This can be helpful with switch or select statements inside loops.</li><li>Extracting loop logic inside a function leads to executing a defer statement at the end of each iteration.</li></ul><h3 id="5-Strings"><a href="#5-Strings" class="headerlink" title="5. Strings"></a>5. Strings</h3><ul><li>Understanding that a rune corresponds to the concept of a Unicode code point and that it can be composed of multiple bytes should be part of the Go developer’s core knowledge to work accurately with strings.</li><li>Iterating on a string with the range operator iterates on the runes with the index corresponding to the starting index of the rune’s byte sequence. To access a specific rune index (such as the third rune), convert the string into a []rune.</li><li>strings.TrimRight/strings.TrimLeft removes all the trailing/leading runes contained in a given set, whereas strings.TrimSuffix/strings.TrimPrefix returns a string without a provided suffix/prefix.</li><li>Concatenating a list of strings should be done with strings.Builder to prevent allocating a new string during each iteration.</li><li>Remembering that the bytes package offers the same operations as the strings package can help avoid extra byte/string conversions.</li><li>Using copies instead of substrings can prevent memory leaks, as the string returned by a substring operation will be backed by the same byte array.</li></ul><h3 id="6-Functions-and-methods"><a href="#6-Functions-and-methods" class="headerlink" title="6. Functions and methods"></a>6. Functions and methods</h3><ul><li>The decision whether to use a value or a pointer receiver should be made based on factors such as the type, whether it has to be mutated, whether it contains a field that can’t be copied, and how large the object is. When in doubt, use a pointer receiver.</li><li>Using named result parameters can be an efficient way to improve the readability of a function/method, especially if multiple result parameters have the same type. In some cases, this approach can also be convenient because named result parameters are initialized to their zero value. But be cautious about potential side effects.</li><li>When returning an interface, be cautious about returning not a nil pointer but an explicit nil value. Otherwise, unintended consequences may result because the caller will receive a non-nil value.</li><li>Designing functions to receive io.Reader types instead of filenames improves the reusability of a function and makes testing easier.</li><li>Passing a pointer to a defer function and wrapping a call inside a closure are two possible solutions to overcome the immediate evaluation of arguments and receivers.</li></ul><h3 id="7-Error-management"><a href="#7-Error-management" class="headerlink" title="7. Error management"></a>7. Error management</h3><ul><li>Using panic is an option to deal with errors in Go. However, it should only be used sparingly in unrecoverable conditions: for example, to signal a programmer error or when you fail to load a mandatory dependency.</li><li>Wrapping an error allows you to mark an error and/or provide additional context. However, error wrapping creates potential coupling as it makes the source error available for the caller. If you want to prevent that, don’t use error wrapping.</li><li>If you use Go 1.13 error wrapping with the %w directive and fmt.Errorf, comparing an error against a type or a value has to be done using errors.As or errors.Is, respectively. Otherwise, if the returned error you want to check is wrapped, it will fail the checks.</li><li>To convey an expected error, use error sentinels (error values). An unexpected error should be a specific error type.</li><li>In most situations, an error should be handled only once. Logging an error is handling an error. Therefore, you have to choose between logging or returning an error. In many cases, error wrapping is the solution as it allows you to provide additional context to an error and return the source error.</li><li>Ignoring an error, whether during a function call or in a defer function, should be done explicitly using the blank identifier. Otherwise, future readers may be confused about whether it was intentional or a miss.</li><li>In many cases, you shouldn’t ignore an error returned by a defer function. Either handle it directly or propagate it to the caller, depending on the context. If you want to ignore it, use the blank identifier.</li></ul><h3 id="8-Concurrency-Foundations"><a href="#8-Concurrency-Foundations" class="headerlink" title="8. Concurrency: Foundations"></a>8. Concurrency: Foundations</h3><ul><li>Understanding the fundamental differences between concurrency and parallelism is a cornerstone of the Go developer’s knowledge. Concurrency is about structure, whereas parallelism is about execution.</li><li>To be a proficient developer, you must acknowledge that concurrency isn’t always faster. Solutions involving parallelization of minimal workloads may not necessarily be faster than a sequential implementation. Benchmarking sequential versus concurrent solutions should be the way to validate assumptions.</li><li>Being aware of goroutine interactions can also be helpful when deciding between channels and mutexes. In general, parallel goroutines require synchronization and hence mutexes. Conversely, concurrent goroutines generally require coordination and orchestration and hence channels.</li><li>Being proficient in concurrency also means understanding that data races and race conditions are different concepts. Data races occur when multiple goroutines simultaneously access the same memory location and at least one of them is writing. Meanwhile, being data-race-free doesn’t necessarily mean deterministic execution. When a behavior depends on the sequence or the timing of events that can’t be controlled, this is a race condition.</li><li>Understanding the Go memory model and the underlying guarantees in terms of ordering and synchronization is essential to prevent possible data races and/ or race conditions.</li><li>When creating a certain number of goroutines, consider the workload type. Creating CPU-bound goroutines means bounding this number close to the GOMAXPROCS variable (based by default on the number of CPU cores on the host). Creating I/O-bound goroutines depends on other factors, such as the external system.</li><li>Go contexts are also one of the cornerstones of concurrency in Go. A context allows you to carry a deadline, a cancellation signal, and/or a list of keys-values.</li></ul><h3 id="9-Concurrency-Practice"><a href="#9-Concurrency-Practice" class="headerlink" title="9. Concurrency: Practice"></a>9. Concurrency: Practice</h3><ul><li>Understanding the conditions when a context can be canceled should matter when propagating it: for example, an HTTP handler canceling the context when the response has been sent.</li><li>Avoiding leaks means being mindful that whenever a goroutine is started, you should have a plan to stop it eventually.</li><li>To avoid bugs with goroutines and loop variables, create local variables or call functions instead of closures.</li><li>Understanding that select with multiple channels chooses the case randomly if multiple options are possible prevents making wrong assumptions that can lead to subtle concurrency bugs.</li><li>Send notifications using a chan struct{} type.</li><li>Using nil channels should be part of your concurrency toolset because it allows you to remove cases from select statements, for example.</li><li>Carefully decide on the right channel type to use, given a problem. Only unbuffered channels provide strong synchronization guarantees.</li><li>You should have a good reason to specify a channel size other than one for buffered channels.</li><li>Being aware that string formatting may lead to calling existing functions means watching out for possible deadlocks and other data races.</li><li>Calling append isn’t always data-race-free; hence, it shouldn’t be used concurrently on a shared slice.</li><li>Remembering that slices and maps are pointers can prevent common data races.</li><li>To accurately use sync.WaitGroup, call the Add method before spinning up goroutines.</li><li>You can send repeated notifications to multiple goroutines with sync.Cond.</li><li>You can synchronize a group of goroutines and handle errors and contexts with the errgroup package.</li><li>sync types shouldn’t be copied.</li></ul><h3 id="10-The-standard-library"><a href="#10-The-standard-library" class="headerlink" title="10. The standard library"></a>10. The standard library</h3><ul><li>Remain cautious with functions accepting a time.Duration. Even though passing an integer is allowed, strive to use the time API to prevent any possible confusion.</li><li>Avoiding calls to time.After in repeated functions (such as loops or HTTP handlers) can avoid peak memory consumption. The resources created by time.After are released only when the timer expires.</li><li>Be careful about using embedded fields in Go structs. Doing so may lead to sneaky bugs like an embedded time.Time field implementing the json .Marshaler interface, hence overriding the default marshaling behavior.</li><li>When comparing two time.Time structs, recall that time.Time contains both a wall clock and a monotonic clock, and the comparison using the == operator is done on both clocks.</li><li>To avoid wrong assumptions when you provide a map while unmarshaling JSON data, remember that numerics are converted to float64 by default.</li><li>Call the Ping or PingContext method if you need to test your configuration and make sure a database is reachable.</li><li>Configure the database connection parameters for production-grade applications.</li><li>Using SQL prepared statements makes queries more efficient and more secure.</li><li>Deal with nullable columns in tables using pointers or sql.NullXXX types.</li><li>Call the Err method of *sql.Rows after row iterations to ensure that you haven’t missed an error while preparing the next row.</li><li>Eventually close all structs implementing io.Closer to avoid possible leaks.</li><li>To avoid unexpected behaviors in HTTP handler implementations, make sure you don’t miss the return statement if you want a handler to stop after http.Error.</li><li>For production-grade applications, don’t use the default HTTP client and server implementations. These implementations are missing timeouts and behaviors that should be mandatory in production.</li></ul><h3 id="11-Testing"><a href="#11-Testing" class="headerlink" title="11. Testing"></a>11. Testing</h3><ul><li>Categorizing tests using build flags, environment variables, or short mode makes the testing process more efficient. You can create test categories using build flags or environment variables (for example, unit versus integration tests) and differentiate short- from long-running tests to decide which kinds of tests to execute.</li><li>Enabling the -race flag is highly recommended when writing concurrent applications. Doing so allows you to catch potential data races that can lead to software bugs.</li><li>Using the -parallel flag is an efficient way to speed up tests, especially longrunning ones.</li><li>Use the -shuffle flag to help ensure that a test suite doesn’t rely on wrong assumptions that could hide bugs.</li><li>Table-driven tests are an efficient way to group a set of similar tests to prevent code duplication and make future updates easier to handle.</li><li>Avoid sleeps using synchronization to make a test less flaky and more robust. If synchronization isn’t possible, consider a retry approach.</li><li>Understanding how to deal with functions using the time API is another way to make a test less flaky. You can use standard techniques such as handling the time as part of a hidden dependency or asking clients to provide it.</li><li>The httptest package is helpful for dealing with HTTP applications. It provides a set of utilities to test both clients and servers.</li><li>The iotest package helps write io.Reader and test that an application is tolerant to errors.</li><li>Regarding benchmarks: – Use time methods to preserve the accuracy of a benchmark. – Increasing benchtime or using tools such as benchstat can be helpful when dealing with micro-benchmarks. – Be careful with the results of a micro-benchmark if the system that ends up running the application is different from the one running the micro-benchmark. – Make sure the function under test leads to a side effect, to prevent compiler optimizations from fooling you about the benchmark results. – To prevent the observer effect, force a benchmark to re-create the data used by a CPU-bound function.</li><li>Use code coverage with the -coverprofile flag to quickly see which part of the code needs more attention.</li><li>Place unit tests in a different package to enforce writing tests that focus on an exposed behavior, not internals.</li><li>Handling errors using the *testing.T variable instead of the classic if err != nil makes code shorter and easier to read.</li><li>You can use setup and teardown functions to configure a complex environment, such as in the case of integration tests.</li></ul><h3 id="12-Optimizations"><a href="#12-Optimizations" class="headerlink" title="12. Optimizations"></a>12. Optimizations</h3><ul><li>Understanding how to use CPU caches is important for optimizing CPU-bound applications because the L1 cache is about 50 to 100 times faster than the main memory.</li><li>Being conscious of the cache line concept is critical to understanding how to organize data in data-intensive applications. A CPU doesn’t fetch memory word by word; instead, it usually copies a memory block to a 64-byte cache line. To get the most out of each individual cache line, enforce spatial locality.</li><li>Making code predictable for the CPU can also be an efficient way to optimize certain functions. For example, a unit or constant stride is predictable for the CPU, but a non-unit stride (for example, a linked list) isn’t predictable.</li><li>To avoid a critical stride, hence utilizing only a tiny portion of the cache, be aware that caches are partitioned.</li><li>Knowing that lower levels of CPU caches aren’t shared across all the cores helps avoid performance-degrading patterns such as false sharing while writing concurrency code. Sharing memory is an illusion.</li><li>Use instruction-level parallelism (ILP) to optimize specific parts of your code to allow a CPU to execute as many parallel instructions as possible. Identifying data hazards is one of the main steps.</li><li>You can avoid common mistakes by remembering that in Go, basic types are aligned with their own size. For example, keep in mind that reorganizing the fields of a struct by size in descending order can lead to more compact structs (less memory allocation and potentially a better spatial locality).</li><li>Understanding the fundamental differences between heap and stack should also be part of your core knowledge when optimizing a Go application. Stack allocations are almost free, whereas heap allocations are slower and rely on the GC to clean the memory.</li><li>Reducing allocations is also an essential aspect of optimizing a Go application. This can be done in different ways, such as designing the API carefully to prevent sharing up, understanding the common Go compiler optimizations, and using sync.Pool.</li><li>Use the fast-path inlining technique to efficiently reduce the amortized time to call a function.</li><li>Rely on profiling and the execution tracer to understand how an application performs and the parts to optimize.</li><li>Understanding how to tune the GC can lead to multiple benefits such as handling sudden load increases more efficiently.</li><li>To help avoid CPU throttling when deployed in Docker and Kubernetes, keep in mind that Go isn’t CFS-aware.</li></ul>]]></content>
    
    <summary type="html">
    
      断断续续看了好久的书。
    
    </summary>
    
    
      <category term="Book" scheme="https://zdyxry.github.io/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-12-11</title>
    <link href="https://zdyxry.github.io/2022/12/11/Weekly-Issue-2022-12-11/"/>
    <id>https://zdyxry.github.io/2022/12/11/Weekly-Issue-2022-12-11/</id>
    <published>2022-12-11T19:00:00.000Z</published>
    <updated>2023-02-26T12:56:35.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://www.systutorials.com/docs/linux/man/8-dracut-shutdown/" target="_blank" rel="noopener">dracut-shutdown: unpack the initramfs to /run/initramfs - Linux Man Pages (8)</a><br>[[systemd]] shutdown 与[[dracut-shutdown]] 的调用关系。</p><hr><p><a href="https://nova.moe/debug-eks-ec2-connection-problem/" target="_blank" rel="noopener">我 EKS 内的 Pod 怎么连不上某个 EC2 了？奇怪的 Docker Compose 桥接网络 Debug 记</a><br>想到了公司最近内部新添加了网段是 172.16，也跟 [[docker]] 是重叠的。</p><hr><p><a href="https://asia.nikkei.com/Business/Tech/Semiconductors/TSMC-founder-Morris-Chang-says-globalization-almost-dead" target="_blank" rel="noopener">TSMC founder Morris Chang says globalization ‘almost dead’ -Nikkei Asia</a>    </p><blockquote><p>globalization and free trade are almost dead</p></blockquote><hr><p><a href="https://www.storagenewsletter.com/2022/12/07/from-20mb-to-20tb-40-years-of-hdd-technology/" target="_blank" rel="noopener">From 20MB to 20TB: 40 Years of HDD Technology - StorageNewsletter</a><br>[[HDD]] 40 年时间容量从 20MB 到 20TB。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://www.douban.com/group/topic/279710957/?_i=0384017eEorQj4" target="_blank" rel="noopener">ChatGPT初体验：感觉到AI的未来真的已经来了</a><br>[[ChatGPT]] 的一些体验感受。</p><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《100 Go Mistakes and How to Avoid Them》 ，本周没读。</p><p>《社会工程 : 安全体系中的人性漏洞》，挺有趣的，与技术无关，与人有关。</p><p>《毛骗》- 第一季、第二季、终结篇， 朋友很多年前推荐的，考虑到时代背景还是不错的，看得出剧组很缺钱，后期一直反转容易疲倦。</p>]]></content>
    
    <summary type="html">
    
      赶上了防疫政策末班车。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-12-04</title>
    <link href="https://zdyxry.github.io/2022/12/04/Weekly-Issue-2022-12-04/"/>
    <id>https://zdyxry.github.io/2022/12/04/Weekly-Issue-2022-12-04/</id>
    <published>2022-12-04T19:00:00.000Z</published>
    <updated>2023-02-26T12:56:35.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://moelove.info/2022/11/28/%E8%81%8A%E8%81%8A-Docker-%E7%9A%84%E5%AD%98%E5%82%A8%E9%A9%B1%E5%8A%A8-Overlay2/" target="_blank" rel="noopener">聊聊 Docker 的存储驱动 Overlay2 | MoeLove</a><br>[[overlayfs]] 介绍。</p><hr><p><a href="https://news.ycombinator.com/item?id=33743567" target="_blank" rel="noopener">Ask HN: Azure has run out of compute – anyone else affected? | Hacker News</a><br>[[azure]] 德国无法扩容更多容量，看评论(各家)都已经遇到很多次了。</p><hr><p><a href="https://mp.weixin.qq.com/s/EqKU052H5LxRjE68jeiaDg" target="_blank" rel="noopener">Linux RT 进程引发内核频繁卡死的优化方案</a>    </p><blockquote><p>经过查看内核 RT 实现，发现 RT 进程是有相关的占用时间设置的 /proc/sys/kernel/sched_rt_runtime_us ,sched_rt_runtime_us 的默认值为 950000，代表 RT 进程可以占用 95% 的 CPU 时间片，剩余 5% 用于响应其他请求，而这里比较诡异的是为什么 sched_rt_runtime_us 明明设置了 950000 这个值，surfaceflinger 这个程序为什么还能将 CPU 使用到 100% 呢？</p></blockquote><blockquote><p>经过代码分析和社区 issues 查找，<strong>发现引发该问题的罪魁祸首是 RT_RUNTIME_SHARE 这个特性，该特性可以使 RT 任务长期占用 100% CPU, 从而使诸如 kworkers 等相关的内核任务无法获取到 CPU 资源，造成内核卡死。</strong>而客户使用的内核版本恰好是 5.4.53 版本，该版本 RT_RUNTIME_SHARE 默认被设置为 true，5.4 的最新内核版本已经默认关闭该特性。</p></blockquote><hr><p><a href="https://github.com/docker/buildx/issues/379" target="_blank" rel="noopener">docker buildx run yum install very slow, while docker build is fine · Issue #379 · docker/buildx · GitHub</a><br>[[docker]] build 因为 <code>ulimit</code> 配置，执行 [[yum]] 很慢。</p><hr><p><a href="https://vim0.com/post/neovim/" target="_blank" rel="noopener">使用 neovim 作为 PDE(个性化开发环境) - 咸糖 - 自律者自由</a>   </p><p>[[neovim]] 配置。</p><hr><p><a href="https://xuanwo.io/reports/2022-47/" target="_blank" rel="noopener">2022-47: Databend 文档的 i18n 实践</a>   </p><p>使用 [[github]] [[Vercel]][[Crowdin]] 工具链来进行文档翻译。</p><hr><p><a href="https://catcoding.me/p/geohot/" target="_blank" rel="noopener">Twitter 实习生 George Hotz |程序员的喵</a>   </p><p>[[George Hotz]] 的直播很有趣。</p><hr><p><a href="https://aws.amazon.com/cn/blogs/opensource/introducing-finch-an-open-source-client-for-container-development/" target="_blank" rel="noopener">Introducing Finch: An Open Source Client for Container Development | AWS Open Source Blog</a>    </p><p>[[Finch]] 通过组装 [[lima]][[containerd]] 和 [[nerdctl]] 来简化用户使用成本。</p><hr><p><a href="https://kubernetes.io/blog/2022/12/01/runtime-observability-opentelemetry/" target="_blank" rel="noopener">Boosting Kubernetes container runtime observability with OpenTelemetry | Kubernetes</a>   </p><p>使用 [[OpenTelemetry]] 来观测 [[kubernetes]]内部状态。<br>部分 [[OCI]] 没有计划支持 [[OpenTelemetry]]，用 [[Rust]] 编写的[[youki]] 有这个计划。</p><hr><p><a href="https://nigelpoulton.com/what-is-runwasi/" target="_blank" rel="noopener">What is runwasi - Nigel Poulton</a>   </p><p>通过 [[runwasi]] 实现 [[containerd]] shim，来让 [[kubernetes]] 支持运行 [[wasm]]</p><hr><p><a href="https://plantegg.github.io/2020/11/30/%E4%B8%80%E5%8F%B0%E6%9C%BA%E5%99%A8%E4%B8%8A%E6%9C%80%E5%A4%9A%E8%83%BD%E5%88%9B%E5%BB%BA%E5%A4%9A%E5%B0%91%E4%B8%AATCP%E8%BF%9E%E6%8E%A5/" target="_blank" rel="noopener">到底一台服务器上最多能创建多少个TCP连接 | plantegg</a>     </p><p>服务器最多可以创建多少个 [[TCP]]连接： 在内存、文件句柄足够的话一台服务器上可以创建的TCP连接数量是没有限制的。</p><hr><p><a href="https://blog.meain.io/2022/terminal-drag-and-drop/" target="_blank" rel="noopener">Drag and drop from terminal</a>   </p><p>从 [[terminal]]直接拖拽文件</p><hr><p><a href="https://icloudnative.io/posts/tailscale-acls/" target="_blank" rel="noopener">Tailscale/Headscale ACL 使用教程 – 云原生实验室 - Kubernetes|Docker|Istio|Envoy|Hugo|Golang|云原生</a>   </p><p>[[TailScale]] [[ACL]] 配置方式。之前看了官方文档，但是自己的需求比较少，暂时还不需要。</p><hr><p><a href="https://www.engraved.blog/building-a-virtual-machine-inside/" target="_blank" rel="noopener">Building A Virtual Machine inside ChatGPT</a>    </p><p>[[ChatGPT]] 模拟一台虚拟机，实际上真的是处于模拟状态。</p><hr><p><a href="https://kubernetes.io/blog/2022/12/02/seccomp-notifier/" target="_blank" rel="noopener">Finding suspicious syscalls with the seccomp notifier | Kubernetes</a>   </p><p>通过 [[Seccomp]] Notifier 来追踪 [[Container]] 异常系统调用。</p><hr><p><a href="https://www.kawabangga.com/posts/4860" target="_blank" rel="noopener">PromCon 2022 演讲：Alerting with Confidence | 卡瓦邦噶！</a>   </p><blockquote><p>今年在 PromCon 上做了一个演讲，介绍了从 Alert 的配置，到触发，最后 Review 的一些经验。</p></blockquote><hr><p><a href="https://iximiuz.com/en/posts/docker-publish-port-of-running-container/" target="_blank" rel="noopener">How To Publish a Port of a Running Container</a>    </p><p>通过启动新的 [[Container]]与目标容器共享[[namespace]] 的方式来实现端口转发。</p><hr><p><a href="https://colobu.com/2022/11/26/some-time-and-cron-libs/" target="_blank" rel="noopener">一些关于时间和定时任务的库</a>   </p><p>[[Golang]] 第三方库，时间、[[cronjob]] 相关。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://xiaowenz.com/read/read-detective/" target="_blank" rel="noopener">https://xiaowenz.com/read/read-detective/</a><br>[[推理]] 小说推荐。</p><hr><p><a href="http://paulgraham.com/read.html" target="_blank" rel="noopener">The Need to Read</a></p><blockquote><p>You can’t think well without writing well, and you can’t write well without reading well. And I mean that last “well” in both senses. You have to be good at reading, and read good things.</p></blockquote><hr><p><a href="https://www.allthingsdistributed.com/2022/12/tech-predictions-for-2023-and-beyond.html" target="_blank" rel="noopener">Tech predictions for 2023 and beyond | All Things Distributed</a><br>2023 技术预测：云技术、模拟、新能源、供应链、定制芯片。</p><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《100 Go Mistakes and How to Avoid Them》 ，本周读了关于错误处理部分的第 48 - 54 个。</p><p>《人类的群星闪耀时》，不能当做历史来看。别名：西方列强闪耀时。</p><p>《克拉拉与太阳》，引用译者的话：</p><blockquote><p>克拉拉的一切品质与情感都是无法用人类的纬度去衡量的，因为，正是由于自私的欲望与升华的渴望并存，人类的心中才会充满了矛盾、彷徨与痛苦；没有了自私那下坠的重力，一切崇高、向上的人性也就虚无缥缈得失去了分量。自私是人类沉重的负担，但也许在并不遥远的未来，也会是人之所以为人的一个最重要的锚点吧。 </p></blockquote><p>《边缘世界》，弃了。</p>]]></content>
    
    <summary type="html">
    
      克拉拉的一切品质与情感都是无法用人类的纬度去衡量的，因为，正是由于自私的欲望与升华的渴望并存，人类的心中才会充满了矛盾、彷徨与痛苦；没有了自私那下坠的重力，一切崇高、向上的人性也就虚无缥缈得失去了分量。自私是人类沉重的负担，但也许在并不遥远的未来，也会是人之所以为人的一个最重要的锚点吧。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-11-27</title>
    <link href="https://zdyxry.github.io/2022/11/27/Weekly-Issue-2022-11-27/"/>
    <id>https://zdyxry.github.io/2022/11/27/Weekly-Issue-2022-11-27/</id>
    <published>2022-11-27T19:00:00.000Z</published>
    <updated>2023-02-26T12:56:35.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://jiajunhuang.com/articles/2022_11_20-router.md.html" target="_blank" rel="noopener">搭建旁路由 - Jiajun的编程随想</a><br>使用[[Debian]] 配合 [[Clash]] 搭建旁路由。</p><hr><p><a href="https://matt-rickard.com/will-twitter-fail" target="_blank" rel="noopener">Will Twitter Fail?</a><br>[[Twitter]] 会失败么？会因为什么原因失败？感觉在系统不上线新功能的前提下，不会发生宕机。</p><hr><p><a href="https://thenewstack.io/what-a-broken-wheel-taught-google-site-reliability-engineers/" target="_blank" rel="noopener">What a Broken Wheel Taught Google Site Reliability Engineers - The New Stack</a><br>一些看似不相关的事情产生的影响，有趣。</p><hr><p><a href="https://quobix.com/articles/marvin/" target="_blank" rel="noopener">quobix: M.A.R.V.I.N</a><br>[[vmware]] [[VXRail]] 的故事，从零到一。</p><hr><p><a href="https://developsense.com/blog/2022/11/risk-in-the-wild" target="_blank" rel="noopener">Risk in the Wild – DevelopSense</a>     </p><blockquote><p>Most testing is motivated by the intention to go from speculation about suspected risk to evidence of actual risk.</p></blockquote><hr><p><a href="https://www.telecomtv.com/content/digital-platforms-services/rakuten-dumps-red-hat-turns-to-true-open-source-linux-os-45803/" target="_blank" rel="noopener">Rakuten dumps Red Hat, turns to “true” open-source Linux OS, Digital Platforms &amp; Services | TelecomTV</a><br>乐天从RHEL 迁移至 Rocky</p><hr><p><a href="https://www.manjusaka.blog/posts/2022/11/22/why-i-love-the-open-source-community/" target="_blank" rel="noopener">我所热爱的开源社区 - Manjusaka</a><br>关于参数开源项目的一些建议。</p><hr><p><a href="https://xigou.github.io/2022/11/19/2022-11-19-convert-cmd-web-wooey/" target="_blank" rel="noopener">Open Source Project Review: Convert command line to Web App with Wooey | Land of Free</a><br>使用Wooey 将 python 脚本转换为页面</p><hr><p><a href="https://matt-rickard.com/why-do-configuration-changes-cause-outages" target="_blank" rel="noopener">Why Do Configuration Changes Cause Outages?</a>    </p><ul><li><strong>Configuration breaks production/development parity</strong></li><li><strong>Some configuration isn’t testable</strong></li><li><strong>Every Sufficiently Advanced Configuration Language is Wrong</strong></li></ul><hr><p><a href="https://plantegg.github.io/2020/11/23/%E4%B8%80%E6%AC%A1%E6%98%A5%E8%8A%82%E5%A4%A7%E4%BF%83%E6%80%A7%E8%83%BD%E5%8E%8B%E6%B5%8B%E4%B8%8D%E8%BE%BE%E6%A0%87%E7%9A%84%E7%93%B6%E9%A2%88%E6%8E%A8%E6%BC%94/" target="_blank" rel="noopener">一次春节大促性能压测不达标的瓶颈推演 | plantegg</a><br>WireShark 的具体应用。</p><hr><p><a href="https://medium.com/@kris-nova/why-fix-kubernetes-and-systemd-782840e50104" target="_blank" rel="noopener">Why fix Kubernetes and Systemd?. Learn why and how the Aurae Runtime… | by Kris Nóva | Medium</a><br>在 kubernetes场景下替代 systemd的方案。看上去很难不成为下一个 systemd。</p><hr><p><a href="https://alexanderell.is/posts/cnames/" target="_blank" rel="noopener">What happens if you point two CNAMEs at each other? Not much, really · Caffeinspiration</a><br>CNAME 循环指定，最终可能会得到一个 <code>SERVFAIL</code> 错误码或者指向多个结果。</p><blockquote><p><code>BIND fixes at least one of these problems. It places an upper limit  on the number of recursive queries it will make, to answer a  question. It chases a maximum of 20 referral links and 8 canonical  name translations.</code></p></blockquote><hr><p><a href="https://cn.dapr.io/post/202211-dapr-10x/" target="_blank" rel="noopener">[译]Dapr 是一个“10倍好”平台 | Dapr 中国社区</a><br>介绍Dapr 的优势和劣势。<br>优势：多语言支持，多环境，非侵入式。<br>劣势：逻辑上的复杂性，网络延迟，资源消耗，调试和测试成本。</p><hr><p><a href="https://diy.stackexchange.com/questions/252038/is-white-wire-with-grey-stripes-positive-or-negative-wire/252050#252050" target="_blank" rel="noopener">electrical - Is white wire with grey stripes positive or negative wire? - Home Improvement Stack Exchange</a><br>《我们爱科学》。用土豆来区分正负极。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://xiaowenz.com/read/read-2022/" target="_blank" rel="noopener">书单 2022 - Xiaowen.Z Deployed</a><br>作者 2022年已经读了 80本书了。</p><hr><p><a href="https://matt-rickard.com/showing-up-everyday" target="_blank" rel="noopener">Showing Up Every Day</a><br>复利，实践，养成习惯。</p><hr><p><a href="https://blog.einverne.info/post/2022/11/work-consumerism-and-the-new-poor.html" target="_blank" rel="noopener">《工作、消费主义和新穷人》读书笔记 | Verne in GitHub</a><br>《工作、消费主义和新穷人》 读书笔记。</p><hr><p><a href="https://justinyan.me/post/5346" target="_blank" rel="noopener">被集中隔离需要准备什么？ | 枫言枫语</a><br>集中隔离需要准备的东西。除了物理上需要准备的，我觉得更多是心理上的准备。</p><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《100 Go Mistakes and How to Avoid Them》 ，本周读了第 27 - 47 个。</p><p>《可能性的艺术》，读完。</p><p>《关于那个人的备忘录》，读完，开放式结局。我们应该相信自己的记忆，还是笔记，肯定是笔记更靠谱一些。</p><p>《我的解放日志》，豆瓣热门评论：“我累了，我不知道是从哪里开始出了问题，但我就是累了，所有的人际关系都像是在工作，清醒的每个瞬间，都在劳动，什么事都没有发生，没有人喜欢我“。</p>]]></content>
    
    <summary type="html">
    
      One -&gt; Two is the hardest; Start with two if you can.
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-11-20</title>
    <link href="https://zdyxry.github.io/2022/11/20/Weekly-Issue-2022-11-20/"/>
    <id>https://zdyxry.github.io/2022/11/20/Weekly-Issue-2022-11-20/</id>
    <published>2022-11-20T23:50:00.000Z</published>
    <updated>2023-02-26T12:56:35.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://moelove.info/2022/11/13/K8S-%E7%94%9F%E6%80%81%E5%91%A8%E6%8A%A5-%E5%9F%BA%E7%A1%80%E5%BA%93%E6%94%BE%E5%BC%83%E7%BB%B4%E6%8A%A4%E4%B8%8A%E6%B8%B8%E7%A4%BE%E5%8C%BA%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9/" target="_blank" rel="noopener">K8S 生态周报| 基础库放弃维护，上游社区如何选择？ | MoeLove</a></p><p><code>GoGo Protobuf</code> 停止维护(很久)了，很多 [[protobuf]] 的示例项目和生产项目都是使用这个。</p><hr><p><a href="https://blog.cloudflare.com/welcome-to-the-supercloud-and-developer-week-2022/" target="_blank" rel="noopener">Welcome to the Supercloud (and Developer Week 2022)</a>  </p><blockquote><p>Efficient compute and storage, a global network that’s everywhere everyone is, bound together by software that turns the globe into a single cloud. The Supercloud.</p></blockquote><hr><p><a href="https://lucumr.pocoo.org/2022/11/14/scaling-mastodon/" target="_blank" rel="noopener">Scaling Mastodon is Impossible | Armin Ronacher’s Thoughts and Writings</a><br>从中心化/去中心化，[[Mastodon]] 协议和托管者的法律风险角度，讨论 [[Mastodon]] 替代 [[Twitter]] 的可能性。</p><hr><p><a href="https://engineering.fb.com/2022/11/15/open-source/sapling-source-control-scalable/" target="_blank" rel="noopener">Sapling: Source control that’s user-friendly and scalable</a><br>[[Sapling]] 一个与 [[git]] 兼容的 client。看上去配合[[reviewstack]] 可以解决 [[github]] review 困难的问题。</p><hr><p><a href="https://nova.moe/halo-mirror-serverless/" target="_blank" rel="noopener">Halo 官方镜像源在 Serverless(Cloudflare Workers + R2) 上的实践</a><br>[[CloudFlare]] [[Workers]] 配合 [[R2]]的具体应用。(感觉可以参考下折腾折腾)。</p><hr><p><a href="https://tailscale.com/blog/introducing-tailscale-funnel/" target="_blank" rel="noopener">Introducing Tailscale Funnel · Tailscale</a><br>[[TailScale]] 类似于 [[CloudFlare]] [[Tunnel]] 的产品。后者是真的方便好用，如果 [[TailScale]] 支持自定义域名的话可以考虑都使用 [[TailScale]]。</p><hr><p><a href="https://www.kawabangga.com/posts/4847" target="_blank" rel="noopener">没来的请举手 | 卡瓦邦噶！</a><br>当监控数据源没有数据返回时将默认值置为 0.</p><hr><p><a href="https://www.warp.dev/blog/why-is-the-terminal-input-so-weird" target="_blank" rel="noopener">Why is the terminal input so weird? | Warp</a><br>[[warp]] 介绍如何在[[terminal]] 中实现类似 IDE 的效果。<br>普通终端可以使用<code>Ctrl + x + e</code> 来使用 [[vim]] 输入命令，也足够使用了。</p><hr><p><a href="https://twitter.com/elonmusk/status/1592176202873085952" target="_blank" rel="noopener">I was told ~1200 RPCs independently by several engineers at Twitter</a><br>[[马斯克]]提到 [[Twitter]] 时间线会发起 1200 个 RPC，引发了关于[[微服务]]的讨论：</p><p><a href="https://twitter.com/jasoncwarner/status/1592227285024636928?s=12&amp;t=4ARnHN0FjEdS2pfUMSBEAA" target="_blank" rel="noopener">https://twitter.com/jasoncwarner/status/1592227285024636928?s=12&amp;t=4ARnHN0FjEdS2pfUMSBEAA</a></p><p><a href="https://twitter.com/xuwenhao/status/1593469165892820992" target="_blank" rel="noopener">https://twitter.com/xuwenhao/status/1593469165892820992</a><br>对于微服务带来的维护复杂度表示深深的赞同。</p><hr><p><a href="https://hmarr.com/blog/go-allocation-hunting/" target="_blank" rel="noopener">Making a Go program 42% faster with a one character change • Harry Marr</a><br>[[Golang]] 逃逸分析。</p><hr><p><a href="https://eng.lyft.com/vulnerability-management-at-lyft-enforcing-the-cascade-part-1-234d1561b994" target="_blank" rel="noopener">Vulnerability Management at Lyft: Enforcing the Cascade - Part 1 | by Alex Chantavy | Nov, 2022 | Lyft Engineering</a><br>[[Lyft]] 如何进行自动化安全漏洞管理。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://blog.danslimmon.com/2016/08/26/the-most-important-thing-to-understand-about-queues/" target="_blank" rel="noopener">The most important thing to understand about queues – Dan Slimmon</a></p><blockquote><p><strong>As you approach maximum throughput, average queue size – and therefore average wait time – approaches infinity.</strong></p></blockquote><p>套用工作任务来说，如果始终 100% 负荷，每个任务的平均等待时间是增多的，但是好像也不会有人从一个全局来观察每个人物的等待时间？可能 PM 会去关注？</p><hr><p><a href="https://blog.danslimmon.com/2015/07/09/when-efficiency-hurts-more-than-it-helps/" target="_blank" rel="noopener">When efficiency hurts more than it helps – Dan Slimmon</a><br>当长时间处于 100% 负荷，任务大量积压时，会带给人很多负面感受：</p><ul><li>队列变长了，这本身就令人沮丧。当人们觉得他们的工作没有带来改变时，他们的效率就会降低</li><li>任务到达和完成之间的平均等待时间 <a href="https://en.wikipedia.org/wiki/Little&#39;s_law" target="_blank" rel="noopener">随队列长度线性上升</a>。等待时间过长，你的价值就会流失：你将时间和精力投入到可能不再相关的想法上</li><li>由于您已经以满负荷或接近满负荷运行，您甚至无法部署额外的容量来减少这些队列：基本上不可能摆脱它们</li><li>队列中等待时间的增加导致反馈时间变长，从而抵消了敏捷技术的优势</li></ul><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《100 Go Mistakes and How to Avoid Them》 ，本周读了第 20 - 26 个。</p><p>《可能性的艺术》，读了一半。</p><p>《伸冤人》，打打打杀杀杀，主角战力在看过的动作片中强的过分，上升了一个维度。</p>]]></content>
    
    <summary type="html">
    
      One -&gt; Two is the hardest; Start with two if you can.
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-11-13</title>
    <link href="https://zdyxry.github.io/2022/11/13/Weekly-Issue-2022-11-13/"/>
    <id>https://zdyxry.github.io/2022/11/13/Weekly-Issue-2022-11-13/</id>
    <published>2022-11-13T23:50:00.000Z</published>
    <updated>2023-02-26T12:56:35.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://blog.rxliuli.com/p/ef26175b98af43ccaf918296a739ded5/" target="_blank" rel="noopener">2022 年里做前端是怎样一种体验 - rxliuli blog</a><br>感觉 2016年和2022年之间发生了什么了不得的事情，各种名词给变了一圈了。</p><hr><p><a href="https://testdriven.io/blog/python-environments/" target="_blank" rel="noopener">Modern Python Environments - dependency and workspace management</a><br>对 pyenv ,pip + venv, poetry, pipenv 进行了比较。</p><hr><p><a href="https://dev.to/bowmanjd/python-tools-for-managing-virtual-environments-3bko" target="_blank" rel="noopener">Python Tools for Managing Virtual Environments</a><br>除了针对 venv，virtualenv介绍之外，还比较了 Pyflow、Poetry、Hatch 等较新的 project management 工具。</p><hr><p><a href="https://github.com/David-OConnor/pyflow#why-add-another-python-manager" target="_blank" rel="noopener">Why add another Python manager?</a><br>pyflow 讲述为什么需要一个 Python 管理器。</p><hr><p><a href="https://bernat.tech/posts/pep-517-and-python-packaging/" target="_blank" rel="noopener">The state of Python Packaging</a><br>关于 Python 包管理演进的3篇文章。</p><hr><p><a href="https://www.bilibili.com/video/BV1KT4y1J7PU/?vd_source=37d54b4af4dc28a762ebf052a67761f3" target="_blank" rel="noopener">Python Meetup 第3期 | Python最新语言特征</a><br>49分38秒开始，[[PDM]] 作者讲解 PEP582 及 PDM 实现。</p><hr><p><a href="https://frostming.com/2022/03-27/python-on-debian/" target="_blank" rel="noopener">Debian 系统上捉摸不定的 Python</a><br>关于 Linux 发行版中 python 包路径问题。</p><hr><p><a href="https://xargin.com/sarama-producer-hang-another-case/" target="_blank" rel="noopener">sarama producer hang 又一例</a><br>[[sarama]] 故障排查总结。</p><hr><p><a href="https://changchen.me/blog/20221106/type-hinting-python-3-11/" target="_blank" rel="noopener">Python 3.11 类型注解新特性 | Henry Z’s blog~</a>  </p><p>眼花缭乱了。</p><hr><p><a href="https://www.zlovezl.cn/articles/if-programming-is-writing/" target="_blank" rel="noopener">如果编程就是写作  | Piglei</a></p><blockquote><p>不过有一点我能确定的是：不论编程还是写作，只有“写”才是提升能力的唯一途径。读完 100 本写作教程、翻完 1000 个开源项目的代码，也无法让我们成为大师。所以还等什么呢？关上文章，现在就开始写吧！</p></blockquote><hr><p><a href="https://benjiweber.co.uk/blog/2016/01/25/why-i-strive-to-be-a-0-1x-engineer/" target="_blank" rel="noopener">Why I Strive to be a 0.1x Engineer</a><br>10x vs 0.1x 。只做有价值的事情，什么是有价值的事情？</p><blockquote><p>Given the cost of maintaining everything we build, it would literally be better for us to do 10% the work and sit around doing nothing for the rest of our time, if we could figure out the right 10% to work on.<br>We could even spend 10x as long on minimising the ongoing cost of maintaining that 10%. Figuring out what the most valuable things to work on and what is a waste of time is the hard part.</p></blockquote><hr><p><a href="https://matt-rickard.com/what-are-containers" target="_blank" rel="noopener">What are Containers?</a><br>简单明了：什么是[[容器]]。</p><hr><p><a href="https://matt-rickard.com/information-barbell-2" target="_blank" rel="noopener">Information Barbell</a><br>关于获取信息渠道，一种是经典内容，一种是直接参与者的内容。前者是经得起时间考验的信息，后者是事情的参与者，介于两者之间的信息渠道信噪比都低很多，并不会让你多了解什么，反而可能会产生误导。<br>最近在了解 [[Python]] 包管理相关的内容，网上的大部分信息都是转载或者重复的，直接阅读官方文档或 Pypi参与者(如 <a href="https://bernat.tech/" target="_blank" rel="noopener">Bernát Gábor</a>， <a href="https://frostming.com/blog/" target="_blank" rel="noopener">Frost Ming</a>) 的博客是更好的选择。</p><hr><p><a href="https://blog.alexellis.io/blazing-fast-ci-with-microvms/" target="_blank" rel="noopener">Blazing fast CI with MicroVMs</a><br>使用 [[MicroVM]] 来运行 [[github]] actions。主要解决了直接使用 [[docker]]和 [[kubernetes]] 面临的资源隔离问题。也许 [[virtink]] 可以很好的解决这个场景？</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://xia0bs.github.io/2016/12/14/apple/" target="_blank" rel="noopener">苹果的偏执 | Yanng</a><br>关于苹果公司的一些传闻八卦，大部分强调苹果对于产品质量的把控严格，对细节的极致追求。</p><hr><p><a href="https://blog.last9.io/why-we-auto-delete-slack-messages-killing-tribal-knowledge-at-last9/" target="_blank" rel="noopener">Why we auto-delete slack messages - killing tribal knowledge at Last9 | Last9 SRE Platform</a><br>[[Last9]] 为了让大家信息公开透明，尽量在 channel 里讨论并形成文档，限制 DM 只保留2天。<br>之前我们也说过尽量在 channel 讨论，但是很难做到。作为对比，我们 Slack 的消息有 65% 都是 DM，22% 是公开 Channel，其余是私人 Channel。</p><hr><p><a href="https://brooker.co.za/blog/2022/11/08/writing.html" target="_blank" rel="noopener">Writing Is Magic - Marc’s Blog</a></p><p>[[写作]]带来的价值，平时浪费的时间很可能是写作产出没有价值的所耗费时间的很多倍。<br>清晰，可以重新整理思维，针对一个事情进行具体的梳理；<br>时间，通过将想法文档化来让他人关注到具体的内容中，不会有打断；<br>规模，写作的产出可以当做自己的积累，也可以让他人受益；<br>权威，可能是双向的，要保持警惕；<br>记忆，人会选择性的忘记一些事情，写作可以让你很好的对时间进行回顾；   </p><hr><p><a href="https://about.fb.com/news/2022/11/mark-zuckerberg-layoff-message-to-employees/" target="_blank" rel="noopener">Mark Zuckerberg’s Message to Meta Employees | Meta</a>   </p><blockquote><p>I got this wrong, and I take responsibility for that.</p></blockquote><p>扎克伯格给 [[Meta]] 员工的信，财源 13% (11000人），降本增效。<br>这能说明人们的[[社交]]文化被[[Tiktok]] 这种洞悉人性的产品给打败了么？   </p><blockquote><p>无论是用户规模、用户粘性还是用户时长，几乎可以清晰地看到，短视频还是那个短视频，即使名字换成了Tiktok，用户换成了海外，它依然是那个洞悉人性的流量黑洞级产品。</p></blockquote><p><a href="https://36kr.com/p/1808849230907017" target="_blank" rel="noopener">TikTok要教“大哥们”做事，Google、Meta要变天-36氪</a></p><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《100 Go Mistakes and How to Avoid Them》 ，本周读了第 11-19 个。</p><p>《三悦有了新工作》：有点悲伤。</p><p>《寒战》：确实是近些年很好看的港片。</p>]]></content>
    
    <summary type="html">
    
      I got this wrong, and I take responsibility for that.
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-11-06</title>
    <link href="https://zdyxry.github.io/2022/11/06/Weekly-Issue-2022-11-06/"/>
    <id>https://zdyxry.github.io/2022/11/06/Weekly-Issue-2022-11-06/</id>
    <published>2022-11-06T23:50:00.000Z</published>
    <updated>2023-02-26T12:56:35.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://jiajunhuang.com/articles/2022_10_31-goconvey.md.html" target="_blank" rel="noopener">编写可维护的单元测试代码</a><br>介绍 GoConvey 和 testify 两种单测框架。公司内部用 Ginkgo 比较多。</p><hr><p><a href="https://blog.cloudflare.com/zh-cn/partial-cloudflare-outage-on-october-25-2022-zh-cn/" target="_blank" rel="noopener">2022 年 10 月 25 日 Cloudflare 服务部分故障</a><br>[[CloudFlare]] 故障复盘，在引入 opentracing 时清理了部分 header 信息，导致上游逻辑判断错误。</p><hr><p><a href="https://brooker.co.za/blog/2022/10/21/nudge.html" target="_blank" rel="noopener">Give Your Tail a Nudge</a><br>[[Nudge]] 对于 [[FCFS]] 的优化：</p><blockquote><p>The intuition behind the Nudge algorithm is that we’d like to basically stick to FCFS, which we know is great for handling the extreme tail (high 𝑡), while at the same time incorporating a little bit of prioritization of small jobs, which we know can be helpful for the mean and lower 𝑡.</p></blockquote><blockquote><p>However, when a “small” job arrives and finds a “large” job immediately ahead of it in the queue, we swap the positions of the small and large job in the queue. The one caveat is that a job which has already swapped is ineligible for further swaps.</p></blockquote><hr><p><a href="https://engineering.razorpay.com/what-goes-behind-managing-production-alerts-204f186ce865" target="_blank" rel="noopener">Ops to Bots — Smartening incident recovery</a><br>通过构建 Bot 来标准化事件处理流程，降低 MTTD(Mean time to Detect) 和 MTTE(Mean time to Engage) 时间。</p><hr><p><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md" target="_blank" rel="noopener">命令行的艺术</a><br>了解一些工具的使用可以让工作效率提高一些，大部分都很常用，小部分可以随用随查。</p><blockquote><p>在 Bash 中，同时重定向标准输出和标准错误：<code>some-command &gt;logfile 2&gt;&amp;1</code> 或者 <code>some-command &amp;&gt;logfile</code>。通常，为了保证命令不会在标准输入里残留一个未关闭的文件句柄捆绑在你当前所在的终端上，在命令后添加 <code>&lt;/dev/null</code> 是一个好习惯。</p></blockquote><hr><p><a href="https://kracekumar.com/post/micro-benchmark-python-311/" target="_blank" rel="noopener">Python 3.11 micro-benchmark</a><br>[[Python]] 3.11 发布说明提到有不小的性能提升： “Python 3.11 is between 10-60% faster than Python 3.10. On average, we measured a 1.25x speedup on the standard benchmark suite. See <a href="https://docs.python.org/3/whatsnew/3.11.html#whatsnew311-faster-cpython" target="_blank" rel="noopener">Faster CPython</a> for details.”，作者针对一些常见场景进行了性能测试对比。</p><hr><p><a href="https://blog.last9.io/why-mttr-should-be-a-business-metric/" target="_blank" rel="noopener">Why MTTR should be a ‘business’ metric</a>   </p><blockquote><p>Ex: A practice from Last9 I love: 2 day auto-delete messages on personal DMs in slack, because you want to control the spread of tribal knowledge; forcing engineers to talk on public slack channels. (Full disclosure: I’m an investor in <a href="https://bit.ly/3VnLp2k" target="_blank" rel="noopener">Last9</a>)</p></blockquote><hr><p><a href="https://blocksandfiles.com/2022/11/01/backblaze-disk-drives/" target="_blank" rel="noopener">Backblaze: Buying less reliable disk drives can make financial sense</a>   </p><blockquote><p>如果您对优化云存储平台的效率感兴趣，那么对这种模型的需求对我们的业务很重要。否则，仅仅通过机器人购买最昂贵或最便宜的驱动器就会对分类账的费用部分视而不见。</p></blockquote><hr><p><a href="https://www.groundcover.com/blog/murre" target="_blank" rel="noopener">Murre - the lightweight K8s metrics monitoring tool</a><br>通过从 [[kubelet]] 直接获取 metric 来展示给用户，轻量的 [[kubernetes]] top.</p><hr><p><a href="https://iximiuz.com/en/posts/ssh-tunnels/" target="_blank" rel="noopener">A Visual Guide to SSH Tunnels (with labs)</a><br>[[SSH]] Tunnel 介绍。(把事情讲明白是一种能力啊)</p><hr><p><a href="https://farer.org/2021/04/21/go-dependency-injection-wire/" target="_blank" rel="noopener">理解一下依赖注入，以及如何用wire</a><br>通过 <code>google/wire</code> 实现 [[依赖注入]]。</p><hr><p><a href="https://medium.com/@ElizAyer/nobody-could-have-known-inclusive-behaviors-to-counter-a-culture-of-short-termism-cf662e1bab26" target="_blank" rel="noopener">“Nobody could have known”: inclusive behaviors to counter short-termism | by Elizabeth Ayer | Oct, 2022 | Medium</a><a href="https://thenewstack.io/there-is-no-shame-in-customer-reported-incidents/" target="_blank" rel="noopener">There Is No Shame in Customer-Reported Incidents - The New Stack</a><br>给客户呈现完整实时的事件报告，可以建立用户信任，这里的前提应该不是 P0/P1 级别的故障。<br>当客户遇到故障后，应该：最快更新问题状态、持续沟通、承担责任。“honesty is the best policy”</p><hr><p><a href="https://jiajunhuang.com/articles/2022_11_04-grpc_error_handling.md.html" target="_blank" rel="noopener">Golang gRPC 错误处理 - Jiajun的编程随想</a><br>通过在 [[grpc]] 中间件将自定义错误转换为对应业务码，同时支持 gRPC 和 HTTP 状态码。</p><hr><p><a href="https://medium.com/@snassr/processing-large-files-in-go-golang-6ea87effbfe2" target="_blank" rel="noopener">Processing Large Files with Go (Golang) | by snassr | Oct, 2022 | Medium</a><br>使用 [[Golang]] 通过 [[goroutine]] 和 [[channel]] 并行处理大文件。</p><hr><p><a href="https://coder.com/blog/go-leak-mysteries" target="_blank" rel="noopener">HTTP Resource Leak Mysteries in Go - Coder</a><br>[[Golang]] 内存泄漏调查，原因是没有执行 <code>response.Body.Close()</code></p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://reorx.com/essays/2022/10/get-away-from-china-saas/" target="_blank" rel="noopener">离开国产 SaaS</a><br>大部分时候不敢用国内的服务。</p><hr><p><a href="https://www.karlsutt.com/articles/communicating-effectively-as-a-developer/" target="_blank" rel="noopener">How to communicate effectively as a developer</a><br>换位思考，尽可能的详细的描述清楚所要表达的内容，在多人协作过程中体现的很明显。虽然很多时候自嘲每天都写小作文，但是小作文带来的优势是很久之后重新阅读相关的回复，可以很快的了解上下文，节省了不少时间。</p><hr><p><a href="https://xuanwo.io/reports/2022-43/" target="_blank" rel="noopener">2022-43: 工作中的自我调适</a>   </p><blockquote><p>工作热情高涨的时候总是会提出各种宏大的重构方案和计划功能，遇到的各种挑战和困难感觉都不是个事儿；但是在低迷的时候就感觉千头万绪无从下手，很难鼓起勇气去开始第一步，充满了挫折感以及失败感。为了缓解这种情绪，我选择先把这些特别大的计划暂停下，从一些细小而具体的工作着手，通过稳定的交付来恢复自己的感觉。<br>工作中遇到状态不好的时候可以尝试从外部环境和工作本身两个方面进行调整，跟自己的朋友和爱人多聊天，积极调适坚持度过。祝愿大家都能早日走出难捱的时光，好日子还在后头哪～</p></blockquote><hr><p><a href="http://bboczeng.blogspot.com/2013/02/blog-post.html" target="_blank" rel="noopener">BO ZENG BBOC, My Escondido: 互联网的庸众</a>   </p><blockquote><p>虚拟社交这是一场浩大的社会实验，成本是作者的激情，代价是观众的生命和时间。</p></blockquote><hr><p><a href="https://clay.earth/" target="_blank" rel="noopener">Clay - Be more thoughtful with the people in your network.</a><br>[[Clay]] 是面向个人用户的 [[CRM]]。肯能有人觉得有些“功利”，但是人际关系是需要认真维护的。</p><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《100 Go Mistakes and How to Avoid Them》 ，本周读了10个，推荐阅读。</p><p>《边缘世界 第一季》，有一种要烂尾的趋势。</p><p>《乐透大作战》，韩式喜剧，破记录都是有原因的。</p><p>《孤单又灿烂的神：鬼怪》，终于看完了，不得不说，现在的韩剧水平距离 2015/2016 年真的差太多了。</p>]]></content>
    
    <summary type="html">
    
      虚拟社交这是一场浩大的社会实验，成本是作者的激情，代价是观众的生命和时间。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-10-30</title>
    <link href="https://zdyxry.github.io/2022/10/30/Weekly-Issue-2022-10-30/"/>
    <id>https://zdyxry.github.io/2022/10/30/Weekly-Issue-2022-10-30/</id>
    <published>2022-10-30T23:50:00.000Z</published>
    <updated>2023-02-26T12:56:35.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://www.zlovezl.cn/articles/stmt-expr-and-walrus-operator/" target="_blank" rel="noopener">Python 工匠：语句、表达式和海象操作符</a></p><p>关于复制表达式的使用场景介绍。</p><ul><li>如果是一个私人脚本，也许我会愿意把代码写成上面那样。但在多人参与的真实项目里，我目前可能更愿意用一段平平无奇的 <code>for</code> 循环替代它。很多时候，相比“聪明”的代码，“笨”代码才是我们更需要的东西，它们能为项目的参与者省去许多沟通和维护上的成本。</li></ul><hr><p><a href="https://coolshell.cn/articles/17998.html" target="_blank" rel="noopener">LINUX PID 1 和 SYSTEMD</a></p><p>关于 init 进程的演进。</p><hr><p><a href="https://engineering.salesforce.com/how-salesforce-built-a-cloud-native-task-execution-service/" target="_blank" rel="noopener">How Salesforce Built a Cloud-Native Task Execution Service</a></p><p>关于 [[Salesforce]] 的 [[Hyperforce]] 介绍。</p><hr><p><a href="https://crossoverjie.top/2022/10/24/gscript/gscript11-closure/" target="_blank" rel="noopener">深入（彻底）理解闭包实现原理</a></p><p>使用 Golang 来讲解闭包。</p><hr><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://www.reddit.com/r/sre/comments/xi9fku/a_real_day_in_the_life_of_an_sre_we_have_all_seen/" target="_blank" rel="noopener">A “real” day in the life of an SRE.</a></p><blockquote><p>I decide to take a break for breakfast. I am a little annoyed with myself for not having got any ‘real’ work done before my first break. But this is how it goes sometimes.</p></blockquote><hr><p><a href="https://chinese.freecodecamp.org/news/how-to-google-like-a-pro-10-tips-for-effective-googling/" target="_blank" rel="noopener">如何像专家一样高效使用 Google 搜索</a></p><p>Google搜索技巧，大部分都是已知的，<code>AFTER</code> 和 <code>AND/OR</code> 之前没用过。</p><hr><p><a href="https://twitter.com/marcushkheroes/status/1585238972795858945" target="_blank" rel="noopener">埃及见闻</a></p><blockquote><p>如果我没记错的话，穆斯林里两大罪，一个是欺骗，一个是背叛。但一路走下来，穆斯林世界里充满了欺骗和背叛，一方面和他们的宗教改革失败有关，一方面还是因为贫穷——至少在迪拜就没被宰过，虽然不便宜，但贵有贵的道理。</p></blockquote><hr><p><a href="https://tumutanzi.com/archives/16930" target="_blank" rel="noopener">老板是不会有错的</a></p><hr><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《100 Go Mistakes and How to Avoid Them》 ，刚开始读。</p><p>《边缘世界 第一季》，不错，希望不要烂尾。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-10-23</title>
    <link href="https://zdyxry.github.io/2022/10/23/Weekly-Issue-2022-10-23/"/>
    <id>https://zdyxry.github.io/2022/10/23/Weekly-Issue-2022-10-23/</id>
    <published>2022-10-23T23:50:00.000Z</published>
    <updated>2023-02-26T12:56:35.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://blog.codingnow.com/2022/10/telecom_ipv6.html" target="_blank" rel="noopener">电信宽带 ipv6 折腾记</a></p><p>运营商配置变化太快。</p><hr><p><a href="https://medium.com/blablacar/be-lean-go-far-leveraging-kubernetes-for-an-elastic-right-sized-platform-bc1179c4c784" target="_blank" rel="noopener">Be Lean, Go Far: leveraging Kubernetes for an elastic right-sized platform</a></p><p>将业务迁移到 kubernetes 后所做的资源分配调度优化，需要 GKE 背景知识。</p><blockquote><p>You can only improve what you measure</p></blockquote><hr><p><a href="https://githubcopilotinvestigation.com/#" target="_blank" rel="noopener">GitHub Copi­lot inves­ti­ga­tion</a></p><p>关于 [[github]] [[copilot]] 调查，除了讨论[[copilot]] 会导致开源协议的错误引入之外，还讨论 [[copilit]] 让用户只关心自己想要的内容(代码)，而不关心背后的社区。</p><hr><p><a href="https://typefuture.com/web-stack/" target="_blank" rel="noopener">Web 玩具项目技术栈</a></p><p>采用 [[Next.js]] [[Supabase]] [[Fly.io]] 运行个人项目，成本为0 。</p><hr><p><a href="https://farseerfc.me/followup-about-swap.html" target="_blank" rel="noopener">关于swap 的一些补充</a></p><p>误解1: swap 是虚拟内存，虚拟内存肯定比物理内存慢嘛<br>误解2: 但是没有交换区的话，虚拟内存地址都有物理内存对应嘛<br>误解3： 不是内存快用完的时候才会交换的么？惰性分配有什么好处？那么内核什么时候会开始回收内存？</p><hr><p><a href="https://world.hey.com/dhh/why-we-re-leaving-the-cloud-654b47e0" target="_blank" rel="noopener">Why we’re leaving the cloud</a></p><p>Basecamp 谈论为什么不使用公有云。AWS 利润率达到 30%。<br>之前阅读过类似的文章：<br><a href="https://specbranch.com/posts/one-big-server/" target="_blank" rel="noopener">Use One Big Server</a><br><a href="https://devops.com/the-curious-connection-between-cloud-repatriation-and-sre-ops/" target="_blank" rel="noopener">The Curious Connection Between Cloud Repatriation and SRE Ops</a></p><hr><p><a href="https://github.com/notepad-plus-plus/notepad-plus-plus/issues/12324#issuecomment-1286360079" target="_blank" rel="noopener">Someone violated your copyright license</a></p><p>NotePad++ 作者针对 NotepadFree 回应：</p><blockquote><p>因為我行使我的言論自由而遭致 Notepad++ 在中國無法被下載。<br>而開發 Notepad++ 的初衷是提供分享免費的文字與原始碼編輯軟體給任何電腦從事人員 (Software, IT ppl, etc…)，當然也抱括中國電腦從事人員。我的重點是，即便我不願意讓這些中國極端的民族主義者使用 Notepad++，並非所有的中國人都是如此。被複刻的 Notepad++，不論其動機如何，它可以通過中國政府的審查機制而提供中國電腦從事人員使用 Notepad++ 的可能，無論它的名稱為何。而「讓任何人使用」是 GPL 自由軟體的真髓，也是我開發 Notepad++ 的初衷 。</p></blockquote><hr><p><a href="https://liqiang.io/post/2AWBmQUGDn0byF6baiSXUBQ3spfqZBb3" target="_blank" rel="noopener">Mac 环境下管理多套 Go 版本</a></p><p>可以使用 brew 和 Goland 管理，我使用 goenv 来管理多个版本，在切换版本的时候需要注意 GOPATH 环境变量设置。</p><hr><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://catcoding.me/p/unconscious-bias/" target="_blank" rel="noopener">无意识偏见</a></p><blockquote><p>人们通常会对自己的受歧视经历印象深刻，但如果你是歧视者，就会自己做出的歧视行为毫无知觉，大多数人会难以发现自己带着习惯形成的偏见。正如耗子所说，偏见不止是对他人会造成伤害，对自己的认知和进步也会形成阻碍。比如技术上的偏见，抛去应用场景和需求谈技术栈，就会让自己的偏见无意识占了主导，从而做出不好的选择。 <strong>我认为偏见主要是会扼杀了好奇心和求知欲，当你把一个对立的标签贴上之后，就认为自己已经足够了解，从而会丢掉去了解的好奇心和动力。</strong></p></blockquote><hr><p><a href="https://strrl.dev/post/weekly-report/2022/41-%E7%88%AC%E5%B1%B1%E4%B8%8A%E7%98%BE/" target="_blank" rel="noopener">2022-41: 爬山上瘾</a></p><blockquote><p>网上找了个懒人整合包, 跑起来以后发现自己脑子里根本没有啥关键词. 也没画出啥可爱的东西</p></blockquote><p>时常感觉自己的思维完全被局限住，没有想象力。</p><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《毫无意义的工作》：<a href="https://zdyxry.github.io/2022/10/22/%E3%80%8A%E6%AF%AB%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E5%B7%A5%E4%BD%9C%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/">读书笔记</a></p><p>《救赎之队：2008美国男篮奥运梦》： 充满了回忆，看完可以理解 03年选秀为什么关系不错。</p><p>《棒球大联盟》：好久没看这么好看的剧了，但是直到最后都没打一场比赛让我不爽。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>《毫无意义的工作》读书笔记</title>
    <link href="https://zdyxry.github.io/2022/10/22/%E3%80%8A%E6%AF%AB%E6%97%A0%E6%84%8F%E4%B9%89%E7%9A%84%E5%B7%A5%E4%BD%9C%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://zdyxry.github.io/2022/10/22/《毫无意义的工作》读书笔记/</id>
    <published>2022-10-22T13:00:00.000Z</published>
    <updated>2023-02-26T12:56:35.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>Q：Why？为什么要读这本书？  <ul><li>在豆瓣看到过有人推荐，之前阅读过 《工作、消费主义和新穷人》来对工作、消费背后的介绍产生了兴趣。  </li></ul></li><li>Q：Who？这本书是谁写的？  <ul><li>大卫·格雷伯（David Graeber），美国著名人类学家、社会学家，“占领华尔街”主要参与者，先后任耶鲁大学副教授、伦敦政治经济学院教授，师承人类学家马歇尔·萨林斯。出版有《债：5000年债务史》，受到《21世纪资本论》作者托马斯·皮凯蒂的高度赞誉。  </li></ul></li><li>Q：What？这本书讲了什么？这是哪类书？用一句话或一段话概述整本书的内容。  <ul><li>讲解什么是狗屁工作，狗屁工作的分类、成因、影响以及如何应对。  </li></ul></li><li>Q：将书中重要篇章列举出来，它们是如何组成整体的架构的？  <ul><li>1-2章节讲解了狗屁工作的定义和分类，3-5 章节讲解狗屁工作对个人和社会的影响，6-7章节讲解如何应对狗屁工作。  </li></ul></li><li>Q：有没有重要的概念或者关键词你想在这里强调一下？  <ul><li>“狗屁工作的核心：虚伪和无目标感”  </li><li>“第一，工作带给人最重要的东西一是金钱，以便支付各种账单开销，二是给世界做出积极贡献的机会；第二，以上两者成反比，即你的工作越是对他人有帮助、有好处，带来的社会价值越高，那么这份工作带给你的酬劳往往就越低。”  </li><li>“人类工作越来越辛苦是因为人类创造了某种奇怪的施虐受虐逻辑论证法，通过这种逻辑论证，我们觉得只有在工作时不断感受痛苦，才能赋予我们那些隐秘的消费主义愉悦感以合理性。在这种理念的驱使下，工作占据了我们越来越多的时间，于是人们不再享有“生活”这件奢侈品”  </li></ul></li><li>Q：How？这本书提供了什么行动建议？有什么方法或观点是可以实际在生活中使用的？  <ul><li>生活中尽量摆脱虚伪，无论目标是明确的还是模糊的，让自己有一个目标。  </li></ul></li><li>Q：Think？读完这本书有什么感想，是否同意作者观点？是否有疑问？  <ul><li>判定自己是否在从事狗屁工作，是否真的创造价值以及价值的体现，只能通过主观判定，不需要他人评判。同样很多人对”效率“的追求可能是虚假的，因为效率的提高可能会导致他本身的价值降低。之前看到豆瓣上有一个”FIRE生活“ 小组，里面的人追求的是一定程度的财富自由之后，做一些自己想做的事情，来享受生活，如果从创造价值的角度考虑，这类人创造了什么社会价值么？在保持低物欲的极简生活状态下，他们可能也是不受社会欢迎的”新穷人“吧。获取这个问题就不应该存在，不在意创造价值？  </li></ul></li><li>Q：Todo？读完这本书之后，有什么需要做得事情么？  <ul><li>对能说出”工作是良药，能医治一切困扰人的疾苦。“ 的托马斯·卡莱尔产生了好奇。  </li></ul></li></ul><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="第一章：什么是狗屁工作"><a href="#第一章：什么是狗屁工作" class="headerlink" title="第一章：什么是狗屁工作"></a>第一章：什么是狗屁工作</h3><p>“狗屁工作是一份毫无意义且往往有害的定期领薪水的职业，其无意义或有害程度是如此之高，乃至从事这份职业的人都无法为其找出合适的存在理由。虽然要从事这份工作有一个条件，即从事者不得不假装这份工作的存在是完全合理的。”  </p><p>“狗屎工作”往往是蓝领工作，从事者按小时拿钱；而“狗屁工作”往往是白领工作，从事者拿的是月薪。从事“狗屎工作”的人经常受到侮辱，他们不仅工作辛苦，而且正因为工作辛苦而被人瞧不起，但是起码他们知道自己做的事情是有用的。那些从事“狗屁工作”的人则常被荣誉和声望围绕，他们被视作专业人士，他们得到人们的尊重，且收入颇丰，他们被认为是有成就的人，是有理由为自己的成就感到自豪的人。但是他们内心知道：他们什么成就都没有；他们感觉自己什么都没做就能够支付各种消遣玩乐的费用，并用这些填满自己的整个人生；他们感觉这一切都基于某个谎言——他们的感觉没有错。”   </p><blockquote><p>“我曾想过，如需将一个人彻底摧毁，残暴无比地折磨他，用杀人狂魔听了都会颤抖、都会吓得魂飞魄散的方式击垮他，那么只需要给他安排一份毫无意义的工作，一份毫无意义到甚至荒谬的工作”     </p></blockquote><h3 id="第二章：狗屁工作的种类"><a href="#第二章：狗屁工作的种类" class="headerlink" title="第二章：狗屁工作的种类"></a>第二章：狗屁工作的种类</h3><p>“在研究中，我发现把狗屁工作分成五个类别会很有帮助。这五大类别分别是：随从（flunky）、打手（goon）、拼接修补者（duct taper）、打钩者（box ticker）和分派者（taskmaster）。”</p><p>“大型机构中，上级的重要性几乎永远是跟他手下干活的人数挂钩的。这反过来更刺激了组织阶梯中处于上位的那些人不断扩充自己的队伍，至于招来的下属具体做什么，则完全是以后再考虑的事情了。更多情况下，这些上级还会无视岗位过剩的情况，根本不会花精力去精简队伍。后面会提到，诸如银行、医疗耗材公司等大公司有时会聘请顾问来提升公司效率。根据这些顾问的反馈，当管理层了解到效率的提升需要仰仗自动化，而自动化会造成他们手底下的员工数量骤减时，这些管理人员便沉默了，不仅场面陷入尴尬，随之而来的还有对顾问毫不掩饰的敌意。效率提升方案一旦被执行，这些管理人员就什么都不是了，成了光杆司令了。没有了随从，那他们还能当谁的“上级”？”</p><p>“巴勃罗的主要观点是，人们越来越依赖免费软件，软件行业的领薪岗位也越来越多地设置给了拼接工作。程序员下班后很乐意利用业余时间无偿开发些程序，因为这些涉及核心技术的工作内容本身就令人满足，但同时也意味着他们越来越没有动力去考虑自己开发的程序是否最终能和其他人开发的其他程序相兼容，那么这批程序员在白天上班的时候，就得花费更多时间去从事拼接工作（有偿），把这些本不兼容的程序拼接起来。巴勃罗的这个观点非常重要，后文中我会详细讨论此种情况可能带来的影响，不过现在，我们仅对拼接工作概念本身进行展开。”</p><p>“起码存在一类人真的意识不到自己从事了狗屁工作。当然，首席执行官从事的还真的不是狗屁工作，他们确实改变了这个世界，不管这种改变是好是坏。他们只是对自己创造的各类狗屁工作视而不见而已。”</p><h3 id="第三章：论精神暴力-上-–为什么狗屁工作从事者说他们不快乐"><a href="#第三章：论精神暴力-上-–为什么狗屁工作从事者说他们不快乐" class="headerlink" title="第三章：论精神暴力(上)–为什么狗屁工作从事者说他们不快乐"></a>第三章：论精神暴力(上)–为什么狗屁工作从事者说他们不快乐</h3><p>“工作场所是法西斯式的。这里狂热而排他，你的生命被吞噬；老板将原本属于你的每分每秒全部抢过来，并占为己有，好似恶龙将金子秘藏。” ——努里</p><p>“而且他根本找不到任何办法从自己的工作中解读出哪怕一丝丝意义来，这一点最终把他逼疯。养家糊口这样的理由他也没办法用，因为他还没有成家。埃里克所在的阶级是以劳动为荣的阶级，这个阶级的人们制造、维护和修理东西，并以此为荣，这个阶级的人们觉得一切理应如此。于是自然而然，埃里克觉得上了大学进入专业领域之后，自己将要从事更加高大上的劳动。可现实恰恰是因为他“不具备”某项能力，反而获得了这份工作。他一次次尝试辞职，公司却一次次给他加薪。辞职不行，那出格行不行？还是不行。不管他做了多么过分的事情，公司还是留着他。他试过挑明公司的问题，也试过拙劣地扮演别人想要他扮演的角色，可这一切都是徒劳。”</p><p>“狗屁工作的核心：虚伪和无目标感”</p><p>“公众关于工作的大量讨论都是基于一个假设，即经济学家提出的模型是正确的。人们必须被强迫才会去工作，如果要救济穷人以防他们饿死，那么这种救济也必须用最为羞辱和麻烦的方式给予，不然他们就会产生依赖，再也没有找正经工作的动力了。[1]这里暗含着一个假设：如果人类有机会做寄生虫，那他们会毫不犹豫地去做。”</p><p>“然而哪怕是最自私的人最终也会发现，比起辛苦万分还不赚钱地劳作，整天坐着啥都不干而只看电视的命运会让人更难以忍受。”</p><p>“雇用你的时候，你感到自己是因为有用才获得了这个岗位，结果却发现事实完全不是如此，但又不得不配合表演，假装自己是有用的，假装这个岗位是有用的。这种先让你产生自己有用的错觉，然后再被全然否定的经历，不仅仅是对自尊感的摧毁，还直接动摇了自我意识的根基。一个人一旦停止对世界产生有意义的影响，那这个人就不复存在了。”</p><p>“你现在的时间是我的，我花钱不是养闲人的”</p><p>“一个社会父权化程度越高，男性和女性越是隔离，男性就越不清楚女性的工作情况。若是女性不见了，男性自然也不大可能替代她们去完成她们的工作。（与此形成对比，女性往往很清楚男性的工作内容，因此男性一旦因为某种原因消失，女性是能够从容应对的。正是出于这个原因，历史上经常出现一种情况：虽然某社会中大量男性因战争或贸易需要长期离开，但这个社会的生活并没有怎么被打乱。）父权制社会下，女性工作若是有人监管，那监管的人同样也会是女性。”</p><p>“由天体决定的绝对时间，就这么进入了尘世，并开始控制管理人类的日常事务，哪怕是最私人的小事。然而时间既是确定的坐标，也是一种资产。时钟鼓励所有人都以中世纪商人的方式去看待时间：时间成了一份有限的资产，需要像对待金钱那样细细规划预算，小心支配。”</p><p>“这类工作往往不是拿计件工资而是领固定月薪的，甚至都没有上级跟在他们屁股后面盯着。其实很多情况下正是如此。然而这类装模作样的游戏终究不是人们自主选择的，而是人们受到权力压迫的表现，因此不可避免地会让人意志消沉。”</p><h3 id="第四章：论精神暴力-下-–身处狗屁岗位有何感受"><a href="#第四章：论精神暴力-下-–身处狗屁岗位有何感受" class="headerlink" title="第四章：论精神暴力(下)–身处狗屁岗位有何感受"></a>第四章：论精神暴力(下)–身处狗屁岗位有何感受</h3><p>“疑问：太多人因领了工资却没有实际事情可做而感到愤怒、难以忍受、倍感压迫，这到底是为什么？况且工作环境往往还相当不错。我认为这个问题的答案揭示了关于人性的某些真相。这些真相大都被经济科学忽视了，甚至连大众常识中那些较为愤世嫉俗的部分都没能包含它们。人是依赖社交的存在，如果失去了和他人经常接触的机会，就会开始萎缩，甚至肉体上也开始衰弱。人类之所以觉得自己是自主存在，是与世界和他人分离的独立体，很大程度上是因为人们觉得自己可以按照可预测的方式对世界和他人产生影响。一旦被剥夺这种拥有力量的感觉，人类就什么也不是了。”</p><p>“当你在工作中，仅有的挑战是要接受根本没有任何挑战这件事；你施展才能的唯一方式，是变着花样掩饰自己无法施展才能这个现状；你需要消化自己已然成了寄生虫和大骗子这个事实，虽然你的初衷绝非如此，但痛苦会随之而来。在此种情况下，你必须非常自信，绝不能开始自我怀疑。（而这种自信本质上是有害的，毕竟，你之所以会深陷此类处境，不正是源自你上级那愚蠢又过分的自信吗？）”</p><p>“当一个人的狗屁工作不是什么都不做在那儿假装忙碌，而是真的很忙，但是忙的事情所有人都知道（但是不能说出来）是没有任何意义的，他就会被一种紧张感包围。这种紧张感会不断聚积，在这种情况下，人们往往会变得很有攻击性、很任性。”</p><h3 id="第五章：狗屁工作为什么会激增"><a href="#第五章：狗屁工作为什么会激增" class="headerlink" title="第五章：狗屁工作为什么会激增"></a>第五章：狗屁工作为什么会激增</h3><p>“某种程度上我们可以说，整个金融业就是一场骗局，因为整个行业表面上是针对商贸和制造领域的潜在赢利机会进行的各种操作，但事实上，这两个领域几乎没有被涉及。金融业绝大部分的利润来自同政府合谋生产、交易和操纵各种各样的债务。在本书中，我真正想说的是，就和金融业充满了烟雾幻境和假象一样，伴随着金融业繁荣而兴起的信息岗位，大部分工作也不过是魔术师的骗局而已。”</p><p>“政府在创造和维持狗屁工作中扮演的角色”</p><p>“总统先生到底说了什么？他承认了恺撒医疗集团或蓝十字蓝盾等医疗保险机构的几百万个岗位是没必要存在的。他甚至承认了社会主义化医保制度比现有的市场化医保制度更有效，因为前者可以减少不必要的文书工作，还可以避免数十家有竞争关系的私营医保公司精力的重复消耗。但他同时表示，正是为了保住这几百万个无用岗位，我们不能采用社会主义化医保制度。他坚持表示，维持现有市场化医保制度的一个原因正是这个制度的低效性。因为维持几百万个基本上毫无用处的办公室岗位要好过绞尽脑汁寻找相应数量的其他什么岗位让这些办事员来做。”</p><p>“对狗屁工作激增原因的几种错误解释”</p><ul><li><p>“第一类观点认为，那些在私营企业工作却有着类似想法的人是没有道理的。因为在市场经济中面临竞争的私营企业绝不可能花钱去雇人什么都不做，他们的岗位肯定存在某种用途，只不过他们自己并没有理解而已。”</p></li><li><p>“第二类观点则承认在私营领域确实也存在毫无意义的岗位，甚至承认这样的岗位在激增。但是他们坚持认为，私营领域中的狗屁工作必然是政府干预的产物。”</p></li></ul><p>“所以哪怕这些岗位最初设立的时候并不是“随从岗位”（估计大部分都不是），但这些人最终却纷纷沦为了随从，并一直这么“随从”下去了。当然，在任何大公司，大家都在担心自动化带来的威胁。我听说，有些公司的程序员上班时穿的文化衫上印着“走开点，不然我写一小段Shell[5]脚本就没你什么事了”，但是在这个案例以及其他类似的案例中，我们发现这种担忧袭向了公司的高层。这些高管一直颇为得意他们残酷无情的行事风格（比如，他们都掺和过私募股权投资业务，不管掺和的形式如何）。他们靠着这股无情吞掉了其他公司，并借着精兵简政、提高效率等名头甩给这些公司巨额债务。正是这些高管，面对自己内部机构臃肿的现象，却非常骄傲。事实上，如果西蒙判断无误，这些高管之所以这么做是因为这就是大型银行的本质：大型银行就是由大批封建随从和少数封建领主构成的，每位高管享受领主般的待遇[…]”</p><p>“而工业资本主义的到来则显然改变了这一切，20世纪兴起的管理主义更是加剧了这种改变。金融化资本主义之下，情况不仅没有好转，反而更加严重了。“效率”意味着赋予经理、监督人和其他各种所谓“效率专家”越来越多的权力，这样真正从事生产的人就几乎没有任何自主权了。[4]与此同时，管理者的队伍似乎也在无休无止地壮大着。”</p><p>“在任何以占有和分配商品为基础的政治经济体制中，非常多人从事的工作就是在整个系统中来回传送各种资源，而不是真正去创造、推进或维修这些商品，这一庞大的群体往往会将自己分成非常多的等级（起码有3个级别，有时候能达到10个、12个甚至更多）。然后我们还可以推论，在这些等级中，仆从和下级之间的界限往往很模糊，毕竟“服从上级”是经常出现在职位描述中的关键内容。大部分重要玩家自己既是领主又是封臣。”</p><p>“使人感到痛苦的不仅仅是工作过程毫无意义这一点，还有为了获得做事机会，不得不消耗大量原本可以用来做事的时间。”</p><h3 id="第六章：为什么社会对狗屁工作的激增无动于衷"><a href="#第六章：为什么社会对狗屁工作的激增无动于衷" class="headerlink" title="第六章：为什么社会对狗屁工作的激增无动于衷"></a>第六章：为什么社会对狗屁工作的激增无动于衷</h3><p>“虽然在道德说教者的影响下，人们不会四处宣扬“狗屁工作激增”这个现象（因为在公共讨论中，所有工作都必须被当作神圣的职责来对待，因此有工作总比没有工作来得好），但一旦涉及我们自身的工作时，大家的评判标准往往就完全变了。我们会对工作有所期待，希望自己的工作有意义，能实现某种目标，一旦发现不能，情绪便会非常低落。但这就引出了新的问题：如果工作本身并没有价值，那么它又是如何为其他事物提供价值的呢？毕竟，当人们谈及工作的“毫无意义”和“对谁都没好处”时，他们是在谈论价值，而这价值又是什么价值呢？”</p><p>“如果某件商品或某项服务满足了某种需求或者改善了人们的生活，那么这件商品或这项服务可被视作具有真实价值，但如果它们仅仅创造了需求而非满足既有的需求，那不管是通过让人觉得自己太胖或太丑来购买产品，还是诱骗他人贷款以收取利息，这些商品或服务都不具备真正的价值。这种说法看起来足够有道理，但还是没有解决究竟怎样才算“改善了人们的生活”这个问题，而这个问题的答案显然决定了后续的一切判定。”</p><p>“社会价值”并不只是关乎财富创造，甚至都不关乎闲暇，而是关乎社交，关乎合群。”</p><p>“第一，工作带给人最重要的东西一是金钱，以便支付各种账单开销，二是给世界做出积极贡献的机会；第二，以上两者成反比，即你的工作越是对他人有帮助、有好处，带来的社会价值越高，那么这份工作带给你的酬劳往往就越低。”</p><p>“拥有资本的那部分人成为雇主，而没有资本的那部分人则不得不替他们打工。这对个人意味着什么呢？首先，成百上千万的年轻人发现他们陷入了社会意义上的永久青春期出不来。随着同业公会结构的瓦解，学徒虽然依然可以从新手变成熟手，但从熟手成为独立经营者的老路已经不复存在，这也就意味着，从传统角度来看，他们是不具备谈婚论嫁、组建家庭的资格的。他们构成了事实上的“不完整的人”，如此过完一生。”</p><p>“穷人被视作“失意青少年”。从传统意义上来说，青少年通过工作，或者更确切地说，通过“在主人严密监督下的领薪工作”，最终学会了如何成为合乎习俗的、自律的、自给自足的、体面的成年人。可事实上，清教徒等各种虔诚的风俗改良派已不再能够像原来那样向穷人承诺什么了，曾经的“无须听从他人命令、自给自足生活的成年人身份”肯定是没法再提供了，于是他们通过慈善和戒律，通过注入更新后的神学理念来替代之前的承诺。他们教导穷人，工作既是惩罚也是救赎。工作是自我禁欲，其本身就有价值，这种价值甚至超越了工作所能产生的财富，工作纯粹是上帝施予人类恩惠的标志，可不是拿来给你们享受的。[4]”</p><p>“诚然，在某种程度上，我们大部分人更希望通过工作以外的什么东西来定义自己而非工作本身。[3]可不知道为什么，矛盾的事情发生了，当被问及生活的意义这个问题时，人们常常会回答，是工作赋予了他们生活的终极意义，而失业则会给他们的心理造成毁灭性的打击。”</p><p>“卡莱尔最终得出一个结论，而这个结论正是今时今日许许多多人所得出的：如果工作是高贵的，那么最高贵的工作不应该获得报酬，因为给这样一件有着无上价值的事物标上价码，实在污秽可憎（“当然在天堂等地方，真正的‘酬劳’已准备好，来回馈每一份高贵的工作”[7]）。不过卡莱尔还是很体贴地表示，确实需要提供给穷人“合理的酬劳”，使他们具备生存的能力。”</p><p>“今日狗屁工作激增，主要原因在于掌控富裕经济体（同时也在逐渐掌控非富裕经济体）的管理主义封建制度的独特性。狗屁工作之所以给人们带来了痛苦，是因为人类幸福感的源泉是来自一种对这个世界能产生一定影响的感觉，而当提及自身工作的时候，人们大都会将这种感觉同社会价值等同起来。但是与此同时，他们意识到一点，一份工作产生的社会价值越大，它能给工作者带来的经济回报则越小。”</p><p>“不得不在社会价值和经济回报中做出抉择：若是选择了社会价值，你就可以从事照顾孩子这样有用且重要的工作，但是你却被不断告知，帮助他人所获得的满足感本身就是这份付出的回报，至于如何养活自己，那你自己想办法好了；若是选择了后者，各种各样的生活开销是没问题了，但是却需要接受一份毫无意义且备受侮辱的工作，付出了身心俱疲的代价却丝毫不能带来任何价值，当然能够符合“如果你没有因为工作而身心俱损，那么你就没有正确地生活，不管这份工作是否有意义”这种普遍的价值观。”</p><h3 id="第七章：狗屁工作的应对"><a href="#第七章：狗屁工作的应对" class="headerlink" title="第七章：狗屁工作的应对"></a>第七章：狗屁工作的应对</h3><p>“在我看来，这种没完没了延续毫无意义的工作的冲动，实际上不过是来源于对暴民的恐惧：暴民这种动物如此低等，以至一旦让他们获得闲暇，就会立刻变得危险，还是让他们忙忙碌碌没有时间思考来得安全。 ——乔治·奥威尔，《巴黎伦敦落魄记》  </p><p>“经济越是沦为单纯的钱财分配问题，效率的低下和管理的臃肿就越能说得通，因为正是这样的组织结构，才能最大限度地榨取钱财。某份工作实际生产效能越低、造福他人价值越少，这份工作从自我牺牲意义上出发的价值便越大，也就是说，任何使工作变得好玩、变得不再繁重的事情，哪怕是因造福他人而产生的满足感，都会被视作削弱了这份工作带来的自我牺牲价值。所以，如果某份工作给人以满足感，那么“经济回报就比较低”这个现象也就有理论基础了。”</p><p>“人类工作越来越辛苦是因为人类创造了某种奇怪的施虐受虐逻辑论证法，通过这种逻辑论证，我们觉得只有在工作时不断感受痛苦，才能赋予我们那些隐秘的消费主义愉悦感以合理性。在这种理念的驱使下，工作占据了我们越来越多的时间，于是人们不再享有“生活”这件奢侈品”</p><p>“这样的工作安排，营造出了一种充满憎恨和愤懑的政治风貌。那些在失业中痛苦挣扎的人憎恨那些有工作的人。那些有工作的人被鼓动着去仇视穷人、去憎恨失业者，因为穷人和失业者一直被描绘成好吃懒做、白吃白拿之流。狗屁工作从事者痛恨那些拥有对人类有益的真正工作之人，而那些从事着对人类有益的真正工作之人，在饱受低薪、羞辱和忽视之后，则越发讨厌那些垄断着极少数华丽、高尚、有用且高薪岗位的（他们口中的）“自由派精英”。所有这些人都讨厌统治阶级，认为统治阶级是腐败的、堕落的（他们确实是），而统治阶级则觉得可以好好利用这些人彼此之间空洞的相互仇恨，因为这样他们自己可以躲开些关注。”</p><p>“你的工作高尚、有用，而你依然想要获得舒服的工资收入和丰厚的福利待遇，那你就会成为人们憎恨的对象，除非你是士兵或者其他军方直接工作人员。士兵不仅不会因为从事的工作既高尚又高薪而被憎恨，恰恰相反，他们是永远不被憎恨的群体。他们超越一切批评。”</p><p>“如果你的目的仅仅是挣大钱，那么也许存在某种可能的路径，但如果你想要追求金钱以外的其他价值，不管这个价值是真实（新闻、学术），是美（艺术、出版），是正义（激进运动、人权），还是慈善，等等，而你同时还想拥有体面的收入，那么除非你有一定的家族财富、社会人脉和文化资本作为背景，否则绝无可能。于是，文化精英阶层成功地在所有可以获得经济回报以外其他价值的工作岗位上设置了屏障。文化精英阶层正试图将他们自身打造成新的美国贵族，并且在很大程度上已经成功。好莱坞贵族正是如此，世袭垄断了所有经济回报颇丰，同时还能给人高贵感、成就感和价值感的岗位。”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Q：Why？为什么要读这本书？  &lt;ul&gt;
&lt;li&gt;在豆瓣看到过有人推荐，之前阅读过 《工作、消费主义和新穷人》来对工作、消费背
      
    
    </summary>
    
    
      <category term="Book" scheme="https://zdyxry.github.io/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>Weekly Issue 2022-10-16</title>
    <link href="https://zdyxry.github.io/2022/10/16/Weekly-Issue-2022-10-16/"/>
    <id>https://zdyxry.github.io/2022/10/16/Weekly-Issue-2022-10-16/</id>
    <published>2022-10-16T23:50:00.000Z</published>
    <updated>2023-02-26T12:56:35.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><p><a href="https://matt-rickard.com/startup-ideas-ive-considered" target="_blank" rel="noopener">Startup Ideas I’ve Considered</a></p><p>无代理可观测性平台、机器学习基础设施、表格系统、安全、VPN、BaaS、版本控制。</p><hr><p><a href="https://aws.amazon.com/cn/blogs/china/choose-the-best-docker-image-for-your-python-application/" target="_blank" rel="noopener">为你的 Python 应用选择一个最好的 Docker 映像</a></p><p>如何选择 容器 镜像是一个需要仔细调研权衡的问题，从各方面考虑 alpine 不是一个好选择。</p><hr><p><a href="https://matt-rickard.com/infrastructure-defined-software" target="_blank" rel="noopener">Infrastructure Defined Software</a></p><ul><li>Puppet 2009, Salt 2011, Ansible 2012</li><li>CloudFormation 2011, Terraform 2014</li><li>Pulumi 2017, AWS CDK 2019</li><li>下一步是什么？</li></ul><hr><p><a href="https://getk8e.zhubai.love/" target="_blank" rel="noopener">白话Kubernetes入门实践</a></p><p>k8e 作者关于 kubernetes 的一系列文章，持续更新中。</p><hr><p><a href="https://linkerd.io/2020/12/03/why-linkerd-doesnt-use-envoy/" target="_blank" rel="noopener">Why Linkerd doesn’t use Envoy</a></p><p><a href="https://blog.cloudflare.com/zh-cn/how-we-built-pingora-the-proxy-that-connects-cloudflare-to-the-internet-zh-cn/" target="_blank" rel="noopener">将 Cloudflare 连接到互联网的代理——Pingora 的构建方式</a></p><p>为什么 Linkerd 不使用 envoy.</p><pre><code>- 复杂度、资源消耗、安全。- But what if we have a requirement to use Envoy? I would argue that’s not a real requirement. Your job is not to adopt a particular piece of technology. Your job is to solve a problem. And if your problem is “we need to build a reliable, secure, and observable Kubernetes platform without paying an insane complexity cost” then I highly suggest you consider taking a look at Linkerd.</code></pre><hr><p><a href="https://iximiuz.com/en/posts/docker-image-to-filesystem/" target="_blank" rel="noopener">Docker: How To Extract Image Filesystem Without Running Any Containers</a></p><p>如何不运行容器 而导出容器镜像文件系统</p><blockquote><p><code>$ docker pull nginx $ CONT_ID=$(docker create nginx) $ docker export ${CONT_ID} -o nginx.tar.gz</code></p></blockquote><hr><p><a href="https://www.infoq.cn/article/psxdnqxu0ojdbxk5a9jg" target="_blank" rel="noopener">为什么 TCP 协议有性能问题 ·（一）</a></p><blockquote><p>弱网环境是丢包率较高的特殊场景，TCP 在类似场景中的表现很差，当 RTT 为 30ms 时，一旦丢包率达到了 2%，TCP 的吞吐量就会下降 89.9%<a href="https://draveness.me/whys-the-design-tcp-performance#fn:3" target="_blank" rel="noopener">3</a>，从下面的表中我们可以看出丢包对 TCP 的吞吐量极其显著的影响：</p></blockquote><hr><p><a href="https://cloudplane.org/blog/why-cue" target="_blank" rel="noopener">Why We Use CUE (and Not Helm)</a></p><p>为什么使用 [[CUE]]，比较了 [[jsonnet]]、[[Dhall]] 和 [[CUE]]。</p><p>[[Dagger]] 和 [[Acorn]] 也采用了 [[CUE]]</p><hr><p><a href="https://aws.amazon.com/cn/blogs/china/pushing-the-data-transfer-from-amazon-ec2-to-amazon-s3-to-100gbps-line-speed/" target="_blank" rel="noopener">老司机们坐稳了 – 将Amazon EC2到Amazon S3的数据传输推向100Gbps线速</a></p><blockquote><p>答案是非常肯定的:  在全球任何一个亚马逊云科技的区域里, Amazon EC2 到 Amazon S3的默认数据传输<a href="https://aws.amazon.com/cn/premiumsupport/knowledge-center/s3-maximum-transfer-speed-ec2/" target="_blank" rel="noopener">带宽都可以最高达到100Gbps</a>。</p></blockquote><hr><p><a href="https://colobu.com/2022/10/04/redefining-for-loop-variable-semantics/" target="_blank" rel="noopener">十多年了，这个最容易犯错的Go语法终于要改了</a></p><p>“for 循环中变量的使用问题”.<a href="https://github.com/golang/go/discussions/56010" target="_blank" rel="noopener">https://github.com/golang/go/discussions/56010</a></p><hr><p><a href="https://xai.sh/2020/10/16/Move-running-process-into-tmux-session.html" target="_blank" rel="noopener">Move a running process into a tmux session</a></p><p>通过 reptyr 将一个进程移动到 tmux 中</p><hr><p><a href="https://www.junmajinlong.com/ansible/11_faster_ansible/" target="_blank" rel="noopener">Ansible你快点：Ansible执行过程分析、异步、效率优化</a></p><p>通过修改 ansible 配置、SSH 配置，使用第三方 Mitogen 插件来提速。</p><hr><p><a href="https://blog.codingnow.com/2022/09/cargo_matching.html" target="_blank" rel="noopener">货物和货车的匹配</a></p><hr><p><a href="https://iximiuz.com/en/posts/docker-debug-slim-containers/" target="_blank" rel="noopener">Docker: How To Debug Distroless And Slim Containers</a></p><p>使用 namespace 和 kubectl debug 启动临时容器进行 debug。关于 kubectl debug 的更多细节：<a href="https://iximiuz.com/en/posts/kubernetes-ephemeral-containers/" target="_blank" rel="noopener">Kubernetes Ephemeral Containers and kubectl debug Command</a></p><hr><p><a href="https://matt-rickard.com/why-is-nixos-popular-again" target="_blank" rel="noopener">Why Is NixOS Popular Again?</a></p><ul><li>Nix 现在讨论热度上升了:”a more formal team structure around development (<a href="https://discourse.nixos.org/t/nix-team-creation/22228" target="_blank" rel="noopener">link</a>), new startups built around Nix, 30% YoY user growth (<a href="https://discourse.nixos.org/t/2022-nix-survey-results/18983" target="_blank" rel="noopener">link</a>), and exponential growth in GitHub stars.” ，但是 Nix 真正流行起来还是很困难，Nix 的语法，包的持续维护，使用场景。</li><li>用户真的需要 NixOS么？我之前想通过 NixOS来准备自己的开发环境，但是开发环境很少需要重新配置，基本上配置一次可以用很多年，如果真的需要重新配置开发环境，通常也到了更新自己的开发工具链的时候，体验下新鲜工具貌似也不错？</li></ul><hr><p><a href="https://engineering.linkedin.com/blog/2022/skyfall--ebpf-agent-for-infrastructure-observability" target="_blank" rel="noopener">Skyfall: eBPF agent for infrastructure observability</a></p><p>linkedin 使用 eBPF 采集网络相关 metric。</p><blockquote><p>Smoothed RTT (Round trip time): The predicted RTT value obtained by applying a smoothing factor to it, which is also used to adjust the RTO (Retransmission timeout) value. We are collecting this metric to measure the contribution of the network to overall performance.<br>RTT variance: An indication of path jitter. TCP uses this value, combined with SRTT, to compute the RTO. We are collecting this metric to detect transient network issues.<br>Packetloss and Retransmits: These metrics are being collected to monitor network performance.<br>Sending congestion window size: Congestion window controls the number of packets a TCP flow may have in the network at any time.</p></blockquote><hr><p><a href="https://netflixtechblog.com/how-product-teams-can-build-empathy-through-experimentation-6253603880a6" target="_blank" rel="noopener">How Product Teams Can Build Empathy Through Experimentation</a></p><ul><li>同理心，将自己作为真正的用户去思考产品。</li><li>When you’re building things, whether you’re a visual designer, or a designer of an API, or a PM, or anybody who’s building something, lean into trying to put yourself in the shoes of the user. And if you can do that, not just at the beginning when you write down the specs, but all the way through the process, you make a better product in the end.</li></ul><hr><p><a href="https://www.zlovezl.cn/articles/go-func-argument-patterns/" target="_blank" rel="noopener">Go 的几种函数传参模式</a></p><p>Golang 参数传递方法，函数式选项模式。</p><hr><p><a href="https://matt-rickard.com/ebpf-file-watching" target="_blank" rel="noopener">eBPF File Watching</a></p><p>inotify 存在的问题：</p><blockquote><p>Doesn’t support recursive directory watches<br>Can drop changes when a large number of filesystem events occur (fixed-sized buffer)<br>No native debouncing support when a large number of events occur<br>Race conditions (rename events and between different instances of inotify)<br>API issues (no event information about the process that changed the file, path names as the event data)</p></blockquote><hr><p><a href="https://jiajunhuang.com/articles/2022_10_08-oauth2_explained.md.html" target="_blank" rel="noopener">OAuth 2 详解（一）：简介及 Authorization Code 模式</a></p><p>Jiajun 同学的 OAuth 2.0 系列博客。</p><hr><p><a href="https://www.alexedwards.net/blog/working-with-cookies-in-go" target="_blank" rel="noopener">A Complete Guide to Working With Cookies in Go</a></p><p>Golang 关于 cookie 处理方式。</p><hr><p><a href="https://matt-rickard.com/short-taxonomy-of-open-source-strategies" target="_blank" rel="noopener">Short Taxonomy of Open-Source Strategies</a></p><p>开源策略分类：招聘、市场营销、进入全新市场、减少竞争对手的护城河、建立标准。</p><hr><p><a href="https://medium.com/higher-order-functions/go-worker-pool-the-concurrency-powerhouse-2dc7971f4f15" target="_blank" rel="noopener">Go Worker Pool: The Concurrency Powerhouse</a></p><p>一步一步将一个串行业务改为并行。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p><a href="https://tumutanzi.com/archives/16923" target="_blank" rel="noopener">空城计与职场生存秘籍</a></p><p>谈论制造“被需要”，但是这种制造方式感觉不“正确”。</p><hr><p><a href="https://www.kawabangga.com/posts/4840" target="_blank" rel="noopener">婚礼回顾和一些经验分享</a></p><p>摆正心态，这场婚礼最重要的是谁，是给谁办的，想明白这个问题，然后其他的问题都以这些人会不会高兴为准。</p><p>国庆刚好也参加了朋友的婚礼，婚礼需要一个项目经理来掌握全局，细节部分很容易分散精力且让人暴躁。</p><hr><p><a href="https://whatiknown.strrl.dev/notes/vivthodp9f5lzmz6wjw7dh3/" target="_blank" rel="noopener">The documentation system</a></p><p>教你如何写文档的文档。</p><hr><p><a href="https://reorx.com/essays/2022/10/how-novels-become-boring/" target="_blank" rel="noopener">真正的好作品只能靠自己去发现</a></p><blockquote><p>好的作品不会过于套路化，因为有追求的创作者总是在尝试突破和创新，因此不仅生产效率不会太高，还需要读者有一定的耐心和智力才能渐入佳境。  大众认为好的不一定对自己而言是好的。</p></blockquote><hr><p><a href="https://pchase.substack.com/p/how-the-largest-open-source-companies" target="_blank" rel="noopener">How the largest open source companies got their first 1k community members</a></p><p>如何获得 1k 个用户？hackernews、meeting、注重早期用户。</p><hr><p><a href="https://mp.weixin.qq.com/s/94LRW6NSy28tTaBVr-cQ7g" target="_blank" rel="noopener">倍速播放：青年闲暇时间的消费与异化</a></p><blockquote><p>在倍速播放背后，折射出从工业社会、消费社会到互联网社会资本增殖逻辑的转变，资本从原来压榨劳动时间的逻辑转变为促进闲暇时间的商品消费，最后转变为想方设法占用人们的闲暇时间本身。<br>倍速播放在一定程度上可以看作是青年对快时代节奏的主动适应和对资本逻辑的反抗，彰显了青年的主体性。然而，即使青年自主选择了倍速播放，背后依然难以挣脱资本支配的逻辑。<br>在青年和资本的博弈中，资本获得了播放时长增加和播放效率提升的双重胜利，青年却未能获得加倍的自由和幸福，导致了闲暇时间的异化。倍速播放是闲暇时间效率化的体现，是倍速生活的缩影，却并不一定是通往自由和幸福的捷径。</p></blockquote><h2 id="书影"><a href="#书影" class="headerlink" title="书影"></a>书影</h2><p>《子弹列车》：打打打杀杀杀。</p><p>《万里归途》：感觉不如《战狼》啊。</p><p>《圈套》：系列剧，推理加搞笑，轻松娱乐。</p><p>《独行月球》：不好笑。</p><p>《Take One：终极一曲 》：理想主义者的演出。</p><p>《Terraform：多云、混合云环境下实现基础设施即代码》： 最近打算搞一个 Provider，重新看书了解一下使用姿势。</p>]]></content>
    
    <summary type="html">
    
      记录一下自己每周读过的文章，看过的电影，阅读过的书籍。
    
    </summary>
    
    
      <category term="Weekly" scheme="https://zdyxry.github.io/tags/Weekly/"/>
    
  </entry>
  
</feed>
